using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using tt.messaging.order.enums;
using tt.messaging.ttus;
using tt_net_sdk;
using static System.Runtime.CompilerServices.RuntimeHelpers;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TextBox;
using Serilog;



namespace ASE_ASE
{

    public partial class Form1 : Form
    {
        int max_limit = 15;
        Quantity bidQty;
        Quantity askQty;
        private TTAPI m_api = null;
        private InstrumentLookup m_instrLookupRequest = null;
        private InstrumentLookup m_instrLookupRequest_1 = null;
        private InstrumentLookup m_instrLookupRequest_2 = null;
        private InstrumentLookup m_instrLookupRequest_3 = null;
        private InstrumentLookup m_instrLookupRequest_4 = null;
        private InstrumentLookup m_instrLookupRequest_5 = null;
        private InstrumentLookup m_instrLookupRequest_6 = null;
        private InstrumentLookup m_instrLookupRequest_7 = null;
        private InstrumentLookup m_instrLookupRequest_8 = null;
        private InstrumentLookup m_instrLookupRequest_9 = null;
        private InstrumentLookup m_instrLookupRequest_10 = null;
        private InstrumentLookup m_instrLookupRequest_11 = null;
        private InstrumentLookup m_instrLookupRequest_12 = null;
        private InstrumentLookup m_instrLookupRequest_13 = null;
        private InstrumentLookup m_instrLookupRequest_14 = null;
        private InstrumentLookup m_instrLookupRequest_15 = null;
        private InstrumentLookup m_instrLookupRequest_16 = null;
        private InstrumentLookup m_instrLookupRequest_17 = null;
        private InstrumentLookup m_instrLookupRequest_18 = null;
        private InstrumentLookup m_instrLookupRequest_19 = null;
        private InstrumentLookup m_instrLookupRequest_20 = null;
        private InstrumentLookup m_instrLookupRequest_21 = null;
        private InstrumentLookup m_instrLookupRequest_22 = null;
        private InstrumentLookup m_instrLookupRequest_23 = null;
        private InstrumentLookup m_instrLookupRequest_24 = null;
        private InstrumentLookup m_instrLookupRequest_25 = null;
        private InstrumentLookup m_instrLookupRequest_26 = null;
        private InstrumentLookup m_instrLookupRequest_27 = null;
        private InstrumentLookup m_instrLookupRequest_28 = null;
        private InstrumentLookup m_instrLookupRequest_29 = null;
        private InstrumentLookup m_instrLookupRequest_30 = null;
        private InstrumentLookup m_instrLookupRequest_31 = null;
        private InstrumentLookup m_instrLookupRequest_32 = null;
        private InstrumentLookup m_instrLookupRequest_33 = null;
        private InstrumentLookup m_instrLookupRequest_34 = null;
        private InstrumentLookup m_instrLookupRequest_35 = null;
        private InstrumentLookup m_instrLookupRequest_36 = null;
        private InstrumentLookup m_instrLookupRequest_37 = null;
        private InstrumentLookup m_instrLookupRequest_38 = null;
        private InstrumentLookup m_instrLookupRequest_39 = null;
        private InstrumentLookup m_instrLookupRequest_40 = null;
        private InstrumentLookup m_instrLookupRequest_41 = null;
        private InstrumentLookup m_instrLookupRequest_42 = null;
        private InstrumentLookup m_instrLookupRequest_43 = null;
        private InstrumentLookup m_instrLookupRequest_44 = null;
        private InstrumentLookup m_instrLookupRequest_45 = null;
        private InstrumentLookup m_instrLookupRequest_46 = null;
        private InstrumentLookup m_instrLookupRequest_47 = null;


        
        private PriceSubscription m_priceSubsciption = null;
        private PriceSubscription m_priceSubsciption_i = null;
        private PriceSubscription m_priceSubsciption_jul24_aug24 = null;
        private PriceSubscription m_priceSubsciption_jul24 = null;
        private PriceSubscription m_priceSubsciption_aug24 = null;
        private PriceSubscription m_priceSubsciption_jan24_feb24 = null;
        private PriceSubscription m_priceSubsciption_jan24 = null;
        private PriceSubscription m_priceSubsciption_feb24 = null;
        private PriceSubscription m_priceSubsciption_apr24_may24 = null;
        private PriceSubscription m_priceSubsciption_apr24 = null;
        private PriceSubscription m_priceSubsciption_may24 = null;
       
        /*private PriceSubscription m_priceSubsciption_apr24_may24 = null;
        private PriceSubscription m_priceSubsciption_ase_sep23_jul23 = null;
        private PriceSubscription m_priceSubsciption_ase_sep23_Aug24 = null;
        private PriceSubscription m_priceSubsciption_ase_dec23_jan24 = null;
        private PriceSubscription m_priceSubsciption_ase_dec23_feb24 = null;*/
      /*  private PriceSubscription m_priceSubsciption = null;*/



        private tt_net_sdk.WorkerDispatcher m_disp = null;
        private TradeSubscription m_instrumentTradeSubscription = null;
        private TradeSubscription m_instrumentTradeSubscription_1 = null;
        private TradeSubscription m_instrumentTradeSubscription_1_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_1_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_2 = null;
        private TradeSubscription m_instrumentTradeSubscription_2_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_2_a2 = null;
       
        private TradeSubscription m_instrumentTradeSubscription_3 = null;
        private TradeSubscription m_instrumentTradeSubscription_3_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_3_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_4 = null;
        private TradeSubscription m_instrumentTradeSubscription_4_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_4_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_5 = null;
        private TradeSubscription m_instrumentTradeSubscription_5_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_5_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_6 = null;
        private TradeSubscription m_instrumentTradeSubscription_6_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_6_a2 = null;
        // Other private member variables
        private int m_ps_counter = 0;
        private bool m_isOrderBookDownloaded = false;
        // Instrument Information 
        private readonly string m_market = "ASE";
        private readonly string m_product = "ASE";
        private readonly string m_prodType = "Synthetic";
        private readonly string m_alias = "SR3 Jun24/Sr1 Jul24 .net";
        private readonly string m_alias_a1 = "SR3 Jun24/Sr1 Jul24 .net - i";
        private readonly string m_alias_a2 = "SR3 Jun24/Sr1 Jul24 .net - ii";
        private readonly string m_alias_ase_1 = "SR3 Jun24/Sr1 Aug24 .net";
        private readonly string m_alias_ase_1_a1 = "SR3 Jun24/Sr1 Aug24 .net - i";
        private readonly string m_alias_ase_1_a2 = "SR3 Jun24/Sr1 Aug24 .net - ii";
        private readonly string m_alias_ase_2 = "SR3 Jun24/Sr1 Jul24/Sr1 Aug24 .net";
        
        private readonly string m_market_1 = "CME";
        private readonly string m_product_1 = "SR1";
        private readonly string m_prodType_1 = "43";
        private readonly string m_alias_1 = "SR1 Jul24-Aug24 Calendar";
        private readonly string m_market_2 ="CME";
        private readonly string m_product_2 = "SR1";
        private readonly string m_product_3 = "SR3";
        private readonly string m_product_4 = "SR1|ZQ";
        private readonly string m_prodType_2 = "Future";
        private readonly string m_alias_outright_1 = "SR3 Jun24";
        private readonly string m_alias_outright_2 = "SR1 Jul24";
        private readonly string m_alias_outright_3 = "SR1 Aug24";
        private readonly string m_alias_outright_i = "ZQ Jul24";
        private readonly string m_alias_outright_ii = "ZQ Aug24";

        private readonly string m_alias_ase_3 = "SR3 Dec23/Sr1 Jan24 .net";
        private readonly string m_alias_ase_3_a1 = "SR3 Dec23/Sr1 Jan24 .net - i";
        private readonly string m_alias_ase_3_a2 = "SR3 Dec23/Sr1 Jan24 .net - ii";
        private readonly string m_alias_ase_4 = "SR3 Dec23/Sr1 Feb24 .net";
        private readonly string m_alias_ase_4_a1 = "SR3 Dec23/Sr1 Feb24 .net - i";
        private readonly string m_alias_ase_4_a2 = "SR3 Dec23/Sr1 Feb24 .net - ii";
        private readonly string m_alias_ase_3_main = "SR3 Dec23/Sr1 Jan24/Sr1 Feb24 .net";

        private readonly string m_alias_ase_5 = "SR3 Mar24/Sr1 Apr24 .net";
        private readonly string m_alias_ase_5_a1 = "SR3 Mar24/Sr1 Apr24 .net - i";
        private readonly string m_alias_ase_5_a2 = "SR3 Mar24/Sr1 Apr24 .net - ii";
        private readonly string m_alias_ase_6 = "SR3 Mar24/Sr1 May24 .net";
        private readonly string m_alias_ase_6_a1 = "SR3 Mar24/Sr1 May24 .net - i";
        private readonly string m_alias_ase_6_a2 = "SR3 Mar24/Sr1 May24 .net - ii";
        private readonly string m_alias_ase_4_main = "SR3 Mar24/Sr1 Apr24/Sr1 May24 .net";


        private readonly string m_alias_2 = "SR1 Jan24-Feb24 Calendar";
        private readonly string m_alias_outright_4 = "SR3 Dec23";
        private readonly string m_alias_outright_5 = "SR1 Jan24";
        private readonly string m_alias_outright_6 = "SR1 Feb24";
        private readonly string m_alias_outright_iii = "ZQ Jan24";
        private readonly string m_alias_outright_iv = "ZQ Feb24";

        private readonly string m_alias_3 = "SR1 Apr24-May24 Calendar";
        private readonly string m_alias_outright_7 = "SR3 Mar24";
        private readonly string m_alias_outright_8 = "SR1 Apr24";
        private readonly string m_alias_outright_9 = "SR1 May24";
        private readonly string m_alias_outright_v = "ZQ Apr24";
        private readonly string m_alias_outright_vi = "ZQ May24";

        private readonly string m_alias_1_sr1_zq = "SR1 Jul24 - ZQ Jul24 Inter-Product";
        private readonly string m_alias_2_sr1_zq = "SR1 Aug24 - ZQ Aug24 Inter-Product";
        private readonly string m_alias_3_sr1_zq = "SR1 Jan24 - ZQ Jan24 Inter-Product";
        private readonly string m_alias_4_sr1_zq = "SR1 Feb24 - ZQ Feb24 Inter-Product"; 
        private readonly string m_alias_5_sr1_zq = "SR1 Apr24 - ZQ Apr24 Inter-Product";
        private readonly string m_alias_6_sr1_zq = "SR1 May24 - ZQ May24 Inter-Product";
       /* private readonly string m_alias_ase_5 = "SR3 Mar24/Sr1 Apr24 .net";
        private readonly string m_alias_ase_5_a1 = "SR3 Mar24/Sr1 Apr24 .net - i";
        private readonly string m_alias_ase_5_a2 = "SR3 Mar24/Sr1 Apr24 .net - ii";
        private readonly string m_alias_ase_6 = "SR3 Mar24/Sr1 May24 .net";
        private readonly string m_alias_ase_6_a1 = "SR3 Mar24/Sr1 May24 .net - i";
        private readonly string m_alias_ase_6_a2 = "SR3 Mar24/Sr1 May24 .net - ii";
        private readonly string m_alias_ase_4_main = "SR3 Mar24/Sr1 Apr24/Sr1 May24 .net";
        private readonly string m_alias_3 = "SR1 Apr24-May24 Calendar";
        private readonly string m_alias_outright_7 = "SR3 Mar24";
        private readonly string m_alias_outright_8 = "SR1 Apr24";
        private readonly string m_alias_outright_9 = "SR1 May24";
*/






        string order_updated_details= "";
        string order_updated_details_i= "";
       
        
        
        
        private IReadOnlyCollection<tt_net_sdk.Account> m_accounts = null;
        private bool m_isDisposed = false;

        private bool qouted_price_received_b = false;
        private bool qouted_price_received_s = false;
        private bool qouted_price_received_2_b = false;
        private bool qouted_price_received_2_s = false;
        private bool buying_1 = false;
        private bool selling_1 = false;
        private bool allowed_1 = false;
        private bool buying_2 = false;
        private bool selling_2 = false;
        private bool allowed_2 = false;
        private bool change_b = false;
        private bool change_s = false;
        private bool change_2_b = false;
        private bool change_2_s = false;


        private bool qouted_price_received_3_b = false;
        private bool qouted_price_received_3_s = false;
        private bool qouted_price_received_4_b = false;
        private bool qouted_price_received_4_s = false;
        private bool buying_3 = false;
        private bool selling_3 = false;
        private bool allowed_3 = false;
        private bool buying_4 = false;
        private bool selling_4 = false;
        private bool allowed_4 = false;
        private bool change_3_b = false;
        private bool change_3_s = false;
        private bool change_4_b = false;
        private bool change_4_s = false;

        private bool qouted_price_received_5_b = false;
        private bool qouted_price_received_5_s = false;
        private bool qouted_price_received_6_b = false;
        private bool qouted_price_received_6_s = false;
        private bool buying_5 = false;
        private bool selling_5 = false;
        private bool allowed_5 = false;
        private bool buying_6 = false;
        private bool selling_6 = false;
        private bool allowed_6 = false;
        private bool change_5_b = false;
        private bool change_5_s = false;
        private bool change_6_b = false;
        private bool change_6_s = false;



        Price qouted_price;
        decimal x=0;
        Price user_price_b;
        Price user_price_s;
        Price user_price_2_b;
        Price user_price_2_s;
        Price user_price_3_b;
        Price user_price_3_s;
        Price user_price_4_b;
        Price user_price_4_s;
        Price user_price_5_b;
        Price user_price_5_s;
        Price user_price_6_b;
        Price user_price_6_s;



        private string m_orderKey_b = "";
        private string m_orderKey_b_old = "";
        private string m_childorderKey_b_1 = "";
        private string m_childorderKey_b_2 = "";
        private string m_hedgeorderKey_b_1 = "";
        private string m_hedgeorderKey_b_2 = "";
        decimal qoute_stuck_price_b_1 = 0;
        decimal qoute_stuck_price_b_2 = 0;
        string qoute_stuck_side_b_1 = "";
        string qoute_stuck_side_b_2 = "";


        private string m_orderKey_s = "";
        private string m_orderKey_s_old = "";
        private string m_childorderKey_s_1 = "";
        private string m_childorderKey_s_2 = "";
        private string m_hedgeorderKey_s_1 = "";
        private string m_hedgeorderKey_s_2 = "";
        decimal qoute_stuck_price_s_1 = 0;
        decimal qoute_stuck_price_s_2 = 0;
        string qoute_stuck_side_s_1 = "";
        string qoute_stuck_side_s_2 = "";

        private string m_orderKey_1_b = "";
       
        private string m_orderKey_1_b_old = "";
        private string m_childorderKey_1_b_1 = "";
        private string m_childorderKey_1_b_2 = "";
        private string m_hedgeorderKey_1_b_1 = "";
        private string m_hedgeorderKey_1_b_2 = "";

        decimal qoute_stuck_price_1_b_1 = 0;
        decimal qoute_stuck_price_1_b_2 = 0;
        string qoute_stuck_side_1_b_1 = "";
        string qoute_stuck_side_1_b_2 = "";

        private string m_orderKey_3_b = "";
        private string m_orderKey_3_b_old = "";
        private string m_childorderKey_3_b_1 = "";
        private string m_childorderKey_3_b_2 = "";
        private string m_hedgeorderKey_3_b_1 = "";
        private string m_hedgeorderKey_3_b_2 = "";
        decimal qoute_stuck_price_3_b_1 = 0;
        decimal qoute_stuck_price_3_b_2 = 0;
        string qoute_stuck_side_3_b_1 = "";
        string qoute_stuck_side_3_b_2 = "";


        private string m_orderKey_3_s = "";
        private string m_orderKey_3_s_old = "";
        private string m_childorderKey_3_s_1 = "";
        private string m_childorderKey_3_s_2 = "";
        private string m_hedgeorderKey_3_s_1 = "";
        private string m_hedgeorderKey_3_s_2 = "";
        decimal qoute_stuck_price_3_s_1 = 0;
        decimal qoute_stuck_price_3_s_2 = 0;
        string qoute_stuck_side_3_s_1 = "";
        string qoute_stuck_side_3_s_2 = "";

        private string m_orderKey_4_b = "";
        private string m_orderKey_4_b_old = "";
        private string m_childorderKey_4_b_1 = "";
        private string m_childorderKey_4_b_2 = "";
        private string m_hedgeorderKey_4_b_1 = "";
        private string m_hedgeorderKey_4_b_2 = "";
        decimal qoute_stuck_price_4_b_1 = 0;
        decimal qoute_stuck_price_4_b_2 = 0;
        string qoute_stuck_side_4_b_1 = "";
        string qoute_stuck_side_4_b_2 = "";



        private string m_orderKey_4_s = "";
        private string m_orderKey_4_s_old = "";
        private string m_childorderKey_4_s_1 = "";
        private string m_childorderKey_4_s_2 = "";
        private string m_hedgeorderKey_4_s_1 = "";
        private string m_hedgeorderKey_4_s_2 = "";
        decimal qoute_stuck_price_4_s_1 = 0;
        decimal qoute_stuck_price_4_s_2 = 0;
        string qoute_stuck_side_4_s_1 = "";
        string qoute_stuck_side_4_s_2 = "";

        private string m_orderKey_5_b = "";
        private string m_orderKey_5_b_old = "";
        private string m_childorderKey_5_b_1 = "";
        private string m_childorderKey_5_b_2 = "";
        private string m_hedgeorderKey_5_b_1 = "";
        private string m_hedgeorderKey_5_b_2 = "";
        decimal qoute_stuck_price_5_b_1 = 0;
        decimal qoute_stuck_price_5_b_2 = 0;
        string qoute_stuck_side_5_b_1 = "";
        string qoute_stuck_side_5_b_2 = "";


        private string m_orderKey_5_s = "";
        private string m_orderKey_5_s_old = "";
        private string m_childorderKey_5_s_1 = "";
        private string m_childorderKey_5_s_2 = "";
        private string m_hedgeorderKey_5_s_1 = "";
        private string m_hedgeorderKey_5_s_2 = "";
        decimal qoute_stuck_price_5_s_1 = 0;
        decimal qoute_stuck_price_5_s_2 = 0;
        string qoute_stuck_side_5_s_1 = "";
        string qoute_stuck_side_5_s_2 = "";

        private string m_orderKey_6_b = "";
        private string m_orderKey_6_b_old = "";
        private string m_childorderKey_6_b_1 = "";
        private string m_childorderKey_6_b_2 = "";
        private string m_hedgeorderKey_6_b_1 = "";
        private string m_hedgeorderKey_6_b_2 = "";
        decimal qoute_stuck_price_6_b_1 = 0;
        decimal qoute_stuck_price_6_b_2 = 0;
        string qoute_stuck_side_6_b_1 = "";
        string qoute_stuck_side_6_b_2 = "";



        private string m_orderKey_6_s = "";
        private string m_orderKey_6_s_old = "";
        private string m_childorderKey_6_s_1 = "";
        private string m_childorderKey_6_s_2 = "";
        private string m_hedgeorderKey_6_s_1 = "";
        private string m_hedgeorderKey_6_s_2 = "";
        decimal qoute_stuck_price_6_s_1 = 0;
        decimal qoute_stuck_price_6_s_2 = 0;
        string qoute_stuck_side_6_s_1 = "";
        string qoute_stuck_side_6_s_2 = "";


        private string m_orderKey_1_s = "";
        private string m_orderKey_1_s_old = "";
        private string m_childorderKey_1_s_1 = "";
        private string m_childorderKey_1_s_2 = "";
        private string m_hedgeorderKey_1_s_1 = "";
        private string m_hedgeorderKey_1_s_2 = "";
        decimal qoute_stuck_price_1_s_1 = 0;
        decimal qoute_stuck_price_1_s_2 = 0;
        string qoute_stuck_side_1_s_1 = "";
        string qoute_stuck_side_1_s_2 = "";

        tt_net_sdk.Instrument instrument_1;
        tt_net_sdk.Instrument instrument_1_a1;
        tt_net_sdk.Instrument instrument_1_a2;
        tt_net_sdk.Instrument instrument_2;
        tt_net_sdk.Instrument instrument_2_a1;
        tt_net_sdk.Instrument instrument_2_a2;
        tt_net_sdk.Instrument instrument_3;
        tt_net_sdk.Instrument instrument_3_a1;
        tt_net_sdk.Instrument instrument_3_a2;
        tt_net_sdk.Instrument instrument_4;
        tt_net_sdk.Instrument instrument_4_a1;
        tt_net_sdk.Instrument instrument_4_a2;
        tt_net_sdk.Instrument instrument_5;
        tt_net_sdk.Instrument instrument_5_a1;
        tt_net_sdk.Instrument instrument_5_a2;
        tt_net_sdk.Instrument instrument_6;
        tt_net_sdk.Instrument instrument_6_a1;
        tt_net_sdk.Instrument instrument_6_a2;
        tt_net_sdk.Instrument instrument;
        tt_net_sdk.Instrument instrument_main_2;
        tt_net_sdk.Instrument instrument_main_3;
       
        Price final_price;
        decimal final_p =0;
        decimal final_p_2 = 0;

        Price final_price_1_b;
        Price final_price_1_s ;
        decimal ratio_1 = 9;
        decimal first_1_b = 0;
        decimal first_1_s = 0;
        bool new_reload_1_s = false;
        bool new_reload_1_b = false;

        Price final_price_2_b;
        Price final_price_2_s;
        decimal ratio_2 = 9;
        decimal first_2_b = 0;
        decimal first_2_s = 0;
        bool new_reload_2_s = false;
        bool new_reload_2_b = false;

        decimal qt1_b, qt2_b;
        decimal qt1_s, qt2_s;
        decimal rel_1_b = 1, rel_2_b = 1;
        decimal rel_1_s = 1, rel_2_s = 1;
        Price best_bid_1, best_ask_1;
        bool best_bid_1_received = false, best_ask_1_received = false;
        bool pause_1_b = false, pause_2_b = false;
        bool pause_1_s = false, pause_2_s = false;
        bool wait_1_b = false, wait_2_b = false;
        bool wait_1_s = false, wait_2_s = false;

        Price final_price_3_b;
        Price final_price_3_s;
        decimal ratio_3 = 9;
        decimal first_3_b = 0;
        decimal first_3_s = 0;
        bool new_reload_3_s = false;
        bool new_reload_3_b = false;

        Price final_price_4_b;
        Price final_price_4_s;
        decimal ratio_4 = 9;
        decimal first_4_b = 0;
        decimal first_4_s = 0;
        bool new_reload_4_s = false;
        bool new_reload_4_b = false;

        decimal qt3_b, qt4_b;
        decimal qt3_s, qt4_s;
        decimal rel_3_b = 1, rel_4_b = 1;
        decimal rel_3_s = 1, rel_4_s = 1;
        Price best_bid_2, best_ask_2;
        bool best_bid_2_received = false, best_ask_2_received = false;
        bool pause_3_b = false, pause_4_b = false;
        bool pause_3_s = false, pause_4_s = false;
        bool wait_3_b = false, wait_4_b = false;
        bool wait_3_s = false, wait_4_s = false;

        Price final_price_5_b;
        Price final_price_5_s;
        decimal ratio_5 = 9;
        decimal first_5_b = 0;
        decimal first_5_s = 0;
        bool new_reload_5_s = false;
        bool new_reload_5_b = false;

        Price final_price_6_b;
        Price final_price_6_s;
        decimal ratio_6 = 9;
        decimal first_6_b = 0;
        decimal first_6_s = 0;
        bool new_reload_6_s = false;
        bool new_reload_6_b = false;

        decimal qt5_b, qt6_b;
        decimal qt5_s, qt6_s;
        decimal rel_5_b = 1, rel_6_b = 1;
        decimal rel_5_s = 1, rel_6_s = 1;
        Price best_bid_3, best_ask_3;
        bool best_bid_3_received = false, best_ask_3_received = false;
        bool pause_5_b = false, pause_6_b = false;
        bool pause_5_s = false, pause_6_s = false;
        bool wait_5_b = false, wait_6_b = false;
        bool wait_5_s = false, wait_6_s = false;






















        private SpreadDetails spDet_1,spDet_2;
        Dictionary<string,Price> myDictionary = new Dictionary<string,Price>();
        Dictionary<string,Quantity> myDictionary_1 = new Dictionary<string,Quantity>();

      
     
      
        
      

       

        Quantity mar_bidqty, mar_askqty;
        Quantity apr_bidqty, apr_askqty;
        Quantity may_bidqty, may_askqty;
        Quantity apr_bidqty_i, apr_askqty_i;
        Quantity may_bidqty_i, may_askqty_i;


        bool order_b_a1 = false;
        bool order_b_a1n = false;
        bool order_b_a2 = false;
        bool order_b_a2n = false; 
        
        bool order_s_a1 = false;
        bool order_s_a1n = false;
        bool order_s_a2 = false;
        bool order_s_a2n = false;
        
        
        bool order_1_b_a1 = false;
        bool order_1_b_a1n = false;
        bool order_1_b_a2 = false;
        bool order_1_b_a2n = false; 
        
        bool order_1_s_a1 = false;
        bool order_1_s_a1n = false;
        bool order_1_s_a2 = false;
        bool order_1_s_a2n = false;

        decimal fill_1_b=0;
        decimal fill_1_s=0;
        decimal fill_2_b=0;
        decimal fill_2_s=0;

        decimal partial_fill_b_1 = 0;
        decimal partial_fill_b_2 = 0;
        decimal partial_fill_s_1 = 0;
        decimal partial_fill_s_2 = 0; 
        decimal partial_fill_1_b_1 = 0;
        decimal partial_fill_1_b_2 = 0;
        decimal partial_fill_1_s_1 = 0;
        decimal partial_fill_1_s_2 = 0;

        bool order_3_b_a1 = false;
        bool order_3_b_a1n = false;
        bool order_3_b_a2 = false;
        bool order_3_b_a2n = false;
        bool order_3_s_a1 = false;
        bool order_3_s_a1n = false;
        bool order_3_s_a2 = false;
        bool order_3_s_a2n = false;
        decimal fill_3_b = 0;
        decimal fill_3_s = 0;
        decimal partial_fill_3_b_1 = 0;
        decimal partial_fill_3_b_2 = 0;
        decimal partial_fill_3_s_1 = 0;
        decimal partial_fill_3_s_2 = 0;

        bool order_4_b_a1 = false;
        bool order_4_b_a1n = false;
        bool order_4_b_a2 = false;
        bool order_4_b_a2n = false;

        bool order_4_s_a1 = false;
        bool order_4_s_a1n = false;
        bool order_4_s_a2 = false;
        bool order_4_s_a2n = false;
        decimal fill_4_b = 0;
        decimal fill_4_s = 0;
        decimal partial_fill_4_b_1 = 0;
        decimal partial_fill_4_b_2 = 0;
        decimal partial_fill_4_s_1 = 0;
        decimal partial_fill_4_s_2 = 0;

        bool order_5_b_a1 = false;
        bool order_5_b_a1n = false;
        bool order_5_b_a2 = false;
        bool order_5_b_a2n = false;
        bool order_5_s_a1 = false;
        bool order_5_s_a1n = false;
        bool order_5_s_a2 = false;
        bool order_5_s_a2n = false;
        decimal fill_5_b = 0;
        decimal fill_5_s = 0;
        decimal partial_fill_5_b_1 = 0;
        decimal partial_fill_5_b_2 = 0;
        decimal partial_fill_5_s_1 = 0;
        decimal partial_fill_5_s_2 = 0;

        bool order_6_b_a1 = false;
        bool order_6_b_a1n = false;
        bool order_6_b_a2 = false;
        bool order_6_b_a2n = false;

        bool order_6_s_a1 = false;
        bool order_6_s_a1n = false;
        bool order_6_s_a2 = false;
        bool order_6_s_a2n = false;
        decimal fill_6_b = 0;
        decimal fill_6_s = 0;
        decimal partial_fill_6_b_1 = 0;
        decimal partial_fill_6_b_2 = 0;
        decimal partial_fill_6_s_1 = 0;
        decimal partial_fill_6_s_2 = 0;

        private object OriginalBuyLock = new object(); 
        private object OriginalsellLock = new object();
        private object Originalsell2Lock = new object();
        private object OriginalBuy2Lock = new object();
        private object OriginalBuy3Lock = new object();
        private object Originalsell3Lock = new object();
        private object Originalsell4Lock = new object();
        private object OriginalBuy4Lock = new object(); 
        private object OriginalBuy5Lock = new object();
        private object Originalsell5Lock = new object();
        private object Originalsell6Lock = new object();
        private object OriginalBuy6Lock = new object();

        private object ChangeBuyLock = new object(); 
        private object ChangesellLock = new object();
        private object Changesell2Lock = new object();
        private object ChangeBuy2Lock = new object();
        private object ChangeBuy3Lock = new object();
        private object Changesell3Lock = new object();
        private object Changesell4Lock = new object();
        private object ChangeBuy4Lock = new object();
        private object ChangeBuy5Lock = new object();
        private object Changesell5Lock = new object();
        private object Changesell6Lock = new object();
        private object ChangeBuy6Lock = new object();

        DateTime currentDateTime_start = DateTime.Now;
        DateTime currentDateTime_end = DateTime.Now;
        tt_net_sdk.ServiceEnvironment environment;
        bool wrong_price_1_b=false;
        bool wrong_price_1_s=false;
        bool wrong_price_2_b=false;
        bool wrong_price_2_s=false;
        bool wrong_price_3_b=false;
        bool wrong_price_3_s=false;
        bool wrong_price_4_b=false;
        bool wrong_price_4_s=false; 
        bool wrong_price_5_b=false;
        bool wrong_price_5_s=false;
        bool wrong_price_6_b=false;
        bool wrong_price_6_s=false;
       
        DateTime wrong_price_time_1_b=DateTime.Now;
        DateTime wrong_price_time_1_s=DateTime.Now;
        DateTime wrong_price_time_2_b=DateTime.Now;
        DateTime wrong_price_time_2_s=DateTime.Now;
        DateTime wrong_price_time_3_b=DateTime.Now;
        DateTime wrong_price_time_3_s=DateTime.Now;
        DateTime wrong_price_time_4_b=DateTime.Now;
        DateTime wrong_price_time_4_s=DateTime.Now;  
        
        DateTime wrong_price_time_5_b=DateTime.Now;
        DateTime wrong_price_time_5_s=DateTime.Now;
        DateTime wrong_price_time_6_b=DateTime.Now;
        DateTime wrong_price_time_6_s=DateTime.Now;
        
        bool checker = false;

        bool buying_i = false;
        decimal first_i_b = 0;
        bool selling_i = false;
        decimal first_i_s = 0;
        Price final_price_i_b;
        Price final_price_i_s;
        bool new_reload_i_s = false;
        bool new_reload_i_b = false;

        decimal qti_b, qtii_b;
        decimal qtii_s, qti_s;
        decimal rel_i_b = 1, rel_ii_b = 1;
        decimal rel_i_s = 1, rel_ii_s = 1;
        bool pause_i_b = false, pause_ii_b = false;
        bool pause_i_s = false, pause_ii_s = false;

        bool buying_ii = false;
        decimal first_ii_b = 0;
        bool selling_ii = false;
        decimal first_ii_s = 0;
        Price final_price_ii_b;
        Price final_price_ii_s;
        bool new_reload_ii_s = false;
        bool new_reload_ii_b = false;



        bool buying_iii = false;
        decimal first_iii_b = 0;
        bool selling_iii = false;
        decimal first_iii_s = 0;
        Price final_price_iii_b;
        Price final_price_iii_s;
        bool new_reload_iii_s = false;
        bool new_reload_iii_b = false;


        decimal qtiii_b, qtiv_b;
        decimal qtiii_s, qtiv_s;
        decimal rel_iii_b = 1, rel_iv_b = 1;
        decimal rel_iii_s = 1, rel_iv_s = 1;
        bool pause_iii_b = false, pause_iv_b = false;
        bool pause_iii_s = false, pause_iv_s = false;

        bool buying_iv = false;
        decimal first_iv_b = 0;
        bool selling_iv = false;
        decimal first_iv_s = 0;
        Price final_price_iv_b;
        Price final_price_iv_s;
        bool new_reload_iv_s = false;
        bool new_reload_iv_b = false;


        bool buying_v = false;
        decimal first_v_b = 0;
        bool selling_v = false;
        decimal first_v_s = 0;
        Price final_price_v_b;
        Price final_price_v_s;
        bool new_reload_v_s = false;
        bool new_reload_v_b = false;


        decimal qtv_b, qtvi_b;
        decimal qtv_s, qtvi_s;
        decimal rel_v_b = 1, rel_vi_b = 1;
        decimal rel_v_s = 1, rel_vi_s = 1;
        bool pause_v_b = false, pause_vi_b = false;
        bool pause_v_s = false, pause_vi_s = false;

        bool buying_vi = false;
        decimal first_vi_b = 0;
        bool selling_vi = false;
        decimal first_vi_s = 0;
        Price final_price_vi_b;
        Price final_price_vi_s;
        bool new_reload_vi_s = false;
        bool new_reload_vi_b = false;















        private string m_orderKey_i_b = "";
        private string m_orderKey_i_b_old = "";
        private string m_childorderKey_i_b_1 = "";
        private string m_childorderKey_i_b_2 = "";
        private string m_hedgeorderKey_i_b_1 = "";
        private string m_hedgeorderKey_i_b_2 = "";
        decimal qoute_stuck_price_i_b_1 = 0;
        decimal qoute_stuck_price_i_b_2 = 0;
        string qoute_stuck_side_i_b_1 = "";
        string qoute_stuck_side_i_b_2 = "";


        private string m_orderKey_i_s = "";
        private string m_orderKey_i_s_old = "";
        private string m_childorderKey_i_s_1 = "";
        private string m_childorderKey_i_s_2 = "";
        private string m_hedgeorderKey_i_s_1 = "";
        private string m_hedgeorderKey_i_s_2 = "";
        decimal qoute_stuck_price_i_s_1 = 0;
        decimal qoute_stuck_price_i_s_2 = 0;
        string qoute_stuck_side_i_s_1 = "";
        string qoute_stuck_side_i_s_2 = ""; 
        
        
        private string m_orderKey_ii_b = "";
        private string m_orderKey_ii_b_old = "";
        private string m_childorderKey_ii_b_1 = "";
        private string m_childorderKey_ii_b_2 = "";
        private string m_hedgeorderKey_ii_b_1 = "";
        private string m_hedgeorderKey_ii_b_2 = "";
        decimal qoute_stuck_price_ii_b_1 = 0;
        decimal qoute_stuck_price_ii_b_2 = 0;
        string qoute_stuck_side_ii_b_1 = "";
        string qoute_stuck_side_ii_b_2 = "";


        private string m_orderKey_ii_s = "";
        private string m_orderKey_ii_s_old = "";
        private string m_childorderKey_ii_s_1 = "";
        private string m_childorderKey_ii_s_2 = "";
        private string m_hedgeorderKey_ii_s_1 = "";
        private string m_hedgeorderKey_ii_s_2 = "";
        decimal qoute_stuck_price_ii_s_1 = 0;
        decimal qoute_stuck_price_ii_s_2 = 0;
        string qoute_stuck_side_ii_s_1 = "";
        string qoute_stuck_side_ii_s_2 = "";

        private string m_orderKey_iii_b = "";
        private string m_orderKey_iii_b_old = "";
        private string m_childorderKey_iii_b_1 = "";
        private string m_childorderKey_iii_b_2 = "";
        private string m_hedgeorderKey_iii_b_1 = "";
        private string m_hedgeorderKey_iii_b_2 = "";
        decimal qoute_stuck_price_iii_b_1 = 0;
        decimal qoute_stuck_price_iii_b_2 = 0;
        string qoute_stuck_side_iii_b_1 = "";
        string qoute_stuck_side_iii_b_2 = "";


        private string m_orderKey_iii_s = "";
        private string m_orderKey_iii_s_old = "";
        private string m_childorderKey_iii_s_1 = "";
        private string m_childorderKey_iii_s_2 = "";
        private string m_hedgeorderKey_iii_s_1 = "";
        private string m_hedgeorderKey_iii_s_2 = "";
        decimal qoute_stuck_price_iii_s_1 = 0;
        decimal qoute_stuck_price_iii_s_2 = 0;
        string qoute_stuck_side_iii_s_1 = "";
        string qoute_stuck_side_iii_s_2 = "";

        private string m_orderKey_iv_b = "";
        private string m_orderKey_iv_b_old = "";
        private string m_childorderKey_iv_b_1 = "";
        private string m_childorderKey_iv_b_2 = "";
        private string m_hedgeorderKey_iv_b_1 = "";
        private string m_hedgeorderKey_iv_b_2 = "";
        decimal qoute_stuck_price_iv_b_1 = 0;
        decimal qoute_stuck_price_iv_b_2 = 0;
        string qoute_stuck_side_iv_b_1 = "";
        string qoute_stuck_side_iv_b_2 = "";


        private string m_orderKey_iv_s = "";
        private string m_orderKey_iv_s_old = "";
        private string m_childorderKey_iv_s_1 = "";
        private string m_childorderKey_iv_s_2 = "";
        private string m_hedgeorderKey_iv_s_1 = "";
        private string m_hedgeorderKey_iv_s_2 = "";
        decimal qoute_stuck_price_iv_s_1 = 0;
        decimal qoute_stuck_price_iv_s_2 = 0;
        string qoute_stuck_side_iv_s_1 = "";
        string qoute_stuck_side_iv_s_2 = "";


        private string m_orderKey_v_b = "";
        private string m_orderKey_v_b_old = "";
        private string m_childorderKey_v_b_1 = "";
        private string m_childorderKey_v_b_2 = "";
        private string m_hedgeorderKey_v_b_1 = "";
        private string m_hedgeorderKey_v_b_2 = "";
        decimal qoute_stuck_price_v_b_1 = 0;
        decimal qoute_stuck_price_v_b_2 = 0;
        string qoute_stuck_side_v_b_1 = "";
        string qoute_stuck_side_v_b_2 = "";


        private string m_orderKey_v_s = "";
        private string m_orderKey_v_s_old = "";
        private string m_childorderKey_v_s_1 = "";
        private string m_childorderKey_v_s_2 = "";
        private string m_hedgeorderKey_v_s_1 = "";
        private string m_hedgeorderKey_v_s_2 = "";
        decimal qoute_stuck_price_v_s_1 = 0;
        decimal qoute_stuck_price_v_s_2 = 0;
        string qoute_stuck_side_v_s_1 = "";
        string qoute_stuck_side_v_s_2 = "";

        private string m_orderKey_vi_b = "";
        private string m_orderKey_vi_b_old = "";
        private string m_childorderKey_vi_b_1 = "";
        private string m_childorderKey_vi_b_2 = "";
        private string m_hedgeorderKey_vi_b_1 = "";
        private string m_hedgeorderKey_vi_b_2 = "";
        decimal qoute_stuck_price_vi_b_1 = 0;
        decimal qoute_stuck_price_vi_b_2 = 0;
        string qoute_stuck_side_vi_b_1 = "";
        string qoute_stuck_side_vi_b_2 = "";


        private string m_orderKey_vi_s = "";
        private string m_orderKey_vi_s_old = "";
        private string m_childorderKey_vi_s_1 = "";
        private string m_childorderKey_vi_s_2 = "";
        private string m_hedgeorderKey_vi_s_1 = "";
        private string m_hedgeorderKey_vi_s_2 = "";
        decimal qoute_stuck_price_vi_s_1 = 0;
        decimal qoute_stuck_price_vi_s_2 = 0;
        string qoute_stuck_side_vi_s_1 = "";
        string qoute_stuck_side_vi_s_2 = "";


        decimal fill_i_b = 0;
        decimal fill_ii_b = 0;
        decimal fill_iii_b = 0;
        decimal fill_iv_b = 0;
        decimal fill_v_b = 0;
        decimal fill_vi_b = 0;
        decimal fill_i_s = 0;
        decimal fill_ii_s = 0;
        decimal fill_iii_s = 0;
        decimal fill_iv_s = 0;
        decimal fill_v_s = 0;
        decimal fill_vi_s = 0;


        decimal partial_fill_i_b_1 = 0;
        decimal partial_fill_i_b_2 = 0;
        decimal partial_fill_i_s_1 = 0;
        decimal partial_fill_i_s_2 = 0;
        
        decimal partial_fill_ii_b_1 = 0;
        decimal partial_fill_ii_b_2 = 0;
        decimal partial_fill_ii_s_1 = 0;
        decimal partial_fill_ii_s_2 = 0;
        
        decimal partial_fill_iii_b_1 = 0;
        decimal partial_fill_iii_b_2 = 0;
        decimal partial_fill_iii_s_1 = 0;
        decimal partial_fill_iii_s_2 = 0;

        decimal partial_fill_iv_b_1 = 0;
        decimal partial_fill_iv_b_2 = 0;
        decimal partial_fill_iv_s_1 = 0;
        decimal partial_fill_iv_s_2 = 0;
        decimal partial_fill_v_b_1 = 0;
        decimal partial_fill_v_b_2 = 0;
        decimal partial_fill_v_s_1 = 0;
        decimal partial_fill_v_s_2 = 0;

        decimal partial_fill_vi_b_1 = 0;
        decimal partial_fill_vi_b_2 = 0;
        decimal partial_fill_vi_s_1 = 0;
        decimal partial_fill_vi_s_2 = 0;

        private bool qouted_price_received_i_b = false;
        private bool qouted_price_received_ii_b = false;
        private bool qouted_price_received_iii_b = false;
        private bool qouted_price_received_iv_b = false;
        private bool qouted_price_received_v_b = false;
        private bool qouted_price_received_vi_b = false;
        private bool qouted_price_received_i_s = false;
        private bool qouted_price_received_ii_s = false;
        private bool qouted_price_received_iii_s = false;
        private bool qouted_price_received_iv_s = false;
        private bool qouted_price_received_v_s = false;
        private bool qouted_price_received_vi_s = false;

        private TradeSubscription m_instrumentTradeSubscription_i = null;
        private TradeSubscription m_instrumentTradeSubscription_i_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_i_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_ii = null;
        private TradeSubscription m_instrumentTradeSubscription_ii_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_ii_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_iii = null;
        private TradeSubscription m_instrumentTradeSubscription_iii_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_iii_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_iv = null;
        private TradeSubscription m_instrumentTradeSubscription_iv_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_iv_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_v = null;
        private TradeSubscription m_instrumentTradeSubscription_v_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_v_a2 = null;
        private TradeSubscription m_instrumentTradeSubscription_vi = null;
        private TradeSubscription m_instrumentTradeSubscription_vi_a1 = null;
        private TradeSubscription m_instrumentTradeSubscription_vi_a2 = null;

        private readonly string m_alias_i = "SR3 Jun24/ZQ Jul24 .net";
        private readonly string m_alias_i_a1 = "SR3 Jun24/ZQ Jul24 .net - i";
        private readonly string m_alias_i_a2 = "SR3 Jun24/ZQ Jul24 .net - ii";

        private readonly string m_alias_ii = "SR3 Jun24/ZQ Aug24 .net";
        private readonly string m_alias_ii_a1 = "SR3 Jun24/ZQ Aug24 .net - i";
        private readonly string m_alias_ii_a2 = "SR3 Jun24/ZQ Aug24 .net - ii";

        private readonly string m_alias_ase_i = "SR3 Jun24/ZQ Jul24/ZQ Aug24 .net";

        private readonly string m_alias_iii = "SR3 Dec23/ZQ Jan24 .net";
        private readonly string m_alias_iii_a1 = "SR3 Dec23/ZQ Jan24 .net - i";
        private readonly string m_alias_iii_a2 = "SR3 Dec23/ZQ Jan24 .net - ii";

        private readonly string m_alias_iv = "SR3 Dec23/ZQ Feb24 .net";
        private readonly string m_alias_iv_a1 = "SR3 Dec23/ZQ Feb24 .net - i";
        private readonly string m_alias_iv_a2 = "SR3 Dec23/ZQ Feb24 .net - ii";

        private readonly string m_alias_ase_ii = "SR3 Dec23/ZQ Jan24/ZQ Feb24 .net";

        private readonly string m_alias_v = "SR3 Mar24/ZQ Apr24 .net";
        private readonly string m_alias_v_a1 = "SR3 Mar24/ZQ Apr24 .net - i";
        private readonly string m_alias_v_a2 = "SR3 Mar24/ZQ Apr24 .net - ii";

        private readonly string m_alias_vi = "SR3 Mar24/ZQ May24 .net";
        private readonly string m_alias_vi_a1 = "SR3 Mar24/ZQ May24 .net - i";
        private readonly string m_alias_vi_a2 = "SR3 Mar24/ZQ May24 .net - ii";

        private readonly string m_alias_ase_iii = "SR3 Mar24/ZQ Apr24/ZQ May24 .net";

        tt_net_sdk.Instrument instrument_i;
        tt_net_sdk.Instrument instrument_i_a1;
        tt_net_sdk.Instrument instrument_i_a2;
        tt_net_sdk.Instrument instrument_ii;
        tt_net_sdk.Instrument instrument_ii_a1;
        tt_net_sdk.Instrument instrument_ii_a2;
        tt_net_sdk.Instrument instrument_iii;
        tt_net_sdk.Instrument instrument_iii_a1;
        tt_net_sdk.Instrument instrument_iii_a2;
        tt_net_sdk.Instrument instrument_iv;
        tt_net_sdk.Instrument instrument_iv_a1;
        tt_net_sdk.Instrument instrument_iv_a2;
        tt_net_sdk.Instrument instrument_v;
        tt_net_sdk.Instrument instrument_v_a1;
        tt_net_sdk.Instrument instrument_v_a2;
        tt_net_sdk.Instrument instrument_vi;
        tt_net_sdk.Instrument instrument_vi_a1;
        tt_net_sdk.Instrument instrument_vi_a2;
        Price best_bid_i, best_ask_i;
        bool best_bid_i_received = false, best_ask_i_received = false;

        Price best_bid_ii, best_ask_ii;
        bool best_bid_ii_received = false, best_ask_ii_received = false;  
        Price best_bid_iii, best_ask_iii;
        bool best_bid_iii_received = false, best_ask_iii_received = false;

        private object OriginalBuyLock_i = new object();
        private object OriginalsellLock_i = new object();
        private object OriginalBuyLock_ii = new object();
        private object OriginalsellLock_ii = new object();
        private object OriginalBuyLock_iii = new object();
        private object OriginalsellLock_iii = new object();
        private object OriginalBuyLock_iv = new object();
        private object OriginalsellLock_iv = new object();
        private object OriginalBuyLock_v = new object();
        private object OriginalsellLock_v = new object();
        private object OriginalBuyLock_vi = new object();
        private object OriginalsellLock_vi = new object();

        private object ChangeBuyLock_i = new object();
        private object ChangesellLock_i = new object();
        private object ChangeBuyLock_ii = new object();
        private object ChangesellLock_ii = new object();
        private object ChangeBuyLock_iii = new object();
        private object ChangesellLock_iii = new object();
        private object ChangeBuyLock_iv = new object();
        private object ChangesellLock_iv = new object();
        private object ChangeBuyLock_v = new object();
        private object ChangesellLock_v = new object();
        private object ChangeBuyLock_vi = new object();
        private object ChangesellLock_vi = new object();

        bool change_i_b = false;
        bool change_i_s = false;
        bool change_ii_b = false;
        bool change_ii_s = false;
        bool change_iii_b = false;
        bool change_iii_s = false;
        bool change_iv_b = false;
        bool change_iv_s = false; 
        bool change_v_b = false;
        bool change_v_s = false;
        bool change_vi_b = false;
        bool change_vi_s = false;

        bool order_i_b_a1 = false;
        bool order_i_b_a1n = false;
        bool order_i_b_a2 = false;
        bool order_i_b_a2n = false;

        bool order_i_s_a1 = false;
        bool order_i_s_a1n = false;
        bool order_i_s_a2 = false;
        bool order_i_s_a2n = false;
        bool order_ii_b_a1 = false;
        bool order_ii_b_a1n = false;
        bool order_ii_b_a2 = false;
        bool order_ii_b_a2n = false;

        bool order_ii_s_a1 = false;
        bool order_ii_s_a1n = false;
        bool order_ii_s_a2 = false;
        bool order_ii_s_a2n = false;
        bool order_iii_b_a1 = false;
        bool order_iii_b_a1n = false;
        bool order_iii_b_a2 = false;
        bool order_iii_b_a2n = false;

        bool order_iii_s_a1 = false;
        bool order_iii_s_a1n = false;
        bool order_iii_s_a2 = false;
        bool order_iii_s_a2n = false;
        bool order_iv_b_a1 = false;
        bool order_iv_b_a1n = false;
        bool order_iv_b_a2 = false;
        bool order_iv_b_a2n = false;

        bool order_iv_s_a1 = false;
        bool order_iv_s_a1n = false;
        bool order_iv_s_a2 = false;
        bool order_iv_s_a2n = false;
        
        bool order_v_b_a1 = false;
        bool order_v_b_a1n = false;
        bool order_v_b_a2 = false;
        bool order_v_b_a2n = false;

        bool order_v_s_a1 = false;
        bool order_v_s_a1n = false;
        bool order_v_s_a2 = false;
        bool order_v_s_a2n = false;
        bool order_vi_b_a1 = false;
        bool order_vi_b_a1n = false;
        bool order_vi_b_a2 = false;
        bool order_vi_b_a2n = false;

        bool order_vi_s_a1 = false;
        bool order_vi_s_a1n = false;
        bool order_vi_s_a2 = false;
        bool order_vi_s_a2n = false;

        bool wait_i_b = false, wait_ii_b = false;
        bool wait_i_s = false, wait_ii_s = false;
        bool wait_iii_b = false, wait_iv_b = false;
        bool wait_iii_s = false, wait_iv_s = false; 
        bool wait_v_b = false, wait_vi_b = false;
        bool wait_v_s = false, wait_vi_s = false;
        DateTime wrong_price_time_i_b = DateTime.Now;
        DateTime wrong_price_time_i_s = DateTime.Now;
        DateTime wrong_price_time_ii_b = DateTime.Now;
        DateTime wrong_price_time_ii_s = DateTime.Now;
        DateTime wrong_price_time_iii_b = DateTime.Now;
        DateTime wrong_price_time_iii_s = DateTime.Now;
        DateTime wrong_price_time_iv_b = DateTime.Now;
        DateTime wrong_price_time_iv_s = DateTime.Now; 
        DateTime wrong_price_time_v_b = DateTime.Now;
        DateTime wrong_price_time_v_s = DateTime.Now;
        DateTime wrong_price_time_vi_b = DateTime.Now;
        DateTime wrong_price_time_vi_s = DateTime.Now;

        bool wrong_price_i_b = false;
        bool wrong_price_i_s = false;
        bool wrong_price_ii_b = false;
        bool wrong_price_ii_s = false;
        bool wrong_price_iii_b = false;
        bool wrong_price_iii_s = false;
        bool wrong_price_iv_b = false;
        bool wrong_price_iv_s = false; 
        bool wrong_price_v_b = false;
        bool wrong_price_v_s = false;
        bool wrong_price_vi_b = false;
        bool wrong_price_vi_s = false;
        decimal vwap_jun_jul = 0;
        decimal vwap_jun_jul_i = 0;
        decimal vwap_jun_aug = 0;
        decimal vwap_jun_aug_i = 0;
        decimal vwap_dec_jan = 0;
        decimal vwap_dec_jan_i = 0;
        decimal vwap_dec_feb = 0;
        decimal vwap_dec_feb_i = 0; 
        decimal vwap_mar_apr = 0;
        decimal vwap_mar_apr_i = 0;
        decimal vwap_mar_may = 0;
        decimal vwap_mar_may_i = 0;
        decimal ratio_i;
        decimal ratio_ii;
        decimal ratio_iii;
        decimal ratio_iv;
        decimal ratio_v;
        decimal ratio_vi;
        
        public Form1()
        {
            InitializeComponent();
        }
        public Form1(tt_net_sdk.ServiceEnvironment environment)
        {
            InitializeComponent();
            this.environment=environment;
        }
        public void ttNetApiInitHandler(TTAPI api, ApiCreationException ex)
        {
            Log.Logger = new LoggerConfiguration().WriteTo.File(@"LogFile.log").CreateLogger();
            if (ex == null)
            {
                richTextBox1.AppendText(String.Format("API Initialization Successful.{0}\n",environment));
                if (environment.ToString().Contains("Sim"))
                {
                    button20.Text = "SIM";
                    button20.BackColor = Color.Green;
                }else if (environment.ToString().Contains("Live"))
                {
                    button20.Text = "LIVE";
                    button20.BackColor = Color.Red;
                }
                else
                {
                    button20.Text = "UNKNOWN";
                    button20.BackColor = Color.DarkGray;
                }
                m_api = api;
                m_api.TTAPIStatusUpdate += new EventHandler<TTAPIStatusUpdateEventArgs>(m_api_TTAPIStatusUpdate);
                m_api.Start();
            }
            else if (ex.IsRecoverable)
            {
                richTextBox1.AppendText("API Initialization Failed. Retry in progress.\n");
            }
            else
            {
                richTextBox1.AppendText("API Initialization Failed: " + ex.Message + "\n");
            }
        }

        private void m_api_TTAPIStatusUpdate(object sender, TTAPIStatusUpdateEventArgs e)
        {
            if (e.IsReady)
            {
                richTextBox1.AppendText("TT API Connected Successfully\n");

                m_accounts = m_api.Accounts;
                for (int i = 0; i < m_accounts.Count; i++)
                {
                    Log.Information("{0}", m_accounts.ElementAt(i));
                }
                myDictionary.Add("jun_bid", final_price);
                myDictionary.Add("jun_ask", final_price);
                myDictionary_1.Add("jun_bidqty", askQty);
                myDictionary_1.Add("jun_askqty", bidQty);
                myDictionary.Add("jul_bid", final_price);
                myDictionary.Add("jul_ask", final_price);
                myDictionary_1.Add("jul_bidqty", bidQty);
                myDictionary_1.Add("jul_askqty", askQty);
                myDictionary.Add("aug_bid", final_price);
                myDictionary.Add("aug_ask", final_price);
                myDictionary_1.Add("aug_bidqty", bidQty);
                myDictionary_1.Add("aug_askqty", askQty);
                myDictionary.Add("dec_bid", final_price);
                myDictionary.Add("dec_ask", final_price);
                myDictionary_1.Add("dec_bidqty", bidQty);
                myDictionary_1.Add("dec_askqty", askQty);
                myDictionary.Add("feb_bid", final_price);
                myDictionary.Add("feb_ask", final_price);
                myDictionary_1.Add("feb_bidqty", bidQty);
                myDictionary_1.Add("feb_askqty", askQty);
                myDictionary.Add("mar_bid", final_price);
                myDictionary.Add("mar_ask", final_price);
                myDictionary_1.Add("mar_bidqty", bidQty);
                myDictionary_1.Add("mar_askqty", askQty);
                myDictionary.Add("apr_bid", final_price);
                myDictionary.Add("apr_ask", final_price);
                myDictionary_1.Add("apr_bidqty", bidQty);
                myDictionary_1.Add("apr_askqty", askQty);
                myDictionary.Add("may_bid", final_price);
                myDictionary.Add("may_ask", final_price);
                myDictionary_1.Add("may_bidqty", bidQty);
                myDictionary_1.Add("may_askqty", askQty);
                myDictionary.Add("jul_bid_i", final_price);
                myDictionary.Add("jul_ask_i", final_price);
                myDictionary_1.Add("jul_bidqty_i", bidQty);
                myDictionary_1.Add("jul_askqty_i", askQty);
                myDictionary.Add("aug_bid_i", final_price);
                myDictionary.Add("aug_ask_i", final_price);
                myDictionary_1.Add("aug_bidqty_i", bidQty);
                myDictionary_1.Add("aug_askqty_i", askQty);
                myDictionary.Add("jan_bid_i", final_price);
                myDictionary.Add("jan_ask_i", final_price);
                myDictionary_1.Add("jan_bidqty_i", bidQty);
                myDictionary_1.Add("jan_askqty_i", askQty);
                myDictionary.Add("jan_bid", final_price);
                myDictionary.Add("jan_ask", final_price);
                myDictionary_1.Add("jan_bidqty", bidQty);
                myDictionary_1.Add("jan_askqty", askQty);
                myDictionary.Add("feb_bid_i", final_price);
                myDictionary.Add("feb_ask_i", final_price);
                myDictionary_1.Add("feb_bidqty_i", bidQty);
                myDictionary_1.Add("feb_askqty_i", askQty);
                myDictionary.Add("apr_bid_i", final_price);
                myDictionary.Add("apr_ask_i", final_price);
                myDictionary_1.Add("apr_bidqty_i", bidQty);
                myDictionary_1.Add("apr_askqty_i", askQty);
                myDictionary.Add("may_bid_i", final_price);
                myDictionary.Add("may_ask_i", final_price);
                myDictionary_1.Add("may_bidqty_i", bidQty);
                myDictionary_1.Add("may_askqty_i", askQty);
                dataGridView2.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.DisplayedCells;
                dataGridView2.Rows.Add("SR3 Jun24/Sr1 Jul24/Sr1 Aug24 .net");
                dataGridView2.Rows.Add("SR3 Jun24/Sr1 Jul24/Sr1 Aug24 .net");
                dataGridView2.Rows.Add("SR3 Jun24/ZQ Jul24/ZQ Aug24 .net");
                dataGridView2.Rows.Add("SR3 Jun24/ZQ Jul24/ZQ Aug24 .net");
                
                dataGridView2.Rows.Add("SR3 Dec23/Sr1 Jan24/Sr1 Feb24 .net");
                dataGridView2.Rows.Add("SR3 Dec23/Sr1 Jan24/Sr1 Feb24 .net");
                dataGridView2.Rows.Add("SR3 Dec23/ZQ Jan24/ZQ Feb24 .net");
                dataGridView2.Rows.Add("SR3 Dec23/ZQ Jan24/ZQ Feb24 .net");
                dataGridView2.Rows.Add("SR3 Mar24/Sr1 Apr24/Sr1 May24 .net");
                dataGridView2.Rows.Add("SR3 Mar24/Sr1 Apr24/Sr1 May24 .net");
                dataGridView2.Rows.Add("SR3 Mar24/ZQ Apr24/ZQ May24 .net");
                dataGridView2.Rows.Add("SR3 Mar24/ZQ Apr24/ZQ May24 .net");

                dataGridView2.Rows.Add("SR3 Jun24/Sr1 Jul24 .net ");
                dataGridView2.Rows.Add("SR3 Jun24/Sr1 Jul24 .net ");
              
                dataGridView2.Rows.Add("SR3 Jun24/ZQ Jul24 .net ");
                dataGridView2.Rows.Add("SR3 Jun24/ZQ Jul24 .net ");
               

                dataGridView2.Rows.Add("SR3 Jun24/Sr1 Aug24 .net ");
                dataGridView2.Rows.Add("SR3 Jun24/Sr1 Aug24 .net ");
               
                dataGridView2.Rows.Add("SR3 Jun24/ZQ Aug24 .net ");
                dataGridView2.Rows.Add("SR3 Jun24/ZQ Aug24 .net ");

                dataGridView2.Rows.Add("SR3 Dec23/Sr1 Jan24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/Sr1 Jan24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/ZQ Jan24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/ZQ Jan24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/Sr1 Feb24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/Sr1 Feb24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/ZQ Feb24 .net ");
                dataGridView2.Rows.Add("SR3 Dec23/ZQ Feb24 .net ");

                dataGridView2.Rows.Add("SR3 Mar24/Sr1 Apr24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/Sr1 Apr24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/ZQ Apr24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/ZQ Apr24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/Sr1 May24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/Sr1 May24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/ZQ May24 .net ");
                dataGridView2.Rows.Add("SR3 Mar24/ZQ May24 .net ");


                MarketId marketKey = Market.GetMarketIdFromName(m_market);
                ProductType productType = tt_net_sdk.Product.GetProductTypeFromName(m_prodType);

                // lookup an instrument
                //lookup jun-aug
                m_instrLookupRequest_2 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey, productType, m_product, m_alias_ase_1);
                m_instrLookupRequest_2.OnData += m_instrLookupRequest_OnData_2;
                m_instrLookupRequest_2.GetAsync();

                m_instrLookupRequest_7 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_1_a1);
                m_instrLookupRequest_7.OnData += m_instrLookupRequest_OnData_7;
                m_instrLookupRequest_7.GetAsync();


                m_instrLookupRequest_8 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_ase_1_a2);
                m_instrLookupRequest_8.OnData += m_instrLookupRequest_OnData_8;
                m_instrLookupRequest_8.GetAsync();


                m_instrLookupRequest_23= new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ii);
                m_instrLookupRequest_23.OnData += m_instrLookupRequest_OnData_23;
                m_instrLookupRequest_23.GetAsync();

                m_instrLookupRequest_24 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ii_a1);
                m_instrLookupRequest_24.OnData += m_instrLookupRequest_OnData_24;
                m_instrLookupRequest_24.GetAsync();


                m_instrLookupRequest_25 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_ii_a2);
                m_instrLookupRequest_25.OnData += m_instrLookupRequest_OnData_25;
                m_instrLookupRequest_25.GetAsync();



                m_instrLookupRequest_13 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey, productType, m_product, m_alias_ase_4);
                m_instrLookupRequest_13.OnData += m_instrLookupRequest_OnData_13;
                m_instrLookupRequest_13.GetAsync();

                m_instrLookupRequest_14 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_4_a1);
                m_instrLookupRequest_14.OnData += m_instrLookupRequest_OnData_14;
                m_instrLookupRequest_14.GetAsync();


                m_instrLookupRequest_15 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_ase_4_a2);

                m_instrLookupRequest_15.OnData += m_instrLookupRequest_OnData_15;
                m_instrLookupRequest_15.GetAsync();
                m_instrLookupRequest_35 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_6);
                m_instrLookupRequest_35.OnData += m_instrLookupRequest_OnData_35;
                m_instrLookupRequest_35.GetAsync();

                m_instrLookupRequest_36 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_6_a1);
                m_instrLookupRequest_36.OnData += m_instrLookupRequest_OnData_36;
                m_instrLookupRequest_36.GetAsync();


                m_instrLookupRequest_37 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_ase_6_a2);

                m_instrLookupRequest_37.OnData += m_instrLookupRequest_OnData_37;
                m_instrLookupRequest_37.GetAsync();

                m_instrLookupRequest_29 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey, productType, m_product, m_alias_iv);
                m_instrLookupRequest_29.OnData += m_instrLookupRequest_OnData_29;
                m_instrLookupRequest_29.GetAsync();

                m_instrLookupRequest_30 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_iv_a1);
                m_instrLookupRequest_30.OnData += m_instrLookupRequest_OnData_30;
                m_instrLookupRequest_30.GetAsync();


                m_instrLookupRequest_31 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_iv_a2);

                m_instrLookupRequest_31.OnData += m_instrLookupRequest_OnData_31;
                m_instrLookupRequest_31.GetAsync();

                m_instrLookupRequest_44 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                        marketKey, productType, m_product, m_alias_vi);
                m_instrLookupRequest_44.OnData += m_instrLookupRequest_OnData_44;
                m_instrLookupRequest_44.GetAsync();

                m_instrLookupRequest_45 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_vi_a1);
                m_instrLookupRequest_45.OnData += m_instrLookupRequest_OnData_45;
                m_instrLookupRequest_45.GetAsync();


                m_instrLookupRequest_46 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_vi_a2);

                m_instrLookupRequest_46.OnData += m_instrLookupRequest_OnData_46;
                m_instrLookupRequest_46.GetAsync();
                //lookup jun-jul

                m_instrLookupRequest_1 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias);
                m_instrLookupRequest_1.OnData += m_instrLookupRequest_OnData_1;
                m_instrLookupRequest_1.GetAsync();

                //jun-jul with active qouting of on either sides
                m_instrLookupRequest_5 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_a1);
                m_instrLookupRequest_5.OnData += m_instrLookupRequest_OnData_5;
                m_instrLookupRequest_5.GetAsync();


                m_instrLookupRequest_6 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_a2);
                m_instrLookupRequest_6.OnData += m_instrLookupRequest_OnData_6;
                m_instrLookupRequest_6.GetAsync();

                m_instrLookupRequest_20 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_i);
                m_instrLookupRequest_20.OnData += m_instrLookupRequest_OnData_20;
                m_instrLookupRequest_20.GetAsync();

                //jun-jul with active qouting of on either sides
                m_instrLookupRequest_21 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_i_a1);
                m_instrLookupRequest_21.OnData += m_instrLookupRequest_OnData_21;
                m_instrLookupRequest_21.GetAsync();


                m_instrLookupRequest_22 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_i_a2);
                m_instrLookupRequest_22.OnData += m_instrLookupRequest_OnData_22;
                m_instrLookupRequest_22.GetAsync();
                m_instrLookupRequest_10 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey, productType, m_product, m_alias_ase_3);

                m_instrLookupRequest_10.OnData += m_instrLookupRequest_OnData_10;
                m_instrLookupRequest_10.GetAsync();
                //jun-jul with active qouting of on either sides
                m_instrLookupRequest_11 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_3_a1);

                m_instrLookupRequest_11.OnData += m_instrLookupRequest_OnData_11;
                m_instrLookupRequest_11.GetAsync();


                m_instrLookupRequest_12 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_3_a2);

                m_instrLookupRequest_12.OnData += m_instrLookupRequest_OnData_12;
                m_instrLookupRequest_12.GetAsync();

                m_instrLookupRequest_32 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey, productType, m_product, m_alias_ase_5);

                m_instrLookupRequest_32.OnData += m_instrLookupRequest_OnData_32;
                m_instrLookupRequest_32.GetAsync();
                //jun-jul with active qouting of on either sides
                m_instrLookupRequest_33 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_5_a1);

                m_instrLookupRequest_33.OnData += m_instrLookupRequest_OnData_33;
                m_instrLookupRequest_33.GetAsync();


                m_instrLookupRequest_34 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_5_a2);

                m_instrLookupRequest_34.OnData += m_instrLookupRequest_OnData_34;
                m_instrLookupRequest_34.GetAsync();

                m_instrLookupRequest_26 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey, productType, m_product, m_alias_iii);

                m_instrLookupRequest_26.OnData += m_instrLookupRequest_OnData_26;
                m_instrLookupRequest_26.GetAsync();
                //jun-jul with active qouting of on either sides
                m_instrLookupRequest_27 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_iii_a1);

                m_instrLookupRequest_27.OnData += m_instrLookupRequest_OnData_27;
                m_instrLookupRequest_27.GetAsync();


                m_instrLookupRequest_28 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_iii_a2);

                m_instrLookupRequest_28.OnData += m_instrLookupRequest_OnData_28;
                m_instrLookupRequest_28.GetAsync();

                m_instrLookupRequest_41 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                         marketKey, productType, m_product, m_alias_v);

                m_instrLookupRequest_41.OnData += m_instrLookupRequest_OnData_41;
                m_instrLookupRequest_41.GetAsync();
                //jun-jul with active qouting of on either sides
                m_instrLookupRequest_42 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_v_a1);

                m_instrLookupRequest_42.OnData += m_instrLookupRequest_OnData_42;
                m_instrLookupRequest_42.GetAsync();


                m_instrLookupRequest_43 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_v_a2);

                m_instrLookupRequest_43.OnData += m_instrLookupRequest_OnData_43;
                m_instrLookupRequest_43.GetAsync();


                //lookup jun-jul-aug

                m_instrLookupRequest_3 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_2);

                m_instrLookupRequest_3.OnData += m_instrLookupRequest_OnData_3;
                m_instrLookupRequest_3.GetAsync();

                m_instrLookupRequest_3 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_3_main);

                m_instrLookupRequest_3.OnData += m_instrLookupRequest_OnData_3;
                m_instrLookupRequest_3.GetAsync(); 
                m_instrLookupRequest_3 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey, productType, m_product, m_alias_ase_4_main);

                m_instrLookupRequest_3.OnData += m_instrLookupRequest_OnData_3;
                m_instrLookupRequest_3.GetAsync();

                //lookup qouted jul-aug
                MarketId marketKey_1 = Market.GetMarketIdFromName(m_market_1);
                ProductType productType_1 = tt_net_sdk.Product.GetProductTypeFromName(m_prodType_1);

                // lookup an instrument
                m_instrLookupRequest = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey_1, productType_1, m_product_1, m_alias_1);

                m_instrLookupRequest.OnData += m_instrLookupRequest_OnData;
                m_instrLookupRequest.GetAsync();

                m_instrLookupRequest_9 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_1, m_alias_2);

                m_instrLookupRequest_9.OnData += m_instrLookupRequest_OnData_9;
                m_instrLookupRequest_9.GetAsync();
                m_instrLookupRequest_38 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_1, m_alias_3);

                m_instrLookupRequest_38.OnData += m_instrLookupRequest_OnData_38;
                m_instrLookupRequest_38.GetAsync();

                m_instrLookupRequest_16 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_4, m_alias_1_sr1_zq);

                m_instrLookupRequest_16.OnData += m_instrLookupRequest_OnData_16;
                m_instrLookupRequest_16.GetAsync();

                m_instrLookupRequest_17 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_4, m_alias_2_sr1_zq);

                m_instrLookupRequest_17.OnData += m_instrLookupRequest_OnData_17;
                m_instrLookupRequest_17.GetAsync();

                m_instrLookupRequest_18 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_4, m_alias_3_sr1_zq);

                m_instrLookupRequest_18.OnData += m_instrLookupRequest_OnData_18;
                m_instrLookupRequest_18.GetAsync();

                m_instrLookupRequest_19 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_4, m_alias_4_sr1_zq);

                m_instrLookupRequest_19.OnData += m_instrLookupRequest_OnData_19;
                m_instrLookupRequest_19.GetAsync();

                m_instrLookupRequest_39= new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_4, m_alias_5_sr1_zq);

                m_instrLookupRequest_39.OnData += m_instrLookupRequest_OnData_39;
                m_instrLookupRequest_39.GetAsync();

                m_instrLookupRequest_40 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_1, productType_1, m_product_4, m_alias_6_sr1_zq);

                m_instrLookupRequest_40.OnData += m_instrLookupRequest_OnData_40;
                m_instrLookupRequest_40.GetAsync();


                //lookup outrights
                MarketId marketKey_2 = Market.GetMarketIdFromName(m_market_2);
                ProductType productType_2 = tt_net_sdk.Product.GetProductTypeFromName(m_prodType_2);
              
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey_2, productType_2, m_product_3, m_alias_outright_1);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync(); 
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey_2, productType_2, m_product_2, m_alias_outright_2);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey_2, productType_2, m_product_2, m_alias_outright_3);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                            marketKey_2, productType_2, m_product_2, m_alias_outright_4);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey_2, productType_2, m_product_2, m_alias_outright_5);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                           marketKey_2, productType_2, m_product_2, m_alias_outright_6);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                        marketKey_2, productType_2, m_product_2, m_alias_outright_7);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                        marketKey_2, productType_2, m_product_2, m_alias_outright_8);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                        marketKey_2, productType_2, m_product_2, m_alias_outright_9);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();

                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_2, productType_2, m_product_2, m_alias_outright_i);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_2, productType_2, m_product_2, m_alias_outright_ii);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_2, productType_2, m_product_2, m_alias_outright_iii);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_2, productType_2, m_product_2, m_alias_outright_iv);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_2, productType_2, m_product_2, m_alias_outright_v);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();
                m_instrLookupRequest_4 = new InstrumentLookup(tt_net_sdk.Dispatcher.Current,
                          marketKey_2, productType_2, m_product_2, m_alias_outright_vi);

                m_instrLookupRequest_4.OnData += m_instrLookupRequest_OnData_4;
                m_instrLookupRequest_4.GetAsync();


            }
            else if (e.IsDown)
            {
                richTextBox1.AppendText("Connection is down. TT .NET SDK is trying to reconnect.\n");
            }
            else
            {
                richTextBox1.AppendText(String.Format("M_TTAPI_TTAPIStatusUpdate: {0}\n", e));
            }
        }
        void m_instrLookupRequest_OnData(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument = e.InstrumentLookup.Instrument;
                final_price_1_b = Price.FromDecimal( instrument, Int32.MinValue);
                final_price_1_s = Price.FromDecimal( instrument, Int32.MaxValue);
                final_price_2_b = Price.FromDecimal( instrument, Int32.MinValue);
                final_price_2_s = Price.FromDecimal( instrument, Int32.MaxValue);
                
                Log.Information("Found: {0}", instrument);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_jul24_aug24 = new PriceSubscription(instrument, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_jul24_aug24.FieldsUpdated += m_priceSubscription_FieldsUpdated_jul24_aug24;
                m_priceSubsciption_jul24_aug24.Start();
                m_instrumentTradeSubscription = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument);

                m_instrumentTradeSubscription.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);
                m_instrumentTradeSubscription.OrderBookDownload += new EventHandler<OrderBookDownloadEventArgs>(m_instrumentTradeSubscription_OrderBookDownload);
                m_instrumentTradeSubscription.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_1(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_1);
                richTextBox1.AppendText(String.Format("Found ji: {0}\n", instrument_1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_1);

                m_instrumentTradeSubscription_1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_2(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_2);

                m_instrumentTradeSubscription_2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_3(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                /* m_instrumentTradeSubscription_2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument);

                 m_instrumentTradeSubscription_2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                 m_instrumentTradeSubscription_2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                 m_instrumentTradeSubscription_2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                 m_instrumentTradeSubscription_2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                 m_instrumentTradeSubscription_2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                 m_instrumentTradeSubscription_2.Start();*/
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_4(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();



            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_5(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_1_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_1_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_1_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_1_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_1_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_1_a1);

                m_instrumentTradeSubscription_1_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_1_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_1_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_1_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_1_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_1_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_6(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_1_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_1_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_1_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_1_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_1_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_1_a2);

                m_instrumentTradeSubscription_1_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_1_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_1_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_1_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_1_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_1_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_7(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_2_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_2_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_2_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_2_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_2_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_2_a1);

                m_instrumentTradeSubscription_2_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_2_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_2_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_2_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_2_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_2_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_8(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_2_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_2_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_2_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_2_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_2_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_2_a2);

                m_instrumentTradeSubscription_2_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_2_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_2_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_2_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_2_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_2_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_9(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_2 = e.InstrumentLookup.Instrument;
                final_price_3_b = Price.FromDecimal(instrument_main_2, Int32.MinValue);
                final_price_3_s = Price.FromDecimal(instrument_main_2, Int32.MaxValue);
                final_price_4_b = Price.FromDecimal(instrument_main_2, Int32.MinValue);
                final_price_4_s = Price.FromDecimal(instrument_main_2, Int32.MaxValue);

                Log.Information("Found: {0}", instrument_main_2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_jan24_feb24 = new PriceSubscription(instrument_main_2, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_jan24_feb24.FieldsUpdated += m_priceSubscription_FieldsUpdated_jan24_feb24;
                m_priceSubsciption_jan24_feb24.Start();

               
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_10(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_3 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_3);
                richTextBox1.AppendText(String.Format("Found ji: {0}\n", instrument_3));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_3, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_3 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_3);

                m_instrumentTradeSubscription_3.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_3.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_3.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_3.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_3.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_3.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_11(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_3_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_3_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_3_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_3_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_3_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_3_a1);

                m_instrumentTradeSubscription_3_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_3_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_3_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_3_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_3_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_3_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_12(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_3_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_3_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_3_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_3_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_3_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_3_a2);

                m_instrumentTradeSubscription_3_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_3_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_3_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_3_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_3_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_3_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_13(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_4 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_4);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_4));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_4, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_4 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_4);

                m_instrumentTradeSubscription_4.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_4.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_4.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_4.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_4.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_4.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_14(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_4_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_4_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_4_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_4_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_4_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_4_a1);

                m_instrumentTradeSubscription_4_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_4_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_4_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_4_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_4_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_4_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_15(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_4_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_4_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_4_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_4_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_4_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_4_a2);

                m_instrumentTradeSubscription_4_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_4_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_4_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_4_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_4_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_4_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_16(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_2 = e.InstrumentLookup.Instrument;
                

                Log.Information("Found: {0}", instrument_main_2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_jul24 = new PriceSubscription(instrument_main_2, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_jul24.FieldsUpdated += m_priceSubscription_FieldsUpdated_jul24;
                m_priceSubsciption_jul24.Start();

               
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_17(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_2 = e.InstrumentLookup.Instrument;


                Log.Information("Found: {0}", instrument_main_2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_aug24 = new PriceSubscription(instrument_main_2, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_aug24.FieldsUpdated += m_priceSubscription_FieldsUpdated_aug24;
                m_priceSubsciption_aug24.Start();


            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_18(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_2 = e.InstrumentLookup.Instrument;


                Log.Information("Found: {0}", instrument_main_2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_jan24 = new PriceSubscription(instrument_main_2, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_jan24.FieldsUpdated += m_priceSubscription_FieldsUpdated_jan24;
                m_priceSubsciption_jan24.Start();


            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_19(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_2 = e.InstrumentLookup.Instrument;


                Log.Information("Found: {0}", instrument_main_2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_feb24 = new PriceSubscription(instrument_main_2, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_feb24.FieldsUpdated += m_priceSubscription_FieldsUpdated_feb24;
                m_priceSubsciption_feb24.Start();


            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
     
        void m_instrLookupRequest_OnData_20(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_i = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_i);
                richTextBox1.AppendText(String.Format("Found ji: {0}\n", instrument_i));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_i, tt_net_sdk.Dispatcher.Current);
               
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_i = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_i);

                m_instrumentTradeSubscription_i.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_i.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_i.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_i.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_i.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_i.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_21(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_i_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_i_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_i_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_i_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_i_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_i_a1);

                m_instrumentTradeSubscription_i_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_i_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_i_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_i_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_i_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_i_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_22(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_i_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_i_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_i_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_i_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_i_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_i_a2);

                m_instrumentTradeSubscription_i_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_i_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_i_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_i_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_i_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_i_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_23(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_ii = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_ii);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_ii));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_ii = Price.FromDecimal(instrument, user_p_ii);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_ii, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_ii = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_ii);

                m_instrumentTradeSubscription_ii.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_ii.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_ii.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_ii.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_ii.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_ii.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_24(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_ii_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_ii_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_ii_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_ii = Price.FromDecimal(instrument, user_p_ii);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_ii_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_ii_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_ii_a1);

                m_instrumentTradeSubscription_ii_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_ii_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_ii_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_ii_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_ii_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_ii_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_25(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_ii_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_ii_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_ii_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_ii = Price.FromDecimal(instrument, user_p_ii);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_ii_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_ii_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_ii_a2);

                m_instrumentTradeSubscription_ii_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_ii_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_ii_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_ii_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_ii_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_ii_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_26(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_iii = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_iii);
                richTextBox1.AppendText(String.Format("Found ji: {0}\n", instrument_iii));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_iii, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_iii = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_iii);

                m_instrumentTradeSubscription_iii.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_iii.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_iii.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_iii.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_iii.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_iii.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_27(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_iii_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_iii_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_iii_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_iii_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_iii_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_iii_a1);

                m_instrumentTradeSubscription_iii_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_iii_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_iii_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_iii_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_iii_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_iii_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_28(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_iii_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_iii_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_iii_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_iii_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_iii_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_iii_a2);

                m_instrumentTradeSubscription_iii_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_iii_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_iii_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_iii_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_iii_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_iii_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_29(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_iv = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_iv);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_iv));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_iv, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_iv = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_iv);

                m_instrumentTradeSubscription_iv.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_iv.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_iv.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_iv.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_iv.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_iv.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_30(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_iv_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_iv_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_iv_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_iv_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_iv_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_iv_a1);

                m_instrumentTradeSubscription_iv_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_iv_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_iv_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_iv_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_iv_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_iv_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_31(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_iv_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_iv_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_iv_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_iv_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_iv_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_iv_a2);

                m_instrumentTradeSubscription_iv_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_iv_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_iv_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_iv_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_iv_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_iv_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_32(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_5 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_5);
                richTextBox1.AppendText(String.Format("Found ji: {0}\n", instrument_5));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_5, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_5 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_5);

                m_instrumentTradeSubscription_5.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_5.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_5.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_5.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_5.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_5.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_33(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_5_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_5_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_5_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_5_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_5_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_5_a1);

                m_instrumentTradeSubscription_5_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_5_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_5_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_5_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_5_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_5_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_34(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_5_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_5_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_5_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_5_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_5_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_5_a2);

                m_instrumentTradeSubscription_5_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_5_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_5_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_5_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_5_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_5_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_35(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_6 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_6);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_6));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_6, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_6 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_6);

                m_instrumentTradeSubscription_6.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_6.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_6.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_6.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_6.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_6.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_36(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_6_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_6_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_6_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_6_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_6_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_6_a1);

                m_instrumentTradeSubscription_6_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_6_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_6_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_6_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_6_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_6_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_37(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_6_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_6_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_6_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption = new PriceSubscription(instrument_6_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption.FieldsUpdated += m_priceSubscription_FieldsUpdated;
                m_priceSubsciption.Start();
                m_instrumentTradeSubscription_6_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_6_a2);

                m_instrumentTradeSubscription_6_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_6_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_6_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_6_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_6_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_6_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_38(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_3 = e.InstrumentLookup.Instrument;
                final_price_5_b = Price.FromDecimal(instrument_main_3, Int32.MinValue);
                final_price_5_s = Price.FromDecimal(instrument_main_3, Int32.MaxValue);
                final_price_6_b = Price.FromDecimal(instrument_main_3, Int32.MinValue);
                final_price_6_s = Price.FromDecimal(instrument_main_3, Int32.MaxValue);

                Log.Information("Found: {0}", instrument_main_3);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_3));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_apr24_may24 = new PriceSubscription(instrument_main_3, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_apr24_may24.FieldsUpdated += m_priceSubscription_FieldsUpdated_apr24_may24;
                m_priceSubsciption_apr24_may24.Start();


            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_39(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_3 = e.InstrumentLookup.Instrument;


                Log.Information("Found: {0}", instrument_main_3);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_3));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_apr24 = new PriceSubscription(instrument_main_3, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_apr24.FieldsUpdated += m_priceSubscription_FieldsUpdated_apr24;
                m_priceSubsciption_apr24.Start();


            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_40(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_main_3 = e.InstrumentLookup.Instrument;


                Log.Information("Found: {0}", instrument_main_3);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_main_3));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_may24 = new PriceSubscription(instrument_main_3, tt_net_sdk.Dispatcher.Current);

                m_priceSubsciption_may24.FieldsUpdated += m_priceSubscription_FieldsUpdated_may24;
                m_priceSubsciption_may24.Start();


            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_41(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_v = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_v);
                richTextBox1.AppendText(String.Format("Found ji: {0}\n", instrument_v));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_v, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_v = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_v);

                m_instrumentTradeSubscription_v.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_v.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_v.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_v.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_v.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_v.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_42(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_v_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_v_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_v_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_v_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_v_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_v_a1);

                m_instrumentTradeSubscription_v_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_v_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_v_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_v_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_v_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_v_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_43(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_v_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_v_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_v_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_v_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_v_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_v_a2);

                m_instrumentTradeSubscription_v_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_v_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_v_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_v_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_v_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_v_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_44(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_vi = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_vi);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_vi));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_vi, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_vi = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_vi);

                m_instrumentTradeSubscription_vi.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_vi.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_vi.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_vi.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_vi.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_vi.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_45(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_vi_a1 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_vi_a1);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_vi_a1));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_vi_a1, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_vi_a1 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_vi_a1);

                m_instrumentTradeSubscription_vi_a1.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_vi_a1.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_vi_a1.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_vi_a1.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_vi_a1.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_vi_a1.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        void m_instrLookupRequest_OnData_46(object sender, InstrumentLookupEventArgs e)
        {
            if (e.Event == ProductDataEvent.Found)
            {
                // Instrument was found
                instrument_vi_a2 = e.InstrumentLookup.Instrument;
                Log.Information("Found: {0}", instrument_vi_a2);
                richTextBox1.AppendText(String.Format("Found: {0}\n", instrument_vi_a2));
                /*user_price = Price.FromDecimal(instrument, user_p);
                user_price_2 = Price.FromDecimal(instrument, user_p_2);
                // Subscribe for market Data*/
                m_priceSubsciption_i = new PriceSubscription(instrument_vi_a2, tt_net_sdk.Dispatcher.Current);
                m_priceSubsciption_i.Settings = new PriceSubscriptionSettings(PriceSubscriptionType.MarketDepth);
                m_priceSubsciption_i.FieldsUpdated += m_priceSubscription_FieldsUpdated_i;
                m_priceSubsciption_i.Start();
                m_instrumentTradeSubscription_vi_a2 = new InstrumentTradeSubscription(tt_net_sdk.Dispatcher.Current, instrument_vi_a2);

                m_instrumentTradeSubscription_vi_a2.OrderUpdated += new EventHandler<OrderUpdatedEventArgs>(m_instrumentTradeSubscription_OrderUpdated);
                m_instrumentTradeSubscription_vi_a2.OrderAdded += new EventHandler<OrderAddedEventArgs>(m_instrumentTradeSubscription_OrderAdded);
                m_instrumentTradeSubscription_vi_a2.OrderDeleted += new EventHandler<OrderDeletedEventArgs>(m_instrumentTradeSubscription_OrderDeleted);
                m_instrumentTradeSubscription_vi_a2.OrderFilled += new EventHandler<OrderFilledEventArgs>(m_instrumentTradeSubscription_OrderFilled);
                m_instrumentTradeSubscription_vi_a2.OrderRejected += new EventHandler<OrderRejectedEventArgs>(m_instrumentTradeSubscription_OrderRejected);

                m_instrumentTradeSubscription_vi_a2.Start();
            }
            else if (e.Event == ProductDataEvent.NotAllowed)
            {
                Log.Information("Not Allowed : Please check your Token access");
                richTextBox1.AppendText(String.Format("Not Allowed : Please check your Token access\n"));
            }
            else
            {
                // Instrument was not found and TT API has given up looking for it
                Log.Information("Cannot find instrument: {0}", e.Message);
                richTextBox1.AppendText(String.Format("Cannot find instrument: {0}\n", e.Message));
            }
        }
        /*This function is used when we are buying both qouted spread and the ase*/
        Price Price_calculator_1_b( bool buy,Price bid,Price ask,Quantity bidQty,Quantity askQty,tt_net_sdk.Instrument inst,Price usp_b, Price usp_s, decimal r_1,bool sell)
        {
            if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid&& bid != Price.Empty&& ask != Price.Empty&& bidQty != Quantity.Empty && askQty != Quantity.Empty)
            {
                try
                {


                    if (buy)
                    {
                        qouted_price = bid + 1;
                        if (qouted_price == ask)
                        {
                            Quantity ratioq = askQty / bidQty;
                            /*  Log.Information(r_1);
                              Log.Information("hellllllllll2222222222222222222222222222");*/
                            if (ratioq.ToDecimal() > r_1)
                            {
                                qouted_price = bid;
                            }
                        }

                        /* Log.Information(qouted_price);
                         Log.Information(usp_b);*/

                        final_p = (usp_b.ToDecimal() - qouted_price.ToDecimal()) / 2;
                        /* Log.Information(final_p);*/
                        final_p = 2 * final_p;
                        if (final_p - (int)final_p != 0)
                        {
                            final_p -= (decimal)0.5;

                        }
                        final_p /= 2;
                        final_price = Price.FromDecimal(inst, final_p);
                        /*Log.Information(final_price);*/
                    }

                    return final_price;
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();

                    Environment.Exit(500);
                }
            }
            else
            {
                final_price = Price.FromDecimal(inst, Int32.MinValue);
            }
                return final_price;
            
        }

        Price Price_calculator_1_s(bool buy, Price bid, Price ask, Quantity bidQty, Quantity askQty, tt_net_sdk.Instrument inst, Price usp_b, Price usp_s, decimal r_1, bool sell)
        {
            if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)
            {
                try
                {
                    if (sell)
                    {

                        qouted_price = ask - 1;
                        if (qouted_price == bid)
                        {
                            Quantity ratioq = bidQty / askQty;
                            if (ratioq.ToDecimal() > r_1)
                            {
                                qouted_price = ask;
                            }
                        }



                        final_p = (usp_s.ToDecimal() - qouted_price.ToDecimal()) / 2;


                        final_p = 2 * final_p;
                        if (final_p - (int)final_p != 0)
                        {
                            final_p += (decimal)0.5;

                        }
                        final_p /= 2;
                        final_price = Price.FromDecimal(inst, final_p);

                    }


                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(501);
                }
            }
            else
            {
                final_price = Price.FromDecimal(inst, Int32.MaxValue);
            }
            return final_price;
        }


        /*This function is used when we are either buying qouted spread and selling the ase or vice-versa */
        Price Price_calculator_2_b(bool buy, Price bid, Price ask, Quantity bidQty, Quantity askQty, tt_net_sdk.Instrument inst, Price usp_b, Price usp_s, decimal r_2, bool sell)
        {
            if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)
            {
                try
            {
                if (buy)
                {
                    qouted_price = ask - 1;
                    if (qouted_price == bid)
                    {
                        Quantity ratioq = bidQty / askQty;
                        /*Log.Information("aayaaaaaaaaaaa");
                        Log.Information(ratioq);
                        Log.Information(ask);
                        Log.Information(r_2);*/
                        if (ratioq.ToDecimal() > r_2)
                        {
                            qouted_price = ask;
                        }
                    }

                    /*  Log.Information(qouted_price);
                      Log.Information(usp_b);*/

                    final_p_2 = (usp_b.ToDecimal() + qouted_price.ToDecimal()) / 2;
                    /* Log.Information(final_p_2);*/

                    final_p_2 = 2 * final_p_2;
                    if (final_p_2 - (int)final_p_2 != 0)
                    {
                        final_p_2 -= (decimal)0.5;

                    }
                    final_p_2 /= 2;
                    final_price = Price.FromDecimal(inst, final_p_2);
                    /*Log.Information(final_price);*/
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(502);
            } }
        else { 
            final_price = Price.FromDecimal(inst, Int32.MinValue);
            }
            return final_price;
        }

       
        Price Price_calculator_2_s(bool buy, Price bid, Price ask, Quantity bidQty, Quantity askQty, tt_net_sdk.Instrument inst, Price usp_b, Price usp_s, decimal r_2, bool sell)
        {
            if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)
            {
                try
            {
                if (sell)
                {

                    qouted_price = bid + 1;
                    if (qouted_price == ask)
                    {
                        Quantity ratioq = askQty / bidQty;
                        if (ratioq.ToDecimal() > r_2)
                        {
                            qouted_price = bid;
                        }
                    }

                    /* Log.Information(qouted_price);
                     Log.Information(usp_s);
     */
                    final_p_2 = (usp_s.ToDecimal() + qouted_price.ToDecimal()) / 2;


                    final_p_2 = 2 * final_p_2;

                    if (final_p_2 - (int)final_p_2 != 0)
                    {
                        final_p_2 += (decimal)0.5;

                    }
                    final_p_2 /= 2;
                    final_price = Price.FromDecimal(inst, final_p_2);
                    /* Log.Information(final_price);*/
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(503);
            }
            }
            else
            {
                final_price = Price.FromDecimal(inst, Int32.MaxValue);
            }
            return final_price;
        }
        String PlaceOrder_buy(String m_orderKey_b, bool qouted_price_received_b,Price final_price_1, decimal qt1, bool change_b,tt_net_sdk.Instrument inst,bool new_reload,decimal rel_2,TradeSubscription m_instrumentTradeSubscription,decimal vwap,decimal fill_q,Button btn)
        {
            if (final_price_1.IsValid && final_price_1.IsTradable&& final_price_1!=Price.Empty)
            {
                try
                {
                    
                    if (fill_q >= max_limit)
                    {
                        btn.PerformClick();
                        richTextBox1.AppendText(String.Format("\nLimit Reached for  buying of{0} ,filled quantity ={1}",inst, fill_q));
                    }
                    else
                    {
                        if ((m_orderKey_b == "" && qouted_price_received_b) || new_reload == true && qouted_price_received_b)
                        {
                            OrderProfile op = new OrderProfile(inst);
                            op.BuySell = BuySell.Buy;
                            op.Account = m_accounts.ElementAt(0);
                            new_reload = true;
                            richTextBox1.AppendText(String.Format("\n{0}:{1}", rel_2, qt1));
                            if (qt1 > 0 && new_reload)
                            {
                                if (qt1 - rel_2 < 0)
                                {
                                    op.OrderQuantity = Quantity.FromDecimal(inst, qt1);

                                }
                                else
                                {
                                    op.OrderQuantity = Quantity.FromDecimal(inst, rel_2);
                                }

                            }
                            op.OrderType = OrderType.Limit;
                            op.LimitPrice = final_price_1;
                            if (final_price_1 != Price.FromDecimal(instrument, Int32.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_1 != Price.FromDecimal(instrument, 0))
                                {
                                    if (!m_instrumentTradeSubscription.SendOrder(op))
                                    {
                                        Log.Information("Send new order Failed.!!");
                                        richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));

                                        Dispose();
                                    }
                                    else
                                    {


                                        Log.Information("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                        richTextBox1.AppendText(String.Format("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));

                                        return op.SiteOrderKey;
                                    }
                                }
                                else
                                {
                                    if (vwap + 1 >= Convert.ToDecimal(op.LimitPrice))
                                    {
                                        if (!m_instrumentTradeSubscription.SendOrder(op))
                                        {
                                            Log.Information("Send new order Failed.!!");
                                            richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));

                                            Dispose();
                                        }
                                        else
                                        {


                                            Log.Information("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                            richTextBox1.AppendText(String.Format("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));

                                            return op.SiteOrderKey;
                                        }
                                    }
                                    else
                                    {
                                        Log.Information("price wrong while buying for {0}", inst);
                                        button19.PerformClick();
                                        Log.Information(DateTime.Now.ToString());

                                        Environment.Exit(25);

                                    }
                                }

                            }
                            else
                            {
                                Log.Information("price wrong while buying for {0}", inst);
                                button19.PerformClick();
                                Log.Information(DateTime.Now.ToString());

                                Environment.Exit(225);

                            }
                        }
                        else if (m_instrumentTradeSubscription.Orders.ContainsKey(m_orderKey_b) & change_b == true && qouted_price_received_b)
                        {
                            // If there is a working order, reprice it
                            currentDateTime_end = DateTime.Now;
                            richTextBox1.AppendText(String.Format("\ntime difference{0}", currentDateTime_start - currentDateTime_end));
                            OrderProfile op = m_instrumentTradeSubscription.Orders[m_orderKey_b].GetOrderProfile();
                            if (Math.Abs(Convert.ToDecimal(op.LimitPrice) - Convert.ToDecimal(final_price_1)) <= 1.5m)
                            {
                                richTextBox1.AppendText(String.Format("cheking {0}", Math.Abs(Convert.ToDecimal(op.LimitPrice) - Convert.ToDecimal(final_price_1))));

                                op.LimitPrice = final_price_1;
                            }
                            else
                            {
                                Log.Information("abrupt changes in buying  price for {0},{1},{2},{3}", inst, Math.Abs(Convert.ToDecimal(op.LimitPrice - final_price_1)), op.LimitPrice, final_price_1);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(99);

                            }
                            op.Action = OrderAction.Change;

                            Log.Information("Change price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_b].LimitPrice, op.LimitPrice);
                            richTextBox1.AppendText(String.Format("\nChange price from {0} to {1} for {2}", m_instrumentTradeSubscription.Orders[m_orderKey_b].LimitPrice, op.LimitPrice, inst));
                            if (final_price_1 != Price.FromDecimal(instrument, Int32.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_1 != Price.FromDecimal(instrument, 0))
                                {
                                    if (!m_instrumentTradeSubscription.SendOrder(op))
                                    {
                                        Log.Information("Sent order update: " + inst.Name + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                        richTextBox1.AppendText(String.Format("\nSent order update: " + inst.Name + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));

                                    }
                                    else
                                    {
                                        Log.Information("Send change order succeeded ofr .");
                                        richTextBox1.AppendText(String.Format("\nSend change order succeeded for{0}", inst));

                                        currentDateTime_end = DateTime.Now;
                                        richTextBox1.AppendText(String.Format("\nSend change order succeeded for{0}", currentDateTime_start - currentDateTime_end));
                                        change_b = false;

                                    }
                                }
                                else
                                {
                                    if (vwap + 1 >= Convert.ToDecimal(op.LimitPrice))
                                    {
                                        if (!m_instrumentTradeSubscription.SendOrder(op))
                                        {
                                            Log.Information("Sent order update: " + inst.Name + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                            richTextBox1.AppendText(String.Format("\nSent order update: " + inst.Name + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));

                                        }
                                        else
                                        {
                                            Log.Information("Send change order succeeded ofr .");
                                            richTextBox1.AppendText(String.Format("\nSend change order succeeded for{0}", inst));

                                            currentDateTime_end = DateTime.Now;
                                            richTextBox1.AppendText(String.Format("\nSend change order succeeded for{0}", currentDateTime_start - currentDateTime_end));
                                            change_b = false;

                                        }
                                    }
                                    else
                                    {
                                        Log.Information("price wrong while changing  buying for {0}", inst);
                                        button19.PerformClick();
                                        Log.Information(DateTime.Now.ToString());

                                        Environment.Exit(26);
                                    }
                                }
                            }
                        }
                    }
                  
                    /*else if (m_instrumentTradeSubscription.Orders.ContainsKey(m_orderKey_b)){
                        richTextBox1.AppendText("hiiiiii");
                    }*/
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(504);
                }
            }
            else
            {
               
                button19.PerformClick();
                Environment.Exit(750);
            }
            return m_orderKey_b;
        }


        String PlaceOrder_sell(String m_orderKey_s, bool qouted_price_received_s, Price final_price_1, decimal qt, bool change_s, tt_net_sdk.Instrument inst,bool new_reload,decimal rel_1, TradeSubscription m_instrumentTradeSubscription_1,decimal vwap ,decimal fill_q,Button btn)
        {
            if (final_price_1.IsValid && final_price_1.IsTradable&&final_price_1!=Price.Empty)
            {
                try
                {
                    if (fill_q >= max_limit)
                    {
                        btn.PerformClick();
                        richTextBox1.AppendText(String.Format("Limit Reached for selling of {0} ,filled quantity ={1}", inst, fill_q));
                    }
                    else
                    {

                        if ((m_orderKey_s == "" && qouted_price_received_s) || new_reload == true && qouted_price_received_s)
                        {

                            OrderProfile op = new OrderProfile(inst);
                            op.BuySell = BuySell.Sell;
                            op.Account = m_accounts.ElementAt(0);
                            new_reload = true;
                            if (qt > 0 && new_reload)
                            {

                                Log.Information("{0}", qt);
                                if (qt - rel_1 < 0 && qt > 0)
                                {
                                    op.OrderQuantity = Quantity.FromDecimal(inst, qt);
                                }
                                else if (rel_1 > 0)
                                {
                                    op.OrderQuantity = Quantity.FromDecimal(inst, rel_1);

                                }

                                Log.Information("{0}", qt);


                                richTextBox1.AppendText(String.Format("\n{0} this much qunatity is undisclosed", qt - rel_1));
                            }

                            new_reload = false;
                            Log.Information("{0}", new_reload);

                            op.OrderType = OrderType.Limit;

                            op.LimitPrice = final_price_1;

                            if (final_price_1 != Price.FromDecimal(instrument, Int32.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_1 != Price.FromDecimal(instrument, 0))
                                {
                                    if (!m_instrumentTradeSubscription_1.SendOrder(op))
                                    {
                                        Log.Information("Send new order Failed.!!");
                                        richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));
                                        Dispose();
                                    }
                                    else
                                    {

                                        Log.Information("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                        m_orderKey_s = op.SiteOrderKey;
                                        Log.Information(m_orderKey_s.ToString());

                                        richTextBox1.AppendText(String.Format("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));

                                        return op.SiteOrderKey;
                                    }
                                }
                                else
                                {
                                    if (vwap - 1 <= Convert.ToDecimal(op.LimitPrice))
                                    {
                                        if (!m_instrumentTradeSubscription_1.SendOrder(op))
                                        {
                                            Log.Information("Send new order Failed.!!");
                                            richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));
                                            Dispose();
                                        }
                                        else
                                        {

                                            Log.Information("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                            m_orderKey_s = op.SiteOrderKey;
                                            Log.Information(m_orderKey_s.ToString());

                                            richTextBox1.AppendText(String.Format("\nSent new order: " + inst.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));

                                            return op.SiteOrderKey;
                                        }
                                    }
                                    else
                                    {


                                        Log.Information("price wrong while selling for {0}", inst);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(27);


                                    }

                                }
                            }

                        }



                        else if ((m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s) && change_s == true && qouted_price_received_s))
                        {
                            // If there is a working order, reprice it

                            richTextBox1.AppendText(String.Format("\ntime difference{0}", currentDateTime_start - DateTime.Now));
                            OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                            if (Math.Abs(Convert.ToDecimal(op.LimitPrice) - Convert.ToDecimal(final_price_1)) <= 1.5m)
                            {
                                richTextBox1.AppendText(String.Format("\ncheking {0}", Math.Abs(Convert.ToDecimal(op.LimitPrice) - Convert.ToDecimal(final_price_1))));

                                op.LimitPrice = final_price_1;
                            }

                            else
                            {
                                Log.Information("absrupt changes in selling price for {0},{1}", inst, Math.Abs(Convert.ToDecimal(op.LimitPrice - final_price_1)));
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(100);
                            }
                            op.Action = OrderAction.Change;

                            Log.Information("Change price from {0} to {1}", m_instrumentTradeSubscription_1.Orders[m_orderKey_s].LimitPrice, op.LimitPrice);
                            richTextBox1.AppendText(String.Format("\nChange price from {0} to {1}", m_instrumentTradeSubscription_1.Orders[m_orderKey_s].LimitPrice, op.LimitPrice));
                            if (final_price_1 != Price.FromDecimal(instrument, Int32.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MinValue) && final_price_1 != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_1 != Price.FromDecimal(instrument, 0))
                                {
                                    if (!m_instrumentTradeSubscription_1.SendOrder(op))
                                    {
                                        Log.Information("Sent order update: " + inst + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                        richTextBox1.AppendText(String.Format("\nSent order update: " + inst + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));
                                    }
                                    else
                                    {
                                        Log.Information("Send change order succeeded.");

                                        richTextBox1.AppendText(String.Format("\nSend change order succeeded for{0}", currentDateTime_start - DateTime.Now));
                                        change_s = false;
                                        Log.Information("{0}", change_s);
                                    }
                                }
                                else
                                {
                                    if (vwap - 1 <= Convert.ToDecimal(op.LimitPrice))
                                    {
                                        if (!m_instrumentTradeSubscription_1.SendOrder(op))
                                        {
                                            Log.Information("Sent order update: " + inst + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                            richTextBox1.AppendText(String.Format("\nSent order update: " + inst + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));
                                        }
                                        else
                                        {
                                            Log.Information("Send change order succeeded.");

                                            richTextBox1.AppendText(String.Format("\nSend change order succeeded for{0}", currentDateTime_start - DateTime.Now));
                                            change_s = false;
                                            Log.Information("{0}", change_s);
                                        }
                                    }
                                    else
                                    {
                                        Log.Information("price wrong while changing selling for {0}", inst);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(28);
                                    }
                                }
                            }
                        }
                    }
                    /* else if (m_orderKey_s != "")
                     {
                         richTextBox1.AppendText("ab kya");
                     }*/
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(505);
                }
            }
            else
            {

                button19.PerformClick();
                Environment.Exit(751);
            }
                return m_orderKey_s;
        }
        /*void  UpdateSpread(Instrument inst,Instrument inst1)
         {
             // update
             ASReturnCodes rtnCode;
             richTextBox1.AppendText(String.Format("\nupdate main aa gaya :{0}, {1}",inst,inst1));
             spDet_1 = inst.GetSpreadDetails();
             var spleg1 = spDet_1.GetLeg(0);
             var spleg2=spDet_1.GetLeg(1);
             if (Convert.ToString(inst1).Contains(spleg2.Name.ToString()))
             {
                 richTextBox1.AppendText(String.Format("\nupdate main aa gaya :{0}, {1},{2}", inst, inst1, spleg1.Name.ToString()));

             }
             if (Convert.ToString(inst1).Contains(spleg1.Name.ToString()))
             {
                 richTextBox1.AppendText(String.Format("\nupdate main aa gaya :{0}, {1},{2},{3}", inst, inst1, spleg2.Name.ToString(),spleg2.ActiveQuoting));
                 spleg2.ActiveQuoting = !spleg2.ActiveQuoting;
                 spDet_1.UpdateLeg(1, spleg2);
                 OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                 qt1_b += op.OrderQuantity;

                 op.Action = OrderAction.Delete;
                 m_instrumentTradeSubscription_1.SendOrder(op);
                 var updatedInst = AutospreaderManager.UpdateSpreadDetails(spDet_1, out rtnCode);

                 *//*  spleg2.AppendSpreadsRules(spDet_1);*//*
                 System.Diagnostics.Debug.Assert(rtnCode == ASReturnCodes.Success);*//*
                 richTextBox1.AppendText(String.Format("hnjiii{0} {1}",updatedInst,rtnCode));
                 richTextBox1.AppendText(String.Format("\nupdate main aa gaya :{0}, {1},{2},{3}", inst, inst1, spleg2.Name.ToString(), spleg2.ActiveQuoting));
             }
             x++;
        
         }*/
        Decimal Price_calaculator_sr1_zq_b(Price f1,Price bid,Price ask,Quantity bidqty,Quantity askqty, Decimal ratio)
        {
            decimal value = Int32.MinValue;
            if (bid.IsValid && ask.IsValid && f1.IsValid && bidqty.IsValid && askqty.IsValid && bid != Price.Empty && ask != Price.Empty &&f1!=Price.Empty&& bidqty != Quantity.Empty && askqty != Quantity.Empty)

            {

                try
                {
                    if (bid + 1 < ask)
                    {
                        value = Convert.ToDecimal(bid + 1) + Convert.ToDecimal(f1);
                    }
                    else
                    {
                        if (bidqty / askqty >= ratio)
                        {
                            value = Convert.ToDecimal(ask) + Convert.ToDecimal(f1);
                        }
                        else
                        {
                            value = Convert.ToDecimal(bid) + Convert.ToDecimal(f1);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(200);
                }
            }
            else
            {
                Log.Information("idhar aaya sr1 zq buy wrong");
            }
            return value;
        }
        Decimal Price_calaculator_sr1_zq_s(Price f1, Price bid, Price ask, Quantity bidqty, Quantity askqty, Decimal ratio)
        {
            decimal value = Int32.MaxValue;
            if (bid.IsValid && ask.IsValid &&f1.IsValid&& bidqty.IsValid && askqty.IsValid && bid != Price.Empty && ask != Price.Empty && f1 !=Price.Empty &&bidqty != Quantity.Empty && askqty != Quantity.Empty)

            {
                try
                {
                    if (bid + 1 < ask)
                    {
                        value = Convert.ToDecimal(bid + 1) + Convert.ToDecimal(f1);
                    }
                    else
                    {
                        if (askqty / bidqty >= ratio)
                        {
                            value = Convert.ToDecimal(bid) + Convert.ToDecimal(f1);
                        }
                        else
                        {
                            value = Convert.ToDecimal(ask) + Convert.ToDecimal(f1);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(2000);

                }
            }
            else
            {
                Log.Information("idhar aaya sr1 zq sell wrong");
            }
            return value;
        }
        Decimal Buy_Vwap(Price bid_1, Price bid_2,Price bid_3,Price ask_1,Price ask_2,Price ask_3,Quantity bidqty_1,Quantity bidqty_2,Quantity bidqty_3,Quantity askqty_1, Quantity askqty_2, Quantity askqty_3,String a)
        {
            Decimal ans=Int32.MinValue;
            /*richTextBox1.AppendText(String.Format("first:{0},{1},{2}:{3},{4},{5}:{6},{7},{8}:{9},{10},{11}\n", bid_1,bid_2,bid_3,ask_1,ask_2,ask_3,bidqty_1,bidqty_2,bidqty_3,askqty_1,askqty_2,askqty_3));*/
            if (bid_1.IsValid && bid_2.IsValid && bid_3.IsValid && ask_1.IsValid && ask_2.IsValid && ask_3.IsValid && bidqty_1.IsValid && bidqty_2.IsValid && bidqty_3.IsValid && askqty_1.IsValid && askqty_2.IsValid && askqty_3.IsValid && bid_1 != Price.Empty && bid_2 != Price.Empty && bid_3 != Price.Empty && ask_1 != Price.Empty && ask_2 != Price.Empty && ask_3 != Price.Empty && bidqty_1 != Quantity.Empty && askqty_1 != Quantity.Empty && bidqty_2 != Quantity.Empty && askqty_2 != Quantity.Empty && askqty_3 != Quantity.Empty && bidqty_3 != Quantity.Empty)
            { try
            
               
                {
                    if (a == "three")
                    {
                        if (bid_1 + 1 != ask_1)
                        {
                            ans = 2 * (Convert.ToDecimal(bid_1 + 1));

                        }
                        else
                        {
                            if (bidqty_1 <= 500 && askqty_1 / bidqty_1 >= 10)
                            {
                                ans = 2 * (Convert.ToDecimal(bid_1));


                            }
                            else
                            {
                                ans = 2 * (Convert.ToDecimal(ask_1));



                            }
                        }
                        if (bid_2 + 1 != ask_2)
                        {
                            ans = ans - Convert.ToDecimal(ask_2 - 1);


                        }
                        else
                        {
                            if (askqty_2 <= 500 && bidqty_2 / askqty_2 >= 10)
                            {
                                ans = ans - Convert.ToDecimal(ask_2);


                            }
                            else
                            {
                                ans = ans - Convert.ToDecimal(bid_2);



                            }
                        }
                        if (bid_3 + 1 != ask_3)
                        {
                            ans = ans - Convert.ToDecimal(ask_3 - 1);


                        }
                        else
                        {
                            if (askqty_3 <= 500 && bidqty_3 / askqty_3 >= 10)
                            {
                                ans = ans - Convert.ToDecimal(ask_3);


                            }
                            else
                            {
                                ans = ans - Convert.ToDecimal(bid_3);



                            }
                        }
                    }
                    else
                    {
                        if (bid_1 + 1 != ask_1)
                        {
                            ans = Convert.ToDecimal(bid_1 + 1);
                        }
                        else
                        {
                            if (bidqty_1 <= 500 && askqty_1 / bidqty_1 >= 10)
                            {
                                ans = Convert.ToDecimal(bid_1);
                            }
                            else
                            {
                                ans = Convert.ToDecimal(ask_1);

                            }
                        }
                        if (bid_2 + 1 != ask_2)
                        {
                            ans = ans - Convert.ToDecimal(ask_2 - 1);
                        }
                        else
                        {
                            if (askqty_2 <= 500 && bidqty_2 / askqty_2 >= 10)
                            {
                                ans = ans - Convert.ToDecimal(ask_2);
                            }
                            else
                            {
                                ans = ans - Convert.ToDecimal(bid_2);

                            }
                        }

                    }
               
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(505);
            }
        }
                else
                {

                Log.Information("Price Nahi aa rahe");

                }
            return ans;

        }
        Decimal Sell_Vwap(Price bid_1, Price bid_2, Price bid_3, Price ask_1, Price ask_2, Price ask_3, Quantity bidqty_1, Quantity bidqty_2, Quantity bidqty_3, Quantity askqty_1, Quantity askqty_2, Quantity askqty_3, String a)
        {
            Decimal ans = Int32.MaxValue;
            if (bid_1.IsValid && bid_2.IsValid && bid_3.IsValid && ask_1.IsValid && ask_2.IsValid && ask_3.IsValid && bidqty_1.IsValid && bidqty_2.IsValid && bidqty_3.IsValid && askqty_1.IsValid && askqty_2.IsValid && askqty_3.IsValid && bid_1 != Price.Empty && bid_2 != Price.Empty && bid_3 != Price.Empty && ask_1 != Price.Empty && ask_2 != Price.Empty && ask_3 != Price.Empty && bidqty_1 != Quantity.Empty && askqty_1 != Quantity.Empty && bidqty_2 != Quantity.Empty && askqty_2 != Quantity.Empty && askqty_3 != Quantity.Empty && bidqty_3 != Quantity.Empty)
            {
                try
            {
               
                    if (a == "three")
                    {
                        if (bid_1 + 1 != ask_1)
                        {
                            ans = 2 * (Convert.ToDecimal(ask_1 - 1));
                        }
                        else
                        {
                            if (askqty_1 <= 500 && bidqty_1 / askqty_1 >= 10)
                            {
                                ans = 2 * (Convert.ToDecimal(ask_1));
                            }
                            else
                            {
                                ans = 2 * (Convert.ToDecimal(bid_1));

                            }
                        }
                        if (bid_2 + 1 != ask_2)
                        {
                            ans = ans - Convert.ToDecimal(bid_2 + 1);
                        }
                        else
                        {
                            if (bidqty_2 <= 500 && askqty_2 / bidqty_2 >= 10)
                            {
                                ans = ans - Convert.ToDecimal(bid_2);
                            }
                            else
                            {
                                ans = ans - Convert.ToDecimal(ask_2);

                            }
                        }
                        if (bid_3 + 1 != ask_3)
                        {
                            ans = ans - Convert.ToDecimal(bid_3 + 1);
                        }
                        else
                        {
                            if (bidqty_3 <= 500 && askqty_3 / bidqty_3 >= 10)
                            {
                                ans = ans - Convert.ToDecimal(bid_3);
                            }
                            else
                            {
                                ans = ans - Convert.ToDecimal(ask_3);

                            }
                        }
                    }
                    else
                    {
                        if (bid_1 + 1 != ask_1)
                        {
                            ans = Convert.ToDecimal(ask_1 - 1);
                        }
                        else
                        {
                            if (askqty_1 <= 500 && bidqty_1 / askqty_1 >= 10)
                            {
                                ans = Convert.ToDecimal(ask_1);
                            }
                            else
                            {
                                ans = Convert.ToDecimal(bid_1);

                            }
                        }
                        if (bid_2 + 1 != ask_2)
                        {
                            ans = ans - Convert.ToDecimal(ask_2 - 1);
                        }
                        else
                        {
                            if (askqty_2 <= 500 && bidqty_2 / askqty_2 >= 10)
                            {
                                ans = ans - Convert.ToDecimal(ask_2);
                            }
                            else
                            {
                                ans = ans - Convert.ToDecimal(bid_2);

                            }
                        }

                    }
                
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(506);
            }
            }
            else
            {

                Log.Information("Price Nahi aa rahe");

            }
            return ans;

        }
        void datagrid_updation(DataGridView dg, string x, Price ask_t, Price bid_t)
        {
            if (ask_t.IsValid && bid_t.IsValid && ask_t != Price.Empty && bid_t != Price.Empty)
            {
                try
                {
                    for (int i = 0; i < dg.RowCount; i++)
                    {
                        if (Convert.ToString(dg.Rows[i].Cells[0].Value).Contains(x))
                        {
                            if (Convert.ToString(dg.Rows[i].Cells[1].Value).Contains("Buy"))
                            {
                                decimal temp1 = 0;
                                if (Convert.ToDecimal(dg.Rows[i].Cells[3].Value.ToString()) <= 100)
                                {
                                    temp1 = Convert.ToDecimal(dg.Rows[i].Cells[3].Value.ToString()) * 100 - Convert.ToDecimal(ask_t);
                                }
                                else
                                {
                                    temp1 = Convert.ToDecimal(dg.Rows[i].Cells[3].Value.ToString()) - Convert.ToDecimal(ask_t);
                                }
                                temp1 *= 2;
                                /*richTextBox1.AppendText(String.Format("\n hereee: {0}",temp1));*/
                                dg.Rows[i].Cells[5].Value = temp1;
                                if (Convert.ToDecimal(dg.Rows[i].Cells[5].Value.ToString()) <= -3)
                                {
                                    dg.Rows[i].DefaultCellStyle.BackColor = Color.Red;
                                }
                                else
                                {
                                    dg.Rows[i].DefaultCellStyle.BackColor = Color.White;
                                }
                            }
                            else
                            {
                                decimal temp1 = 0;
                                if (Convert.ToDecimal(dg.Rows[i].Cells[3].Value.ToString()) <= 100)
                                {
                                    temp1 = Convert.ToDecimal(dg.Rows[i].Cells[3].Value.ToString()) * 100 - Convert.ToDecimal(bid_t);
                                }
                                else
                                {
                                    temp1 = Convert.ToDecimal(dg.Rows[i].Cells[3].Value.ToString()) - Convert.ToDecimal(bid_t);
                                }
                                temp1 *= 2;
                                /*richTextBox1.AppendText(String.Format("\n hereee: {0}", temp1));*/
                                dg.Rows[i].Cells[5].Value = temp1;
                                if (Convert.ToDecimal(dg.Rows[i].Cells[5].Value.ToString()) >= 3)
                                {
                                    dg.Rows[i].DefaultCellStyle.BackColor = Color.Red;
                                }
                                else
                                {
                                    dg.Rows[i].DefaultCellStyle.BackColor = Color.White;
                                }
                            }

                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(507);
                }
            }
        }
        String ordermanagement(string x, string y, Price x_p, Price y_p, string side1, string side2, bool order_1, bool order_2, bool order_1n, bool order_2n, bool wait_1, decimal side_1_p, TradeSubscription m_1, TradeSubscription m_1_a1, TradeSubscription m_1_a2, string order_key, bool reload, string child_order_1, string child_order_2, bool change_1, bool received, Price final_1, decimal qt_1, decimal rel_1, Instrument instrument_a1, Instrument instrument_a2, Instrument instrument_1, decimal partial_fill_1, decimal partial_fill_2, string z,decimal vwap,decimal fill_q,Button btn)
        {
            string res = "";
            if (x_p.IsValid && y_p.IsValid && final_1.IsValid && final_1.IsTradable&&x_p!=Price.Empty&&y_p!=Price.Empty&&final_1!=Price.Empty)
            {
                
                try
                {
                    if (side2 == "")
                    {
                        if (wait_1)
                        {
                            Thread.Sleep(1000);
                            wait_1 = false;

                        }
                        if (z == "buying")
                        {
                            if (side1.Contains(x))
                            {
                                /* richTextBox1.AppendText(String.Format("\nhere")); */
                                if (side_1_p >= Convert.ToDecimal(x_p))
                                {
                                    /* richTextBox1.AppendText(String.Format("\nhere*2"));*/
                                    if (order_1n == true)
                                    {
                                        if (m_1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1.SendOrder(op);
                                            order_1n = false;
                                            reload = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;

                                        }
                                    }
                                    if (reload == true || change_1 == true)
                                    {

                                        order_key = PlaceOrder_buy(order_key, received, final_1, qt_1, change_1, instrument_a1, reload, rel_1, m_1_a1, vwap,fill_q,btn);
                                        /*dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic - i ";*/
                                        order_1 = true;
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }

                                    }
                                }
                                else
                                {
                                    /* richTextBox1.AppendText(String.Format("\nhere*3"));*/

                                    if (order_2 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {/*
                            richTextBox1.AppendText(String.Format("\naa toh rha {0} :{1} :", partial_fill_b_1, partial_fill_b_2));*/
                                        if (m_1_a2.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a2.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a2.SendOrder(op);
                                            order_2 = false;
                                            reload = true;
                                            order_2n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }
                                    if (order_1 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {

                                        if (m_1_a1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a1.SendOrder(op);
                                            order_1 = false;
                                            reload = true;
                                            order_1n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }

                                    if (reload == true || change_1 == true || order_key == "")
                                    {

                                        order_key = PlaceOrder_buy(order_key, received, final_1, qt_1, change_1, instrument_1, reload, rel_1, m_1, vwap,fill_q,btn);

                                        /* dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic ";*/
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }
                                    }

                                }
                            }
                            else if (side1.Contains(y))
                            {


                                if (side_1_p <= y_p)
                                {
                                    if (order_2n == true)
                                    {

                                        if (m_1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1.SendOrder(op);
                                            order_2n = false;
                                            reload = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }
                                    if (reload == true || change_1 == true)
                                    {

                                        order_key = PlaceOrder_buy(order_key, received, final_1, qt_1, change_1, instrument_a2, reload, rel_1, m_1_a2, vwap,fill_q,btn);


                                        /*  dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic - ii ";*/
                                        order_2 = true;
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }
                                    }
                                }
                                else
                                {

                                    if (order_2 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {/*
                            richTextBox1.AppendText(String.Format("\naa toh rha {0} :{1} :", partial_fill_b_1, partial_fill_b_2));*/
                                        if (m_1_a2.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a2.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a2.SendOrder(op);
                                            order_2 = false;
                                            reload = true;
                                            order_2n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }
                                    if (order_1 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {

                                        if (m_1_a1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a1.SendOrder(op);
                                            order_1 = false;
                                            reload = true;
                                            order_1n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }

                                    if (reload == true || change_1 == true || order_key == "")
                                    {

                                        order_key = PlaceOrder_buy(order_key, received, final_1, qt_1, change_1, instrument_1, reload, rel_1, m_1, vwap,fill_q,btn);




                                        /* dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic ";*/
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }
                                    }

                                }
                            }
                            else
                            {

                                if (order_2 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                {/*
                        richTextBox1.AppendText(String.Format("\naa toh rha {0} :{1} :", partial_fill_b_1, partial_fill_b_2));*/
                                    if (m_1_a2.Orders.ContainsKey(order_key))
                                    {
                                        OrderProfile op = m_1_a2.Orders[order_key].GetOrderProfile();
                                        op.Action = OrderAction.Delete;
                                        m_1_a2.SendOrder(op);
                                        order_2 = false;
                                        reload = true;
                                        order_2n = true;
                                        child_order_1 = "";
                                        child_order_2 = "";
                                        qt_1 += rel_1;
                                    }
                                }
                                if (order_1 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                {

                                    if (m_1_a1.Orders.ContainsKey(order_key))
                                    {
                                        OrderProfile op = m_1_a1.Orders[order_key].GetOrderProfile();
                                        op.Action = OrderAction.Delete;
                                        m_1_a1.SendOrder(op);
                                        order_1 = false;
                                        reload = true;
                                        order_1n = true;
                                        child_order_1 = "";
                                        child_order_2 = "";
                                        qt_1 += rel_1;
                                    }
                                }
                                if (!string.IsNullOrWhiteSpace(side1))
                                {
                                    Thread.Sleep(100);
                                }
                                if (reload == true || change_1 == true || order_key == "")
                                {

                                    order_key = PlaceOrder_buy(order_key, received, final_1, qt_1, change_1, instrument_1, reload, rel_1, m_1, vwap,fill_q,btn);

                                    /* dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic ";*/
                                    reload = false;
                                    if (change_1)
                                    {
                                        Log.Information("HI");
                                    }
                                    else
                                    {
                                        qt_1 -= rel_1;
                                    }
                                }

                            }
                        }
                        else
                        {
                            /*richTextBox1.AppendText(String.Format("\nhere{0}:{1}",side_1_p,x_p));*/
                            if (side1.Contains(x))
                            {
                                if (side_1_p <= Convert.ToDecimal(x_p))
                                {
                                    /* richTextBox1.AppendText(String.Format("\nhere*2"));*/
                                    if (order_1n == true)
                                    {
                                        if (m_1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1.SendOrder(op);
                                            order_1n = false;
                                            reload = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;

                                        }
                                    }
                                    if (reload == true || change_1 == true)
                                    {
                                        order_key = PlaceOrder_sell(order_key, received, final_1, qt_1, change_1, instrument_a1, reload, rel_1, m_1_a1, vwap,fill_q,btn);
                                        /*dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic - i ";*/
                                        order_1 = true;
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }

                                    }
                                }
                                else
                                {
                                    /*  richTextBox1.AppendText(String.Format("\nhere*3"));*/


                                    if (order_2 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {/*
                            richTextBox1.AppendText(String.Format("\naa toh rha {0} :{1} :", partial_fill_b_1, partial_fill_b_2));*/
                                        if (m_1_a2.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a2.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a2.SendOrder(op);
                                            order_2 = false;
                                            reload = true;
                                            order_2n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }
                                    if (order_1 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {

                                        if (m_1_a1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a1.SendOrder(op);
                                            order_1 = false;
                                            reload = true;
                                            order_1n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }

                                    if (reload == true || change_1 == true || order_key == "")
                                    {

                                        order_key = PlaceOrder_sell(order_key, received, final_1, qt_1, change_1, instrument_1, reload, rel_1, m_1, vwap,fill_q,btn);

                                        /* dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic ";*/
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }
                                    }

                                }
                            }
                            else if (side1.Contains(y))
                            {


                                if (side_1_p >= y_p)
                                {
                                    if (order_2n == true)
                                    {

                                        if (m_1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1.SendOrder(op);
                                            order_2n = false;
                                            reload = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }
                                    if (reload == true || change_1 == true)
                                    {

                                        order_key = PlaceOrder_sell(order_key, received, final_1, qt_1, change_1, instrument_a2, reload, rel_1, m_1_a2, vwap,fill_q,btn);


                                        /*  dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic - ii ";*/
                                        order_2 = true;
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }
                                    }
                                }
                                else
                                {

                                    if (order_2 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {/*
                            richTextBox1.AppendText(String.Format("\naa toh rha {0} :{1} :", partial_fill_b_1, partial_fill_b_2));*/
                                        if (m_1_a2.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a2.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a2.SendOrder(op);
                                            order_2 = false;
                                            reload = true;
                                            order_2n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }
                                    if (order_1 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                    {

                                        if (m_1_a1.Orders.ContainsKey(order_key))
                                        {
                                            OrderProfile op = m_1_a1.Orders[order_key].GetOrderProfile();
                                            op.Action = OrderAction.Delete;
                                            m_1_a1.SendOrder(op);
                                            order_1 = false;
                                            reload = true;
                                            order_1n = true;
                                            child_order_1 = "";
                                            child_order_2 = "";
                                            qt_1 += rel_1;
                                        }
                                    }

                                    if (reload == true || change_1 == true || order_key == "")
                                    {

                                        order_key = PlaceOrder_sell(order_key, received, final_1, qt_1, change_1, instrument_1, reload, rel_1, m_1, vwap,fill_q,btn);

                                        /* dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic ";*/
                                        reload = false;
                                        if (change_1)
                                        {
                                            Log.Information("HI");
                                        }
                                        else
                                        {
                                            qt_1 -= rel_1;
                                        }
                                    }

                                }
                            }
                            else
                            {

                                if (order_2 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                {/*
                        richTextBox1.AppendText(String.Format("\naa toh rha {0} :{1} :", partial_fill_b_1, partial_fill_b_2));*/
                                    if (m_1_a2.Orders.ContainsKey(order_key))
                                    {
                                        OrderProfile op = m_1_a2.Orders[order_key].GetOrderProfile();
                                        op.Action = OrderAction.Delete;
                                        m_1_a2.SendOrder(op);
                                        order_2 = false;
                                        reload = true;
                                        order_2n = true;
                                        child_order_1 = "";
                                        child_order_2 = "";
                                        qt_1 += rel_1;
                                    }
                                }
                                if (order_1 == true && partial_fill_1 == 0 && partial_fill_2 == 0)
                                {

                                    if (m_1_a1.Orders.ContainsKey(order_key))
                                    {
                                        OrderProfile op = m_1_a1.Orders[order_key].GetOrderProfile();
                                        op.Action = OrderAction.Delete;
                                        m_1_a1.SendOrder(op);
                                        order_1 = false;
                                        reload = true;
                                        order_1n = true;
                                        child_order_1 = "";
                                        child_order_2 = "";
                                        qt_1 += rel_1;
                                    }
                                }
                                if (!string.IsNullOrWhiteSpace(side1))
                                {
                                    Thread.Sleep(100);
                                }
                                if (reload == true || change_1 == true || order_key == "")
                                {

                                    order_key = PlaceOrder_sell(order_key, received, final_1, qt_1, change_1, instrument_1, reload, rel_1, m_1, vwap,fill_q,btn);

                                    /* dataGridView2.Rows[1].Cells[0].Value = "SR3-SR1 Sep-jul Synthetic ";*/
                                    reload = false;
                                    if (change_1)
                                    {
                                        Log.Information("HI");
                                    }
                                    else
                                    {
                                        qt_1 -= rel_1;
                                    }
                                }

                            }

                        }

                    }
                    
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(508);
                }
            }
            else
            {
                Log.Information("order management wali dikkat");
            }
            res += wait_1.ToString();
            res += "+";
            res += order_1n.ToString();
            res += "+";
            res += order_1.ToString();
            res += "+";
            res += order_2n.ToString();
            res += "+";
            res += order_2.ToString();
            res += "+";
            res += reload.ToString();
            res += "+";
            res += child_order_1;
            res += "+";
            res += child_order_2;
            res += "+";
            res += order_key;
            res += "+";
            res += change_1;
            res += "+";
            res += qt_1;
            return res;
        }
        void datagrid_updation_2(string bs, int row, decimal x, TradeSubscription m_1, TradeSubscription m_1_a1, TradeSubscription m_1_a2, string order_key, bool pause_1, decimal qt, decimal rel_1, decimal fill_1,Price user_p)
        {
            if (user_p.IsValid && user_p != Price.Empty)
            {
                try
                {
                    dataGridView2.Rows[row].Cells[1].Value = Math.Round(x, 2);
                    dataGridView2.Rows[row].Cells[2].Value = bs;
                    dataGridView2.Rows[row].Cells[3].Value = Convert.ToDecimal(user_p);
                    if (m_1.Orders.ContainsKey(order_key))
                    {
                        dataGridView2.Rows[row].Cells[4].Value = m_1.Orders[order_key].LimitPrice;
                    }
                    else if (m_1_a1.Orders.ContainsKey(order_key))
                    {
                        dataGridView2.Rows[row].Cells[4].Value = m_1_a1.Orders[order_key].LimitPrice;
                    }
                    else if (m_1_a2.Orders.ContainsKey(order_key))
                    {
                        dataGridView2.Rows[row].Cells[4].Value = m_1_a2.Orders[order_key].LimitPrice;
                    }
                    else
                    {
                        dataGridView2.Rows[row].Cells[4].Value = "-";
                    }
                    if (pause_1 == true)
                    {
                        dataGridView2.Rows[row].Cells[5].Value = "0";
                        dataGridView2.Rows[row].Cells[6].Value = qt + rel_1;
                    }
                    else
                    {
                        if (m_1.Orders.ContainsKey(order_key))
                        {
                            dataGridView2.Rows[row].Cells[5].Value = m_1.Orders[order_key].OrderQuantity;
                        }
                        else if (m_1_a1.Orders.ContainsKey(order_key))
                        {
                            dataGridView2.Rows[row].Cells[5].Value = m_1_a1.Orders[order_key].OrderQuantity;
                        }
                        else if (m_1_a2.Orders.ContainsKey(order_key))
                        {
                            dataGridView2.Rows[row].Cells[4].Value = m_1_a2.Orders[order_key].OrderQuantity;
                        }
                        else
                        {

                            dataGridView2.Rows[row].Cells[5].Value = "-";
                        }

                        dataGridView2.Rows[row].Cells[6].Value = qt;
                    }
                    dataGridView2.Rows[row].Cells[7].Value = fill_1;
                }
                catch (Exception ex)
                {
                    Log.Information(ex.ToString());
                    Log.Information(DateTime.Now.ToString());
                    button19.PerformClick();
                    Environment.Exit(509);
                }
            }
        }
       
        void m_priceSubscription_FieldsUpdated_jul24_aug24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    

                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0&&bid!=Price.Empty&&ask!=Price.Empty&&bidQty!=Quantity.Empty&&askQty!=Quantity.Empty)
                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);

                        if (allowed_1)
                        {


                            if (Convert.ToDecimal(final_price_1_b) != Convert.ToDecimal(Price_calculator_1_b(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1)) && buying_1 && first_1_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;

                                change_b = true;
                                final_price_1_b = Price_calculator_1_b(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1);

                            }
                            /* richTextBox1.AppendText(String.Format("{0}:{1}", first_1_s, Convert.ToDecimal(Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, sel*//*ling_1))));*/
                            if (selling_1 && first_1_s > 0 && Convert.ToDecimal(final_price_1_s) != Convert.ToDecimal(Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1)))
                            {
                                currentDateTime_start = DateTime.Now;
                                change_s = true;
                                final_price_1_s = Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1);
                                /*richTextBox1.AppendText(String.Format("{0}:{1}", currentDateTime_start));*/
                            }

                            if (first_1_b == 0)
                            {
                                final_price_1_b = Price_calculator_1_b(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1);
                            }
                            if (first_1_s == 0)
                            {
                                final_price_1_s = Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1);
                            }
                            if (buying_1 && final_price_1_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_1_b != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_1_b != Price.FromDecimal(instrument, Int64.MinValue) && final_price_1_b != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_1_b != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_b = true;

                                }
                                else
                                {
                                    if (vwap_jun_jul + 1 >= Convert.ToDecimal(final_price_1_b))
                                    {
                                        qouted_price_received_b = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying jun jul zero wali dikkat,{0},{1}", vwap_jun_jul, final_price_1_b);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(50);
                                    }
                                }

                            }
                            else if (buying_1)
                            {
                                Log.Information("Price  Galat aa rha buying jun jul,{0} ", final_price_1_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(51);
                            }
                            if (selling_1 && final_price_1_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_1_s != Price.FromDecimal(instrument, Int32.MinValue) && final_price_1_s != Price.FromDecimal(instrument, Int64.MaxValue) && final_price_1_s != Price.FromDecimal(instrument, Int64.MinValue))
                            {
                                if (final_price_1_s != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_s = true;

                                }
                                else
                                {
                                    if (vwap_jun_jul - 1 <= Convert.ToDecimal(final_price_1_s))
                                    {
                                        qouted_price_received_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling jun jul zero wali dikkat,{0}", vwap_jun_jul);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(52);
                                    }
                                }
                            }
                            else if (selling_1)
                            {
                                Log.Information("Price  Galat aa rha selling jun jul {0} ", final_price_1_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(53);
                            }
                            lock (ChangeBuyLock)
                            {
                                if (first_1_b > 0 && m_orderKey_b != "" && buying_1&&!new_reload_1_b)
                                {
                                    if (order_b_a1)
                                    {
                                        m_orderKey_b = PlaceOrder_buy(m_orderKey_b, qouted_price_received_b, final_price_1_b, qt1_b, change_b, instrument_1_a1, new_reload_1_b, rel_1_b, m_instrumentTradeSubscription_1_a1, vwap_jun_jul,fill_1_b,button5);

                                    }
                                    else if (order_b_a2)
                                    {
                                        m_orderKey_b = PlaceOrder_buy(m_orderKey_b, qouted_price_received_b, final_price_1_b, qt1_b, change_b, instrument_1_a2, new_reload_1_b, rel_1_b, m_instrumentTradeSubscription_1_a2, vwap_jun_jul, fill_1_b, button5);

                                    }
                                    else
                                    {

                                        m_orderKey_b = PlaceOrder_buy(m_orderKey_b, qouted_price_received_b, final_price_1_b, qt1_b, change_b, instrument_1, new_reload_1_b, rel_1_b, m_instrumentTradeSubscription_1, vwap_jun_jul, fill_1_b, button5);
                                    }
                                    change_b = false;
                                }
                            }
                            lock (ChangesellLock)
                            {
                                if (first_1_s > 0 && m_orderKey_s != "" && selling_1 && !new_reload_1_s)
                                {
                                    if (order_s_a1)
                                    {
                                        m_orderKey_s = PlaceOrder_sell(m_orderKey_s, qouted_price_received_s, final_price_1_s, qt1_s, change_s, instrument_1_a1, new_reload_1_s, rel_1_s, m_instrumentTradeSubscription_1_a1, vwap_jun_jul, fill_1_s, button6);

                                    }
                                    else if (order_s_a2)
                                    {
                                        m_orderKey_s = PlaceOrder_sell(m_orderKey_s, qouted_price_received_s, final_price_1_s, qt1_s, change_s, instrument_1_a2, new_reload_1_s, rel_1_s, m_instrumentTradeSubscription_1_a2, vwap_jun_jul, fill_1_s, button6);

                                    }
                                    else
                                    {


                                        m_orderKey_s = PlaceOrder_sell(m_orderKey_s, qouted_price_received_s, final_price_1_s, qt1_s, change_s, instrument_1, new_reload_1_s, rel_1_s, m_instrumentTradeSubscription_1, vwap_jun_jul, fill_1_s, button6);
                                    }
                                    change_s = false;
                                }
                            }
                        }
                        if (allowed_2)
                        {
                            if (Convert.ToDecimal(final_price_2_b) != Convert.ToDecimal(Price_calculator_2_b(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2)) && buying_2 && first_2_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_2_b = true;
                                final_price_2_b = Price_calculator_2_b(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2);
                            }
                            if (selling_2 && first_2_s > 0 && Convert.ToDecimal(final_price_2_s) != Convert.ToDecimal(Price_calculator_2_s(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2)))
                            {
                                currentDateTime_start = DateTime.Now;
                                change_2_s = true;
                                final_price_2_s = Price_calculator_2_s(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2);
                            }


                            if (first_2_b == 0)
                            {
                                final_price_2_b = Price_calculator_2_b(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2);

                            }
                            if (first_2_s == 0)
                            {
                                final_price_2_s = Price_calculator_2_s(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2);

                            }


                            if (buying_2 && final_price_2_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_2_b != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_2_b != Price.FromDecimal(instrument, Int64.MinValue) && final_price_2_b != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_2_b != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_2_b = true;


                                }
                                else
                                {
                                    if (vwap_jun_aug + 1 >= Convert.ToDecimal(final_price_2_b))
                                    {
                                        qouted_price_received_2_b = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying jun aug zero wali dikkat,{0}", vwap_jun_aug);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(54);
                                    }
                                }
                            }
                            else if (buying_2)
                            {
                                Log.Information("Price  Galat aa rha buying jun aug  ,{0}", final_price_2_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(55);
                            }
                            if (selling_2 && final_price_2_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_2_s != Price.FromDecimal(instrument, Int32.MinValue) && final_price_2_s != Price.FromDecimal(instrument, Int64.MaxValue) && final_price_2_s != Price.FromDecimal(instrument, Int64.MinValue))
                            {
                                if (final_price_2_s != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_2_s = true;

                                }
                                else
                                {
                                    if (vwap_jun_aug - 1 <= Convert.ToDecimal(final_price_2_s))
                                    {
                                        qouted_price_received_2_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling jun aug zero wali dikkat,{0}", vwap_jun_aug);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(56);
                                    }
                                }
                            }
                            else if (selling_2)
                            {
                                Log.Information("Price  Galat aa rha selling jun aug  ,{0}", final_price_2_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(57);
                            }
                            lock (ChangeBuy2Lock)
                            {
                                if (first_2_b > 0 && m_orderKey_1_b != "" && buying_2&&new_reload_2_b==false)
                                {
                                    if (order_1_b_a1)
                                    {
                                        m_orderKey_1_b = PlaceOrder_buy(m_orderKey_1_b, qouted_price_received_2_b, final_price_2_b, qt2_b, change_2_b, instrument_2_a1, new_reload_2_b, rel_2_b, m_instrumentTradeSubscription_2_a1, vwap_jun_aug, fill_2_b, button4);

                                    }
                                    else if (order_1_b_a2)
                                    {
                                        m_orderKey_1_b = PlaceOrder_buy(m_orderKey_1_b, qouted_price_received_2_b, final_price_2_b, qt2_b, change_2_b, instrument_2_a2, new_reload_2_b, rel_2_b, m_instrumentTradeSubscription_2_a2, vwap_jun_aug, fill_2_b, button4);

                                    }
                                    else
                                    {

                                        m_orderKey_1_b = PlaceOrder_buy(m_orderKey_1_b, qouted_price_received_2_b, final_price_2_b, qt2_b, change_2_b, instrument_2, new_reload_2_b, rel_2_b, m_instrumentTradeSubscription_2, vwap_jun_aug, fill_2_b, button4);
                                    }
                                    change_2_b = false;
                                }
                            }
                            lock (Changesell2Lock)
                            {
                                if (first_2_s > 0 && m_orderKey_1_s != "" && selling_2 && !new_reload_2_s)
                                {
                                    if (order_1_s_a1)
                                    {
                                        m_orderKey_1_s = PlaceOrder_sell(m_orderKey_1_s, qouted_price_received_2_s, final_price_2_s, qt2_s, change_2_s, instrument_2_a1, new_reload_2_s, rel_2_s, m_instrumentTradeSubscription_2_a1, vwap_jun_aug, fill_2_s, button3);


                                    }
                                    else if (order_1_s_a2)
                                    {
                                        m_orderKey_1_s = PlaceOrder_sell(m_orderKey_1_s, qouted_price_received_2_s, final_price_2_s, qt2_s, change_2_s, instrument_2_a2, new_reload_2_s, rel_2_s, m_instrumentTradeSubscription_2_a2, vwap_jun_aug, fill_2_s, button3);


                                    }
                                    else
                                    {
                                        m_orderKey_1_s = PlaceOrder_sell(m_orderKey_1_s, qouted_price_received_2_s, final_price_2_s, qt2_s, change_2_s, instrument_2, new_reload_2_s, rel_2_s, m_instrumentTradeSubscription_2, vwap_jun_aug, fill_2_s, button3);
                                    }
                                    change_2_s = false;
                                }
                            }


                        }
                    }
                    else
                    {
                        Log.Information("jul-aug price subscription wrong value");
                    }

                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(510);
            }
        }

        void m_priceSubscription_FieldsUpdated_jan24_feb24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);
                        if (allowed_3)
                        {

                            if (Convert.ToDecimal(final_price_3_b) != Convert.ToDecimal(Price_calculator_1_b(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3)) && buying_3 && first_3_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_3_b = true;
                                final_price_3_b = Price_calculator_1_b(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3);
                            }
                            if (selling_3 && first_3_s > 0 && Convert.ToDecimal(final_price_3_s) != Convert.ToDecimal(Price_calculator_1_s(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3)))
                            {
                                currentDateTime_start = DateTime.Now;
                                change_3_s = true;
                                final_price_3_s = Price_calculator_1_s(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3);
                            }
                            if (first_3_b == 0)
                            {
                                final_price_3_b = Price_calculator_1_b(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3);
                            }
                            if (first_3_s == 0)
                            {
                                final_price_3_s = Price_calculator_1_s(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3);
                            }


                            if (buying_3 && final_price_3_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_3_b != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_3_b != Price.FromDecimal(instrument, Int64.MinValue) && final_price_3_b != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_3_b != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_3_b = true;


                                }
                                else
                                {
                                    if (vwap_dec_jan + 1 >= Convert.ToDecimal(final_price_3_b))
                                    {

                                        qouted_price_received_3_b = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying dec jan zero wali dikkat,{0}", vwap_dec_jan);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(58);
                                    }
                                }

                            }
                            else if (buying_3)
                            {
                                Log.Information("Price  Galat aa rha buying dec jan,{0}", final_price_3_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(59);
                            }
                            if (selling_3 && final_price_3_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_3_s != Price.FromDecimal(instrument, Int32.MinValue) && final_price_3_s != Price.FromDecimal(instrument, Int64.MaxValue) && final_price_3_s != Price.FromDecimal(instrument, Int64.MinValue))
                            {
                                if (final_price_3_s != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_3_s = true;

                                }
                                else
                                {
                                    if (vwap_dec_jan - 1 <= Convert.ToDecimal(final_price_3_s))
                                    {

                                        qouted_price_received_3_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling dec jan zero wali dikkat,{0}", vwap_dec_jan);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(60);
                                    }
                                }
                            }
                            else if (selling_3)
                            {
                                Log.Information("Price  Galat aa rha selling dec jan ,{0}", final_price_3_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(61);
                            }
                            lock (ChangeBuy3Lock)
                            {
                                if (first_3_b > 0 && m_orderKey_3_b != "" && buying_3&&!new_reload_3_b)
                                {
                                    if (order_3_b_a1)
                                    {
                                        m_orderKey_3_b = PlaceOrder_buy(m_orderKey_3_b, qouted_price_received_3_b, final_price_3_b, qt3_b, change_3_b, instrument_3_a1, new_reload_3_b, rel_3_b, m_instrumentTradeSubscription_3_a1, vwap_dec_jan, fill_3_b, button31);

                                    }
                                    else if (order_3_b_a2)
                                    {
                                        m_orderKey_3_b = PlaceOrder_buy(m_orderKey_3_b, qouted_price_received_3_b, final_price_3_b, qt3_b, change_3_b, instrument_3_a2, new_reload_3_b, rel_3_b, m_instrumentTradeSubscription_3_a2, vwap_dec_jan, fill_3_b, button31);
                                    }
                                    else
                                    {
                                        m_orderKey_3_b = PlaceOrder_buy(m_orderKey_3_b, qouted_price_received_3_b, final_price_3_b, qt3_b, change_3_b, instrument_3, new_reload_3_b, rel_3_b, m_instrumentTradeSubscription_3, vwap_dec_jan ,fill_3_b, button31);
                                    }
                                    change_3_b = false;
                                }
                            }
                            lock (Changesell3Lock)
                            {
                                if (first_3_s > 0 && m_orderKey_3_s != "" && selling_3 && !new_reload_3_s)
                                {
                                    if (order_3_s_a1)
                                    {
                                        m_orderKey_3_s = PlaceOrder_sell(m_orderKey_3_s, qouted_price_received_3_s, final_price_3_s, qt3_s, change_3_s, instrument_3_a1, new_reload_3_s, rel_3_s, m_instrumentTradeSubscription_3_a1, vwap_dec_jan, fill_3_s, button29);

                                    }
                                    else if (order_3_s_a2)
                                    {
                                        m_orderKey_3_s = PlaceOrder_sell(m_orderKey_3_s, qouted_price_received_3_s, final_price_3_s, qt3_s, change_3_s, instrument_3_a2, new_reload_3_s, rel_3_s, m_instrumentTradeSubscription_3_a2, vwap_dec_jan,fill_3_s,button29);
                                    }
                                    else
                                    {
                                        m_orderKey_3_s = PlaceOrder_sell(m_orderKey_3_s, qouted_price_received_3_s, final_price_3_s, qt3_s, change_3_s, instrument_3, new_reload_3_s, rel_3_s, m_instrumentTradeSubscription_3, vwap_dec_jan, fill_3_s, button29);
                                    }
                                    change_3_s = false;
                                }
                            }
                        }
                        if (allowed_4)
                        {
                            if (Convert.ToDecimal(final_price_4_b) != Convert.ToDecimal(Price_calculator_2_b(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4)) && buying_4 && first_4_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_4_b = true;
                                final_price_4_b = Price_calculator_2_b(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4);

                            }
                            if (selling_4 && first_4_s > 0 && Convert.ToDecimal(final_price_4_s) != Convert.ToDecimal(Price_calculator_2_s(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4)))
                            {
                                currentDateTime_start = DateTime.Now;

                                change_4_s = true;
                                final_price_4_s = Price_calculator_2_s(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4);

                            }
                            if (first_4_b == 0)
                            {
                                final_price_4_b = Price_calculator_2_b(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4);
                            }
                            if (first_4_s == 0)
                            {
                                final_price_4_s = Price_calculator_2_s(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4);

                            }
                            if (buying_4 && final_price_4_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_4_b != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_4_b != Price.FromDecimal(instrument, Int64.MinValue) && final_price_4_b != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_4_b != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_4_b = true;

                                }
                                else
                                {
                                    if (vwap_dec_feb + 1 >= Convert.ToDecimal(final_price_4_b))
                                    {
                                        qouted_price_received_4_b = true;

                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying dec feb zero wali dikkat ,{0}", vwap_dec_feb);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(62);
                                    }


                                }



                            }
                            else if (buying_4)
                            {
                                Log.Information("Price  Galat aa rha buying dec feb  ,{0}", final_price_4_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(63);
                            }
                            if (selling_4 && final_price_4_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_4_s != Price.FromDecimal(instrument, Int32.MinValue) && final_price_4_s != Price.FromDecimal(instrument, Int64.MaxValue) && final_price_4_s != Price.FromDecimal(instrument, Int64.MinValue))
                            {
                                if (final_price_4_s != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_4_s = true;

                                }
                                else
                                {
                                    if (vwap_dec_feb - 1 <= Convert.ToDecimal(final_price_4_s))
                                    {


                                        qouted_price_received_4_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling dec feb zero wali dikkat  ,{0}", vwap_dec_feb);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(64);
                                    }
                                }
                            }
                            else if (selling_4)
                            {
                                Log.Information("Price  Galat aa rha selling dec feb  ,{0}", final_price_4_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(65);
                            }
                            lock (ChangeBuy4Lock)
                            {
                                if (first_4_b > 0 && m_orderKey_4_b != "" && buying_4 && !new_reload_4_b)
                                {
                                    if (order_4_b_a1)
                                    {
                                        m_orderKey_4_b = PlaceOrder_buy(m_orderKey_4_b, qouted_price_received_4_b, final_price_4_b, qt4_b, change_4_b, instrument_4_a1, new_reload_4_b, rel_4_b, m_instrumentTradeSubscription_4_a1, vwap_dec_feb, fill_4_b, button23);

                                    }
                                    else if (order_4_b_a2)
                                    {
                                        m_orderKey_4_b = PlaceOrder_buy(m_orderKey_4_b, qouted_price_received_4_b, final_price_4_b, qt4_b, change_4_b, instrument_4_a2, new_reload_4_b, rel_4_b, m_instrumentTradeSubscription_4_a2, vwap_dec_feb, fill_4_b, button23);
                                    }
                                    else
                                    {
                                        m_orderKey_4_b = PlaceOrder_buy(m_orderKey_4_b, qouted_price_received_4_b, final_price_4_b, qt4_b, change_4_b, instrument_4, new_reload_4_b, rel_4_b, m_instrumentTradeSubscription_4, vwap_dec_feb, fill_4_b, button23);
                                    }
                                    change_4_b = false;
                                }
                            }
                            lock (Changesell4Lock)
                            {
                                if (first_4_s > 0 && m_orderKey_4_s != "" && selling_4 && !new_reload_4_s)
                                {
                                    if (order_4_s_a1)
                                    {
                                        m_orderKey_4_s = PlaceOrder_sell(m_orderKey_4_s, qouted_price_received_4_s, final_price_4_s, qt4_s, change_4_s, instrument_4_a1, new_reload_4_s, rel_4_s, m_instrumentTradeSubscription_4_a1, vwap_dec_feb, fill_4_s, button27);

                                    }
                                    else if (order_4_s_a2)
                                    {
                                        m_orderKey_4_s = PlaceOrder_sell(m_orderKey_4_s, qouted_price_received_4_s, final_price_4_s, qt4_s, change_4_s, instrument_4_a2, new_reload_4_s, rel_4_s, m_instrumentTradeSubscription_4_a2, vwap_dec_feb, fill_4_s, button27);
                                    }
                                    else
                                    {
                                        m_orderKey_4_s = PlaceOrder_sell(m_orderKey_4_s, qouted_price_received_4_s, final_price_4_s, qt4_s, change_4_s, instrument_4, new_reload_4_s, rel_4_s, m_instrumentTradeSubscription_4, vwap_dec_feb, fill_4_s, button27);
                                    }
                                    change_4_s = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Log.Information("jan-feb price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(511);
            }
        }
        void m_priceSubscription_FieldsUpdated_apr24_may24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);
                        if (allowed_5)
                        {

                            if (Convert.ToDecimal(final_price_5_b) != Convert.ToDecimal(Price_calculator_1_b(buying_5, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_5_b, user_price_5_s, ratio_5, selling_5)) && buying_5 && first_5_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_5_b = true;
                                final_price_5_b = Price_calculator_1_b(buying_5, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_5_b, user_price_5_s, ratio_5, selling_5);
                            }
                            if (selling_5 && first_5_s > 0 && Convert.ToDecimal(final_price_5_s) != Convert.ToDecimal(Price_calculator_1_s(buying_5, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_5_b, user_price_5_s, ratio_5, selling_5)))
                            {
                                currentDateTime_start = DateTime.Now;
                                change_5_s = true;
                                final_price_5_s = Price_calculator_1_s(buying_5, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_5_b, user_price_5_s, ratio_5, selling_5);
                            }
                            if (first_5_b == 0)
                            {
                                final_price_5_b = Price_calculator_1_b(buying_5, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_5_b, user_price_5_s, ratio_5, selling_5);
                            }
                            if (first_5_s == 0)
                            {
                                final_price_5_s = Price_calculator_1_s(buying_5, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_5_b, user_price_5_s, ratio_5, selling_5);
                            }


                            if (buying_5 && final_price_5_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_5_b != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_5_b != Price.FromDecimal(instrument, Int64.MinValue) && final_price_5_b != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_5_b != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_5_b = true;


                                }
                                else
                                {
                                    if (vwap_mar_apr + 1 >= Convert.ToDecimal(final_price_5_b))
                                    {

                                        qouted_price_received_5_b = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying mar apr zero wali dikkat,{0}", vwap_mar_apr);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(80);
                                    }
                                }

                            }
                            else if (buying_5)
                            {
                                Log.Information("Price  Galat aa rha buying mar apr,{0}", final_price_5_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(81);
                            }
                            if (selling_5 && final_price_5_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_5_s != Price.FromDecimal(instrument, Int32.MinValue) && final_price_5_s != Price.FromDecimal(instrument, Int64.MaxValue) && final_price_5_s != Price.FromDecimal(instrument, Int64.MinValue))
                            {
                                if (final_price_5_s != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_5_s = true;

                                }
                                else
                                {
                                    if (vwap_mar_apr - 1 <= Convert.ToDecimal(final_price_5_s))
                                    {

                                        qouted_price_received_5_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling mar apr zero wali dikkat,{0}", vwap_mar_apr);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(82);
                                    }
                                }
                            }
                            else if (selling_5)
                            {
                                Log.Information("Price  Galat aa rha selling mar apr ,{0}", final_price_5_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(83);
                            }
                            lock (ChangeBuy5Lock)
                            {
                                if (first_5_b > 0 && m_orderKey_5_b != "" && buying_5 && !new_reload_5_b)
                                {
                                    if (order_5_b_a1)
                                    {
                                        m_orderKey_5_b = PlaceOrder_buy(m_orderKey_5_b, qouted_price_received_5_b, final_price_5_b, qt5_b, change_5_b, instrument_5_a1, new_reload_5_b, rel_5_b, m_instrumentTradeSubscription_5_a1, vwap_mar_apr,fill_5_b,button39);

                                    }
                                    else if (order_5_b_a2)
                                    {
                                        m_orderKey_5_b = PlaceOrder_buy(m_orderKey_5_b, qouted_price_received_5_b, final_price_5_b, qt5_b, change_5_b, instrument_5_a2, new_reload_5_b, rel_5_b, m_instrumentTradeSubscription_5_a2, vwap_mar_apr,fill_5_b, button39);
                                    }
                                    else
                                    {
                                        m_orderKey_5_b = PlaceOrder_buy(m_orderKey_5_b, qouted_price_received_5_b, final_price_5_b, qt5_b, change_5_b, instrument_5, new_reload_5_b, rel_5_b, m_instrumentTradeSubscription_5, vwap_mar_apr,fill_5_b, button39);
                                    }
                                    change_5_b = false;
                                }
                            }
                            lock (Changesell5Lock)
                            {
                                if (first_5_s > 0 && m_orderKey_5_s != "" && selling_5 && !new_reload_5_s)
                                {
                                    if (order_5_s_a1)
                                    {
                                        m_orderKey_5_s = PlaceOrder_sell(m_orderKey_5_s, qouted_price_received_5_s, final_price_5_s, qt5_s, change_5_s, instrument_5_a1, new_reload_5_s, rel_5_s, m_instrumentTradeSubscription_5_a1, vwap_mar_apr, fill_5_s, button37);

                                    }
                                    else if (order_5_s_a2)
                                    {
                                        m_orderKey_5_s = PlaceOrder_sell(m_orderKey_5_s, qouted_price_received_5_s, final_price_5_s, qt5_s, change_5_s, instrument_5_a2, new_reload_5_s, rel_5_s, m_instrumentTradeSubscription_5_a2, vwap_mar_apr, fill_5_s, button37);
                                    }
                                    else
                                    {
                                        m_orderKey_5_s = PlaceOrder_sell(m_orderKey_5_s, qouted_price_received_5_s, final_price_5_s, qt5_s, change_5_s, instrument_5, new_reload_5_s, rel_5_s, m_instrumentTradeSubscription_5, vwap_mar_apr, fill_5_s, button37);
                                    }
                                    change_5_s = false;
                                }
                            }
                        }
                        if (allowed_6)
                        {
                            if (Convert.ToDecimal(final_price_6_b) != Convert.ToDecimal(Price_calculator_2_b(buying_6, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_6_b, user_price_6_s, ratio_6, selling_6)) && buying_6 && first_6_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_6_b = true;
                                final_price_6_b = Price_calculator_2_b(buying_6, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_6_b, user_price_6_s, ratio_6, selling_6);

                            }
                            if (selling_6 && first_6_s > 0 && Convert.ToDecimal(final_price_6_s) != Convert.ToDecimal(Price_calculator_2_s(buying_6, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_6_b, user_price_6_s, ratio_6, selling_6)))
                            {
                                currentDateTime_start = DateTime.Now;

                                change_6_s = true;
                                final_price_6_s = Price_calculator_2_s(buying_6, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_6_b, user_price_6_s, ratio_6, selling_6);

                            }
                            if (first_6_b == 0)
                            {
                                final_price_6_b = Price_calculator_2_b(buying_6, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_6_b, user_price_6_s, ratio_6, selling_6);
                            }
                            if (first_6_s == 0)
                            {
                                final_price_6_s = Price_calculator_2_s(buying_6, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_6_b, user_price_6_s, ratio_6, selling_6);

                            }
                            if (buying_6 && final_price_6_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_6_b != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_6_b != Price.FromDecimal(instrument, Int64.MinValue) && final_price_6_b != Price.FromDecimal(instrument, Int64.MaxValue))
                            {
                                if (final_price_6_b != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_6_b = true;

                                }
                                else
                                {
                                    if (vwap_mar_may + 1 >= Convert.ToDecimal(final_price_6_b))
                                    {
                                        qouted_price_received_6_b = true;

                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying mar may zero wali dikkat ,{0}", vwap_mar_may);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(84);
                                    }


                                }



                            }
                            else if (buying_6)
                            {
                                Log.Information("Price  Galat aa rha buying mar may  ,{0}", final_price_6_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(85);
                            }
                            if (selling_6 && final_price_6_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_6_s != Price.FromDecimal(instrument, Int32.MinValue) && final_price_6_s != Price.FromDecimal(instrument, Int64.MaxValue) && final_price_6_s != Price.FromDecimal(instrument, Int64.MinValue))
                            {

                                if (final_price_6_s != Price.FromDecimal(instrument, 0))
                                {
                                    qouted_price_received_6_s = true;

                                }
                                else
                                {
                                    if (vwap_mar_may - 1 <= Convert.ToDecimal(final_price_6_s))
                                    {


                                        qouted_price_received_6_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling mar may zero wali dikkat  ,{0}", vwap_mar_may);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(86);
                                    }
                                }
                            }
                            else if (selling_6)
                            {
                                Log.Information("Price  Galat aa rha selling mar may ,{0}", final_price_6_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(87);
                            }
                            lock (ChangeBuy6Lock)
                            {

                                if (first_6_b > 0 && m_orderKey_6_b != "" && buying_6 && !new_reload_6_b)
                                {
                                    if (order_6_b_a1)
                                    {
                                        m_orderKey_6_b = PlaceOrder_buy(m_orderKey_6_b, qouted_price_received_6_b, final_price_6_b, qt6_b, change_6_b, instrument_6_a1, new_reload_6_b, rel_6_b, m_instrumentTradeSubscription_6_a1, vwap_mar_may, fill_6_b, button47);

                                    }
                                    else if (order_6_b_a2)
                                    {
                                        m_orderKey_6_b = PlaceOrder_buy(m_orderKey_6_b, qouted_price_received_6_b, final_price_6_b, qt6_b, change_6_b, instrument_6_a2, new_reload_6_b, rel_6_b, m_instrumentTradeSubscription_6_a2, vwap_mar_may,fill_6_b, button47);

                                    }
                                    else
                                    {
                                        m_orderKey_6_b = PlaceOrder_buy(m_orderKey_6_b, qouted_price_received_6_b, final_price_6_b, qt6_b, change_6_b, instrument_6, new_reload_6_b, rel_6_b, m_instrumentTradeSubscription_6, vwap_mar_may, fill_6_b, button47);

                                    }
                                    change_6_b = false;
                                }
                            }
                            lock (Changesell6Lock)
                            {
                                if (first_6_s > 0 && m_orderKey_6_s != "" && selling_6 && !new_reload_6_s)
                                {
                                    if (order_6_s_a1)
                                    {
                                        m_orderKey_6_s = PlaceOrder_sell(m_orderKey_6_s, qouted_price_received_6_s, final_price_6_s, qt6_s, change_6_s, instrument_6_a1, new_reload_6_s, rel_6_s, m_instrumentTradeSubscription_6_a1, vwap_mar_may,fill_6_s,button45);

                                    }
                                    else if (order_6_s_a2)
                                    {
                                        m_orderKey_6_s = PlaceOrder_sell(m_orderKey_6_s, qouted_price_received_6_s, final_price_6_s, qt6_s, change_6_s, instrument_6_a2, new_reload_6_s, rel_6_s, m_instrumentTradeSubscription_6_a2, vwap_mar_may,fill_6_s,button45);
                                    }
                                    else
                                    {
                                        m_orderKey_6_s = PlaceOrder_sell(m_orderKey_6_s, qouted_price_received_6_s, final_price_6_s, qt6_s, change_6_s, instrument_6, new_reload_6_s, rel_6_s, m_instrumentTradeSubscription_6, vwap_mar_may,fill_6_s,button45);
                                    }
                                    change_6_s = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Log.Information("apr-may price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(88);
            }
        }
        void m_priceSubscription_FieldsUpdated_jul24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);
                        if (buying_i && qouted_price_received_b)
                        {
                            if (final_price_i_b != Price.FromDecimal(instrument_i, Price_calaculator_sr1_zq_b(final_price_1_b, bid, ask, bidQty, askQty, ratio_i)) && first_i_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                final_price_i_b = Price.FromDecimal(instrument_i, Price_calaculator_sr1_zq_b(final_price_1_b, bid, ask, bidQty, askQty, ratio_i));
                                change_i_b = true;
                                
                            }
                            if (first_i_b == 0)
                            {
                                final_price_i_b = Price.FromDecimal(instrument_i, Price_calaculator_sr1_zq_b(final_price_1_b, bid, ask, bidQty, askQty, ratio_i));
                               

                            }
                            if (final_price_i_b != Price.FromDecimal(instrument_i, Int32.MinValue) && final_price_i_b != Price.FromDecimal(instrument_i, Int32.MaxValue) && final_price_i_b != Price.FromDecimal(instrument_i, Int64.MinValue) && final_price_i_b != Price.FromDecimal(instrument_i, Int64.MaxValue))
                            {
                                if (final_price_i_b != Price.FromDecimal(instrument_i, 0))
                                {
                                    qouted_price_received_i_b = true;
                                }
                                else
                                {
                                    if (vwap_jun_jul_i + 1 >= Convert.ToDecimal(final_price_i_b))
                                    {

                                        qouted_price_received_i_b = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying sr3 zq jun-jul zero wali ,{0}", vwap_jun_jul_i);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(66);
                                    }
                                }

                            }
                            else
                            {
                                Log.Information("Price  Galat aa rha buying sr3 zq jun-jul  ,{0},{1}", vwap_jun_jul_i, final_price_i_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(67);
                            }
                            lock (ChangeBuyLock_i)
                            {
                                if (first_i_b > 0 && m_orderKey_i_b != "" && !new_reload_i_b)
                                {
                                    if (order_i_b_a1)
                                    {
                                        m_orderKey_i_b = PlaceOrder_buy(m_orderKey_i_b, qouted_price_received_i_b, final_price_i_b, qti_b, change_i_b, instrument_i_a1, new_reload_i_b, rel_i_b, m_instrumentTradeSubscription_i_a1, vwap_jun_jul_i,fill_i_b,button5);

                                    }
                                    else if (order_i_b_a2)
                                    {
                                        m_orderKey_i_b = PlaceOrder_buy(m_orderKey_i_b, qouted_price_received_i_b, final_price_i_b, qti_b, change_i_b, instrument_i_a2, new_reload_i_b, rel_i_b, m_instrumentTradeSubscription_i_a2, vwap_jun_jul_i, fill_i_b, button5);

                                    }
                                    else
                                    {

                                        m_orderKey_i_b = PlaceOrder_buy(m_orderKey_i_b, qouted_price_received_i_b, final_price_i_b, qti_b, change_i_b, instrument_i, new_reload_i_b, rel_i_b, m_instrumentTradeSubscription_i, vwap_jun_jul_i, fill_i_b, button5);
                                    }
                                    change_i_b = false;
                                }
                            }
                        }
                        if (selling_i && qouted_price_received_s)
                        {
                            if (final_price_i_s != Price.FromDecimal(instrument_i, Price_calaculator_sr1_zq_s(final_price_1_s, bid, ask, bidQty, askQty, ratio_i)) && first_i_s > 0)
                            {
                                final_price_i_s = Price.FromDecimal(instrument_i, Price_calaculator_sr1_zq_s(final_price_1_s, bid, ask, bidQty, askQty, ratio_i));
                                change_i_s = true;
                                currentDateTime_start = DateTime.Now;
                            }
                            if (first_i_s == 0)
                            {
                                final_price_i_s = Price.FromDecimal(instrument_i, Price_calaculator_sr1_zq_s(final_price_1_s, bid, ask, bidQty, askQty, ratio_i));

                            }
                            if (final_price_i_s != Price.FromDecimal(instrument_i, Int32.MinValue) && final_price_i_s != Price.FromDecimal(instrument_i, Int32.MaxValue) && final_price_i_s != Price.FromDecimal(instrument_i, Int64.MinValue) && final_price_i_s != Price.FromDecimal(instrument_i, Int64.MaxValue))
                            {
                                if (final_price_i_s != Price.FromDecimal(instrument_i, 0))
                                {
                                    qouted_price_received_i_s = true;
                                }
                                else
                                {
                                    if (vwap_jun_jul_i - 1 <= Convert.ToDecimal(final_price_i_s))
                                    {
                                        qouted_price_received_i_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling sr3 zq jun-jul zero wala ,{0}", vwap_jun_jul_i);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(79);
                                    }
                                }
                            }
                            else
                            {
                                Log.Information("Price  Galat aa rha selling sr3 zq jun-jul  ,{0},{1}", vwap_jun_jul_i, final_price_i_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(68);
                            }
                            lock (ChangesellLock_i)
                            {
                                if (first_i_s > 0 && m_orderKey_i_s != "" && !new_reload_i_s)
                                {
                                    if (order_i_s_a1)
                                    {
                                        m_orderKey_i_s = PlaceOrder_sell(m_orderKey_i_s, qouted_price_received_i_s, final_price_i_s, qti_s, change_i_s, instrument_i_a1, new_reload_i_s, rel_i_s, m_instrumentTradeSubscription_i_a1, vwap_jun_jul_i, fill_i_s, button6);
                                    }
                                    else if (order_i_s_a2)
                                    {
                                        m_orderKey_i_s = PlaceOrder_sell(m_orderKey_i_s, qouted_price_received_i_s, final_price_i_s, qti_s, change_i_s, instrument_i_a2, new_reload_i_s, rel_i_s, m_instrumentTradeSubscription_i_a2, vwap_jun_jul_i,fill_i_s, button6);

                                    }
                                    else
                                    {

                                        m_orderKey_i_s = PlaceOrder_sell(m_orderKey_i_s, qouted_price_received_i_s, final_price_i_s, qti_s, change_i_s, instrument_i, new_reload_i_s, rel_i_s, m_instrumentTradeSubscription_i, vwap_jun_jul_i, fill_i_s, button6);
                                    }
                                    change_i_s = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Log.Information("jul price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(512);
            }
        }

        void m_priceSubscription_FieldsUpdated_aug24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);

                        if (buying_ii && qouted_price_received_2_b)
                    {
                        if (final_price_ii_b != Price.FromDecimal(instrument_ii, Price_calaculator_sr1_zq_b(final_price_2_b, bid, ask, bidQty, askQty, ratio_ii)) && first_ii_b > 0)
                        {
                            final_price_ii_b = Price.FromDecimal(instrument_ii, Price_calaculator_sr1_zq_b(final_price_2_b, bid, ask, bidQty, askQty, ratio_ii));
                            change_ii_b = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_ii_b == 0)
                        {
                            final_price_ii_b = Price.FromDecimal(instrument_ii, Price_calaculator_sr1_zq_b(final_price_2_b, bid, ask, bidQty, askQty, ratio_ii));

                        }
                        if (final_price_ii_b != Price.FromDecimal(instrument_ii, Int32.MinValue) && final_price_ii_b != Price.FromDecimal(instrument_ii, Int32.MaxValue) && final_price_ii_b != Price.FromDecimal(instrument_ii, Int64.MinValue) && final_price_ii_b != Price.FromDecimal(instrument_ii, Int64.MaxValue))
                        {
                            if (final_price_ii_b != Price.FromDecimal(instrument_ii, 0))
                            {
                                qouted_price_received_ii_b = true;
                            }
                            else
                            {
                                if (vwap_jun_aug_i + 1 >= Convert.ToDecimal(final_price_ii_b))
                                {
                                    qouted_price_received_ii_b = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha selling sr3 zq jun-aug zero wali dikkat  ,{0}", vwap_jun_aug_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(69);
                                }
                            }

                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha selling sr3 zq jun-aug  ,{0}", final_price_ii_b);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(70);
                        }
                        lock (ChangeBuyLock_ii)
                        {
                            if (first_ii_b > 0 && m_orderKey_ii_b != "" && !new_reload_ii_b)
                            {
                                if (order_ii_b_a1)
                                {
                                    m_orderKey_ii_b = PlaceOrder_buy(m_orderKey_ii_b, qouted_price_received_ii_b, final_price_ii_b, qtii_b, change_ii_b, instrument_ii_a1, new_reload_ii_b, rel_ii_b, m_instrumentTradeSubscription_ii_a1, vwap_jun_aug_i,fill_ii_b, button4);

                                    }
                                else if (order_ii_b_a2)
                                {
                                    m_orderKey_ii_b = PlaceOrder_buy(m_orderKey_ii_b, qouted_price_received_ii_b, final_price_ii_b, qtii_b, change_ii_b, instrument_ii_a2, new_reload_ii_b, rel_ii_b, m_instrumentTradeSubscription_ii_a2, vwap_jun_aug_i, fill_ii_b, button4);

                                    }
                                else
                                {

                                    m_orderKey_ii_b = PlaceOrder_buy(m_orderKey_ii_b, qouted_price_received_ii_b, final_price_ii_b, qtii_b, change_ii_b, instrument_ii, new_reload_ii_b, rel_ii_b, m_instrumentTradeSubscription_ii, vwap_jun_aug_i, fill_ii_b, button4);
                                    }
                                change_ii_b = false;
                            }
                        }
                    }
                    if (selling_ii && qouted_price_received_2_s)
                    {
                        if (final_price_ii_s != Price.FromDecimal(instrument_ii, Price_calaculator_sr1_zq_s(final_price_2_s, bid, ask, bidQty, askQty, ratio_ii)) && first_ii_s > 0)
                        {
                            final_price_ii_s = Price.FromDecimal(instrument_ii, Price_calaculator_sr1_zq_s(final_price_2_s, bid, ask, bidQty, askQty, ratio_ii));
                            change_ii_s = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_ii_s == 0)
                        {
                            final_price_ii_s = Price.FromDecimal(instrument_ii, Price_calaculator_sr1_zq_s(final_price_2_s, bid, ask, bidQty, askQty, ratio_ii));

                        }
                        if (final_price_ii_s != Price.FromDecimal(instrument_ii, Int32.MinValue) && final_price_ii_s != Price.FromDecimal(instrument_ii, Int32.MaxValue) && final_price_ii_s != Price.FromDecimal(instrument_ii, Int64.MinValue) && final_price_ii_s != Price.FromDecimal(instrument_ii, Int64.MaxValue))
                        {
                            if (final_price_ii_s != Price.FromDecimal(instrument_ii, 0))
                            {
                                qouted_price_received_ii_s = true;
                            }
                            else
                            {
                                if (vwap_jun_aug_i - 1 <= Convert.ToDecimal(final_price_ii_s))
                                {
                                    qouted_price_received_ii_s = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha selling sr3 zq jun-aug zero wali dikkat  ,{0}", vwap_jun_aug_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(71);
                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha selling sr3 zq jun-aug  ,{0}", final_price_ii_s);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(72);
                        }
                        lock (ChangesellLock_ii)
                        {
                            if (first_ii_s > 0 && m_orderKey_ii_s != "" && !new_reload_ii_s)
                            {
                                if (order_ii_s_a1)
                                {
                                    m_orderKey_ii_s = PlaceOrder_sell(m_orderKey_ii_s, qouted_price_received_ii_s, final_price_ii_s, qtii_s, change_ii_s, instrument_ii_a1, new_reload_ii_s, rel_ii_s, m_instrumentTradeSubscription_ii_a1, vwap_jun_aug_i,fill_ii_s,button3);

                                }
                                else if (order_ii_s_a2)
                                {
                                    m_orderKey_ii_s = PlaceOrder_sell(m_orderKey_ii_s, qouted_price_received_ii_s, final_price_ii_s, qtii_s, change_ii_s, instrument_ii_a2, new_reload_ii_s, rel_ii_s, m_instrumentTradeSubscription_ii_a2, vwap_jun_aug_i,fill_ii_s, button3);

                                    }
                                else
                                {

                                    m_orderKey_ii_s = PlaceOrder_sell(m_orderKey_ii_s, qouted_price_received_ii_s, final_price_ii_s, qtii_s, change_ii_s, instrument_ii, new_reload_ii_s, rel_ii_s, m_instrumentTradeSubscription_ii, vwap_jun_aug_i,fill_ii_s, button3);
                                    }
                                change_ii_s = false;
                            }
                        }
                    }
                    }
                    else
                    {
                        Log.Information("Aug price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(513);
            }
        }
        void m_priceSubscription_FieldsUpdated_jan24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);
                    if (buying_iii && qouted_price_received_3_b)
                    {
                        if (final_price_iii_b != Price.FromDecimal(instrument_iii, Price_calaculator_sr1_zq_b(final_price_3_b, bid, ask, bidQty, askQty, ratio_iii)) && first_iii_b > 0)
                        {
                            final_price_iii_b = Price.FromDecimal(instrument_iii, Price_calaculator_sr1_zq_b(final_price_3_b, bid, ask, bidQty, askQty, ratio_iii));
                            change_iii_b = true;
                        
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_iii_b == 0)
                        {
                            final_price_iii_b = Price.FromDecimal(instrument_iii, Price_calaculator_sr1_zq_b(final_price_3_b, bid, ask, bidQty, askQty, ratio_iii));

                        }
                        if (final_price_iii_b != Price.FromDecimal(instrument_iii, Int32.MinValue) && final_price_iii_b != Price.FromDecimal(instrument_iii, Int32.MaxValue) && final_price_iii_b != Price.FromDecimal(instrument_iii, Int64.MinValue) && final_price_iii_b != Price.FromDecimal(instrument_iii, Int64.MaxValue))
                        {
                            if (final_price_iii_b != Price.FromDecimal(instrument_iii, 0))
                            {
                                qouted_price_received_iii_b = true;
                            }
                            else
                            {
                                if (vwap_dec_jan_i + 1 >= Convert.ToDecimal(final_price_iii_b))
                                {
                                    qouted_price_received_iii_b = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha buying sr3 zq dec-jan zero wali dikkat ,{0}", vwap_dec_jan_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(73);
                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha buying sr3 zq dec-jan  ,{0}", final_price_iii_b);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(74);
                        }
                        lock (ChangeBuyLock_iii)
                        {
                            if (first_iii_b > 0 && m_orderKey_iii_b != "" && !new_reload_iii_b)
                            {
                                if (order_iii_b_a1)
                                {
                                    m_orderKey_iii_b = PlaceOrder_buy(m_orderKey_iii_b, qouted_price_received_iii_b, final_price_iii_b, qtiii_b, change_iii_b, instrument_iii_a1, new_reload_iii_b, rel_iii_b, m_instrumentTradeSubscription_iii_a1, vwap_dec_jan_i,fill_iii_b,button31);

                                }
                                else if (order_iii_b_a2)
                                {
                                    m_orderKey_iii_b = PlaceOrder_buy(m_orderKey_iii_b, qouted_price_received_iii_b, final_price_iii_b, qtiii_b, change_iii_b, instrument_iii_a2, new_reload_iii_b, rel_iii_b, m_instrumentTradeSubscription_iii_a2, vwap_dec_jan_i, fill_iii_b, button31);

                                    }
                                else
                                {

                                    m_orderKey_iii_b = PlaceOrder_buy(m_orderKey_iii_b, qouted_price_received_iii_b, final_price_iii_b, qtiii_b, change_iii_b, instrument_iii, new_reload_iii_b, rel_iii_b, m_instrumentTradeSubscription_iii, vwap_dec_jan_i, fill_iii_b, button31);
                                    }
                                change_iii_b = false;
                            }
                        }
                    }
                    if (selling_iii && qouted_price_received_3_s)
                    {
                        if (final_price_iii_s != Price.FromDecimal(instrument_iii, Price_calaculator_sr1_zq_s(final_price_3_s, bid, ask, bidQty, askQty, ratio_iii)) && first_iii_s > 0)
                        {
                            final_price_iii_s = Price.FromDecimal(instrument_iii, Price_calaculator_sr1_zq_s(final_price_3_s, bid, ask, bidQty, askQty, ratio_iii));
                            change_iii_s = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_iii_s == 0)
                        {
                            final_price_iii_s = Price.FromDecimal(instrument_iii, Price_calaculator_sr1_zq_s(final_price_3_s, bid, ask, bidQty, askQty, ratio_iii));

                        }
                        if (final_price_iii_s != Price.FromDecimal(instrument_iii, Int32.MinValue) && final_price_iii_s != Price.FromDecimal(instrument_iii, Int32.MaxValue) && final_price_iii_s != Price.FromDecimal(instrument_iii, Int64.MinValue) && final_price_iii_s != Price.FromDecimal(instrument_iii, Int64.MaxValue))
                        {
                            if (final_price_iii_s != Price.FromDecimal(instrument_iii, 0))
                            {
                                qouted_price_received_iii_s = true;
                            }
                            else
                            {
                                if (vwap_dec_jan_i - 1 <= Convert.ToDecimal(final_price_iii_s))
                                {
                                    qouted_price_received_iii_s = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha selling sr3 zq dec-jan zero wali dikkat ,{0}", vwap_dec_jan_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(75);
                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha selling sr3 zq dec-jan  ,{0}", final_price_iii_s);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(76);
                        }
                        lock (ChangesellLock_iii)
                        {
                            if (first_iii_s > 0 && m_orderKey_iii_s != "" && !new_reload_iii_s)
                            {
                                if (order_iii_s_a1)
                                {
                                    m_orderKey_iii_s = PlaceOrder_sell(m_orderKey_iii_s, qouted_price_received_iii_s, final_price_iii_s, qtiii_s, change_iii_s, instrument_iii_a1, new_reload_iii_s, rel_iii_s, m_instrumentTradeSubscription_iii_a1, vwap_dec_jan_i,fill_iii_s, button29);

                                    }
                                else if (order_iii_s_a2)
                                {
                                    m_orderKey_iii_s = PlaceOrder_sell(m_orderKey_iii_s, qouted_price_received_iii_s, final_price_iii_s, qtiii_s, change_iii_s, instrument_iii_a2, new_reload_iii_s, rel_iii_s, m_instrumentTradeSubscription_iii_a2, vwap_dec_jan_i, fill_iii_s, button29);

                                    }
                                else
                                {

                                    m_orderKey_iii_s = PlaceOrder_sell(m_orderKey_iii_s, qouted_price_received_iii_s, final_price_iii_s, qtiii_s, change_iii_s, instrument_iii, new_reload_iii_s, rel_iii_s, m_instrumentTradeSubscription_iii, vwap_dec_jan_i, fill_iii_s, button29);
                                    }
                                change_iii_s = false;
                            }
                        }
                    }
                    }
                    else
                    {
                        Log.Information("jan price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(514);
            }
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            Log.Information("In form closing");
          
                Dispose();
                    }

       

        void m_priceSubscription_FieldsUpdated_feb24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);



                    if (buying_iv && qouted_price_received_4_b)
                    {
                        if (final_price_iv_b != Price.FromDecimal(instrument_iv, Price_calaculator_sr1_zq_b(final_price_4_b, bid, ask, bidQty, askQty, ratio_iv)) && first_iv_b > 0)
                        {
                            final_price_iv_b = Price.FromDecimal(instrument_iv, Price_calaculator_sr1_zq_b(final_price_4_b, bid, ask, bidQty, askQty, ratio_iv));
                            change_iv_b = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_iv_b == 0)
                        {
                            final_price_iv_b = Price.FromDecimal(instrument_iv, Price_calaculator_sr1_zq_b(final_price_4_b, bid, ask, bidQty, askQty, ratio_iv));

                        }
                        if (final_price_iv_b != Price.FromDecimal(instrument_iv, Int32.MinValue) && final_price_iv_b != Price.FromDecimal(instrument_iv, Int32.MaxValue) && final_price_iv_b != Price.FromDecimal(instrument_iv, Int64.MinValue) && final_price_iv_b != Price.FromDecimal(instrument_iv, Int64.MaxValue))
                        {
                            if (final_price_iv_b != Price.FromDecimal(instrument_iv, 0))
                            {
                                qouted_price_received_iv_b = true;
                            }
                            else
                            {
                                if (vwap_dec_feb_i + 1 >= Convert.ToDecimal(final_price_iv_b))
                                {
                                    qouted_price_received_iv_b = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha buying sr3 zq dec-feb zero wali dikkat ,{0}", vwap_dec_feb_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(77);
                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha buying sr3 zq dec-feb zero wali dikkat ,{0}", final_price_iv_b);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(78);
                        }
                        lock (ChangeBuyLock_iv)
                        {
                            if (first_iv_b > 0 && m_orderKey_iv_b != "" && !new_reload_iv_b)
                            {
                                if (order_iv_b_a1)
                                {
                                    m_orderKey_iv_b = PlaceOrder_buy(m_orderKey_iv_b, qouted_price_received_iv_b, final_price_iv_b, qtiv_b, change_iv_b, instrument_iv_a1, new_reload_iv_b, rel_iv_b, m_instrumentTradeSubscription_iv_a1, vwap_dec_feb_i, fill_iv_b, button23);

                                    }
                                else if (order_iv_b_a2)
                                {
                                    m_orderKey_iv_b = PlaceOrder_buy(m_orderKey_iv_b, qouted_price_received_iv_b, final_price_iv_b, qtiv_b, change_iv_b, instrument_iv_a2, new_reload_iv_b, rel_iv_b, m_instrumentTradeSubscription_iv_a2, vwap_dec_feb_i, fill_iv_b, button23);

                                    }
                                else
                                {

                                    m_orderKey_iv_b = PlaceOrder_buy(m_orderKey_iv_b, qouted_price_received_iv_b, final_price_iv_b, qtiv_b, change_iv_b, instrument_iv, new_reload_iv_b, rel_iv_b, m_instrumentTradeSubscription_iv, vwap_dec_feb_i, fill_iv_b, button23);
                                    }
                                change_iv_b = false;
                            }
                        }
                    }
                    if (selling_iv && qouted_price_received_4_s)
                    {
                        if (final_price_iv_s != Price.FromDecimal(instrument_iv, Price_calaculator_sr1_zq_s(final_price_4_s, bid, ask, bidQty, askQty, ratio_iv)) && first_iv_s > 0)
                        {
                            final_price_iv_s = Price.FromDecimal(instrument_iv, Price_calaculator_sr1_zq_s(final_price_4_s, bid, ask, bidQty, askQty, ratio_iv));
                            change_iv_s = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_iv_s == 0)
                        {
                            final_price_iv_s = Price.FromDecimal(instrument_iv, Price_calaculator_sr1_zq_s(final_price_4_s, bid, ask, bidQty, askQty, ratio_iv));

                        }
                        if (final_price_iv_s != Price.FromDecimal(instrument_iv, Int32.MinValue) && final_price_iv_s != Price.FromDecimal(instrument_iv, Int32.MaxValue) && final_price_iv_s != Price.FromDecimal(instrument_iv, Int64.MinValue) && final_price_iv_s != Price.FromDecimal(instrument_iv, Int64.MaxValue))
                        {
                            if (final_price_iv_s != Price.FromDecimal(instrument_iv, 0))
                            {
                                qouted_price_received_iv_s = true;
                            }
                            else
                            {
                                if (vwap_dec_feb_i - 1 <= Convert.ToDecimal(final_price_iv_s))
                                {
                                    qouted_price_received_iv_s = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha selling sr3 zq dec-feb zero wali dikkat ,{0}", vwap_dec_feb_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(196); 

                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha selling sr3 zq dec-feb  ,{0}", final_price_iv_s);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(197);
                        }
                        lock (ChangesellLock_iv)
                        {
                            if (first_iv_s > 0 && m_orderKey_iv_s != "" && !new_reload_iv_s)
                            {
                                if (order_iv_s_a1)
                                {
                                    m_orderKey_iv_s = PlaceOrder_sell(m_orderKey_iv_s, qouted_price_received_iv_s, final_price_iv_s, qtiv_s, change_iv_s, instrument_iv_a1, new_reload_iv_s, rel_iv_s, m_instrumentTradeSubscription_iv_a1, vwap_dec_feb_i, fill_iv_s, button27);

                                    }
                                else if (order_iv_s_a2)
                                {
                                    m_orderKey_iv_s = PlaceOrder_sell(m_orderKey_iv_s, qouted_price_received_iv_s, final_price_iv_s, qtiv_s, change_iv_s, instrument_iv_a2, new_reload_iv_s, rel_iv_s, m_instrumentTradeSubscription_iv_a2, vwap_dec_feb_i, fill_iv_s, button27);

                                    }
                                else
                                {

                                    m_orderKey_iv_s = PlaceOrder_sell(m_orderKey_iv_s, qouted_price_received_iv_s, final_price_iv_s, qtiv_s, change_iv_s, instrument_iv, new_reload_iv_s, rel_iv_s, m_instrumentTradeSubscription_iv, vwap_dec_feb_i, fill_iv_s, button27);
                                    }
                                change_iv_s = false;
                            }
                        }
                    }
                    }
                    else
                    {
                        Log.Information("feb price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(515);
            }
        }
        void m_priceSubscription_FieldsUpdated_apr24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                   
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);

                        if (buying_v && qouted_price_received_5_b)
                        {
                            if (final_price_v_b != Price.FromDecimal(instrument_v, Price_calaculator_sr1_zq_b(final_price_5_b, bid, ask, bidQty, askQty, ratio_v)) && first_v_b > 0)
                            {
                                final_price_v_b = Price.FromDecimal(instrument_v, Price_calaculator_sr1_zq_b(final_price_5_b, bid, ask, bidQty, askQty, ratio_v));
                                change_v_b = true;
                               /* richTextBox1.AppendText(String.Format("\n ye wala {0}", final_price_v_b));*/
                                currentDateTime_start = DateTime.Now;
                            }
                            if (first_v_b == 0)
                            {
                                final_price_v_b = Price.FromDecimal(instrument_v, Price_calaculator_sr1_zq_b(final_price_5_b, bid, ask, bidQty, askQty, ratio_v));

                            }
                            if (final_price_v_b != Price.FromDecimal(instrument_v, Int32.MinValue) && final_price_v_b != Price.FromDecimal(instrument_v, Int32.MaxValue) && final_price_v_b != Price.FromDecimal(instrument_v, Int64.MinValue) && final_price_v_b != Price.FromDecimal(instrument_v, Int64.MaxValue))
                            {
                                if (final_price_v_b != Price.FromDecimal(instrument_v, 0))
                                {
                                    qouted_price_received_v_b = true;
                                }
                                else
                                {
                                    if (vwap_mar_apr_i + 1 >= Convert.ToDecimal(final_price_v_b))
                                    {
                                        qouted_price_received_v_b = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha buying sr3 zq mar-apr zero wali dikkat ,{0}", vwap_mar_apr_i);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(89);
                                    }
                                }
                            }
                            else
                            {
                                Log.Information("Price  Galat aa rha buying sr3 zq mar-apr  ,{0}", final_price_v_b);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(90);
                            }
                            lock (ChangeBuyLock_v)
                            {
                                if (first_v_b > 0 && m_orderKey_v_b != "" && !new_reload_v_b)
                                {
                                    if (order_v_b_a1)
                                    {
                                        m_orderKey_v_b = PlaceOrder_buy(m_orderKey_v_b, qouted_price_received_v_b, final_price_v_b, qtv_b, change_v_b, instrument_v_a1, new_reload_v_b, rel_v_b, m_instrumentTradeSubscription_v_a1, vwap_mar_apr_i, fill_v_b, button39);

                                    }
                                    else if (order_v_b_a2)
                                    {
                                        m_orderKey_v_b = PlaceOrder_buy(m_orderKey_v_b, qouted_price_received_v_b, final_price_v_b, qtv_b, change_v_b, instrument_v_a2, new_reload_v_b, rel_v_b, m_instrumentTradeSubscription_v_a2, vwap_mar_apr_i, fill_v_b, button39);

                                    }
                                    else
                                    {

                                        m_orderKey_v_b = PlaceOrder_buy(m_orderKey_v_b, qouted_price_received_v_b, final_price_v_b, qtv_b, change_v_b, instrument_v, new_reload_v_b, rel_v_b, m_instrumentTradeSubscription_v, vwap_mar_apr_i, fill_v_b, button39);
                                    }
                                    change_v_b = false;
                                }
                            }
                        }
                        if (selling_v && qouted_price_received_5_s)
                        {
                            if (final_price_v_s != Price.FromDecimal(instrument_v, Price_calaculator_sr1_zq_s(final_price_5_s, bid, ask, bidQty, askQty, ratio_v)) && first_v_s > 0)
                            {
                                final_price_v_s = Price.FromDecimal(instrument_v, Price_calaculator_sr1_zq_s(final_price_5_s, bid, ask, bidQty, askQty, ratio_v));
                                change_v_s = true;
                                currentDateTime_start = DateTime.Now;
                            }
                            if (first_v_s == 0)
                            {
                                final_price_v_s = Price.FromDecimal(instrument_v, Price_calaculator_sr1_zq_s(final_price_5_s, bid, ask, bidQty, askQty, ratio_v));

                            }
                            if (final_price_v_s != Price.FromDecimal(instrument_v, Int32.MinValue) && final_price_v_s != Price.FromDecimal(instrument_v, Int32.MaxValue) && final_price_v_s != Price.FromDecimal(instrument_v, Int64.MinValue) && final_price_v_s != Price.FromDecimal(instrument_v, Int64.MaxValue))
                            {
                                if (final_price_v_s != Price.FromDecimal(instrument_v, 0))
                                {
                                    qouted_price_received_v_s = true;
                                }
                                else
                                {
                                    if (vwap_mar_apr_i - 1 <= Convert.ToDecimal(final_price_v_s))
                                    {
                                        qouted_price_received_v_s = true;
                                    }
                                    else
                                    {
                                        Log.Information("Price  Galat aa rha selling sr3 zq mar-apr zero wali dikkat ,{0}", vwap_mar_apr_i);
                                        Log.Information(DateTime.Now.ToString());
                                        button19.PerformClick();
                                        Environment.Exit(91);
                                    }
                                }
                            }
                            else
                            {
                                Log.Information("Price  Galat aa rha selling sr3 zq mar-apr  ,{0}", final_price_v_s);
                                Log.Information(DateTime.Now.ToString());
                                button19.PerformClick();
                                Environment.Exit(92);
                            }
                            lock (ChangesellLock_v)
                            {
                                if (first_v_s > 0 && m_orderKey_v_s != "" && !new_reload_v_s)
                                {
                                  

                                    if (order_v_s_a1)
                                    {
                                        m_orderKey_v_s = PlaceOrder_sell(m_orderKey_v_s, qouted_price_received_v_s, final_price_v_s, qtv_s, change_v_s, instrument_v_a1, new_reload_v_s, rel_v_s, m_instrumentTradeSubscription_v_a1, vwap_mar_apr_i,fill_v_s,button37);

                                    }
                                    else if (order_v_s_a2)
                                    {
                                        m_orderKey_v_s = PlaceOrder_sell(m_orderKey_v_s, qouted_price_received_v_s, final_price_v_s, qtv_s, change_v_s, instrument_v_a2, new_reload_v_s, rel_v_s, m_instrumentTradeSubscription_v_a2, vwap_mar_apr_i, fill_v_s, button37);

                                    }
                                    else
                                    {

                                        m_orderKey_v_s = PlaceOrder_sell(m_orderKey_v_s, qouted_price_received_v_s, final_price_v_s, qtv_s, change_v_s, instrument_v, new_reload_v_s, rel_v_s, m_instrumentTradeSubscription_v, vwap_mar_apr_i, fill_v_s, button37);
                                    }
                                    change_v_s = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Log.Information("apr price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(93);
            }
        }
        void m_priceSubscription_FieldsUpdated_may24(object sender, FieldsUpdatedEventArgs e)
        {
            try
            {
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                    if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                    {
                        decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);



                    if (buying_vi && qouted_price_received_6_b)
                    {
                        if (final_price_vi_b != Price.FromDecimal(instrument_vi, Price_calaculator_sr1_zq_b(final_price_6_b, bid, ask, bidQty, askQty, ratio_vi)) && first_vi_b > 0)
                        {
                            final_price_vi_b = Price.FromDecimal(instrument_vi, Price_calaculator_sr1_zq_b(final_price_6_b, bid, ask, bidQty, askQty, ratio_vi));
                            change_vi_b = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_vi_b == 0)
                        {
                            final_price_vi_b = Price.FromDecimal(instrument_vi, Price_calaculator_sr1_zq_b(final_price_6_b, bid, ask, bidQty, askQty, ratio_vi));

                        }
                        if (final_price_vi_b != Price.FromDecimal(instrument_vi, Int32.MinValue) && final_price_vi_b != Price.FromDecimal(instrument_vi, Int32.MaxValue) && final_price_vi_b != Price.FromDecimal(instrument_vi, Int64.MinValue) && final_price_vi_b != Price.FromDecimal(instrument_vi, Int64.MaxValue))
                        {
                            if (final_price_vi_b != Price.FromDecimal(instrument_vi, 0))
                            {
                                qouted_price_received_vi_b = true;
                            }
                            else
                            {
                                if (vwap_mar_may_i + 1 >= Convert.ToDecimal(final_price_vi_b))
                                {
                                    qouted_price_received_vi_b = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha buying sr3 zq mar-may zero wali dikkat ,{0}", vwap_mar_may_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(94);
                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha buying sr3 zq mar_may zero wali dikkat ,{0}", final_price_vi_b);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(95);
                        }
                        lock (ChangeBuyLock_vi)
                        {
                            if (first_vi_b > 0 && m_orderKey_vi_b != "" && !new_reload_vi_b)
                            {
                                if (order_vi_b_a1)
                                {
                                    m_orderKey_vi_b = PlaceOrder_buy(m_orderKey_vi_b, qouted_price_received_vi_b, final_price_vi_b, qtvi_b, change_vi_b, instrument_vi_a1, new_reload_vi_b, rel_vi_b, m_instrumentTradeSubscription_vi_a1, vwap_mar_may_i, fill_vi_b, button47);

                                    }
                                else if (order_vi_b_a2)
                                {
                                    m_orderKey_vi_b = PlaceOrder_buy(m_orderKey_vi_b, qouted_price_received_vi_b, final_price_vi_b, qtvi_b, change_vi_b, instrument_vi_a2, new_reload_vi_b, rel_vi_b, m_instrumentTradeSubscription_vi_a2, vwap_mar_may_i, fill_vi_b, button47);

                                    }
                                else
                                {

                                    m_orderKey_vi_b = PlaceOrder_buy(m_orderKey_vi_b, qouted_price_received_vi_b, final_price_vi_b, qtvi_b, change_vi_b, instrument_vi, new_reload_vi_b, rel_vi_b, m_instrumentTradeSubscription_vi, vwap_mar_may_i, fill_vi_b, button47);
                                    }
                                change_vi_b = false;
                            }
                        }
                    }
                    if (selling_vi && qouted_price_received_6_s)
                    {
                        if (final_price_vi_s != Price.FromDecimal(instrument_vi, Price_calaculator_sr1_zq_s(final_price_6_s, bid, ask, bidQty, askQty, ratio_vi)) && first_vi_s > 0)
                        {
                            final_price_vi_s = Price.FromDecimal(instrument_vi, Price_calaculator_sr1_zq_s(final_price_6_s, bid, ask, bidQty, askQty, ratio_vi));
                            change_vi_s = true;
                            currentDateTime_start = DateTime.Now;
                        }
                        if (first_vi_s == 0)
                        {
                            final_price_vi_s = Price.FromDecimal(instrument_vi, Price_calaculator_sr1_zq_s(final_price_6_s, bid, ask, bidQty, askQty, ratio_vi));

                        }
                        if (final_price_vi_s != Price.FromDecimal(instrument_vi, Int32.MinValue) && final_price_vi_s != Price.FromDecimal(instrument_vi, Int32.MaxValue) && final_price_vi_s != Price.FromDecimal(instrument_vi, Int64.MinValue) && final_price_vi_s != Price.FromDecimal(instrument_vi, Int64.MaxValue))
                        {
                            if (final_price_vi_s != Price.FromDecimal(instrument_vi, 0))
                            {
                                qouted_price_received_vi_s = true;
                            }
                            else
                            {
                                if (vwap_mar_may_i - 1 <= Convert.ToDecimal(final_price_vi_s))
                                {
                                    qouted_price_received_vi_s = true;
                                }
                                else
                                {
                                    Log.Information("Price  Galat aa rha selling sr3 zq mar_may zero wali dikkat ,{0}", vwap_mar_may_i);
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Environment.Exit(96);
                                        

                                }
                            }
                        }
                        else
                        {
                            Log.Information("Price  Galat aa rha selling sr3 zq mar-May ,{0}", final_price_vi_s);
                            Log.Information(DateTime.Now.ToString());
                            button19.PerformClick();
                            Environment.Exit(97);

                        }
                        lock (ChangesellLock_vi)
                        {
                            if (first_vi_s > 0 && m_orderKey_vi_s != "" && !new_reload_vi_s)
                            {
                                if (order_vi_s_a1)
                                {
                                    m_orderKey_vi_s = PlaceOrder_sell(m_orderKey_vi_s, qouted_price_received_vi_s, final_price_vi_s, qtvi_s, change_vi_s, instrument_vi_a1, new_reload_vi_s, rel_vi_s, m_instrumentTradeSubscription_vi_a1, vwap_mar_may_i,fill_vi_s,button45);

                                }
                                else if (order_vi_s_a2)
                                {
                                    m_orderKey_vi_s = PlaceOrder_sell(m_orderKey_vi_s, qouted_price_received_vi_s, final_price_vi_s, qtvi_s, change_vi_s, instrument_vi_a2, new_reload_vi_s, rel_vi_s, m_instrumentTradeSubscription_vi_a2, vwap_mar_may_i, fill_vi_s, button45);

                                    }
                                else
                                {

                                    m_orderKey_vi_s = PlaceOrder_sell(m_orderKey_vi_s, qouted_price_received_vi_s, final_price_vi_s, qtvi_s, change_vi_s, instrument_vi, new_reload_vi_s, rel_vi_s, m_instrumentTradeSubscription_vi, vwap_mar_may_i, fill_vi_s, button45);
                                    }
                                change_vi_s = false;
                            }
                        }
                    }
                    }
                    else
                    {
                        Log.Information("may price subscription wrong value");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(98);
            }
        }
        void m_priceSubscription_FieldsUpdated_i(object sender, FieldsUpdatedEventArgs e)
        {
           /* try
            {*/
                Log.Information("\n================= {0}", m_ps_counter++);
                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0 && bid != Price.Empty && ask != Price.Empty && bidQty != Quantity.Empty && askQty != Quantity.Empty)

                {
                    decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);

                    if (prod_name.Contains("SR3 Jun24/ZQ Jul24/ZQ Aug24 .net"))
                    {
                        best_bid_i = bid;
                        best_ask_i = ask;
                        best_ask_i_received = true;
                        best_bid_i_received = true;

                    }
                    else if (prod_name.Contains("SR3 Dec23/ZQ Jan24/ZQ Feb24 .net"))
                    {
                        best_bid_ii = bid;
                        best_ask_ii = ask;
                        best_ask_ii_received = true;
                        best_bid_ii_received = true;
                        /*richTextBox1.AppendText("hmmm")*/
                        ;

                    }
                    else if (prod_name.Contains("SR3 Mar24/ZQ Apr24/ZQ May24 .net"))
                    {
                        best_bid_iii = bid;
                        best_ask_iii = ask;
                        best_ask_iii_received = true;
                        best_bid_iii_received = true;
                        /*richTextBox1.AppendText("hmmm")*/
                        ;

                    }


                    else if (prod_name.Contains(".net"))
                    {
                        if (e.Fields.GetBestBidPriceField().Value != null && m_isOrderBookDownloaded)
                        {
                            if (rel_i_b != 0)
                            {
                                partial_fill_i_b_1 = partial_fill_i_b_1 % (rel_i_b * 5);

                                partial_fill_i_b_2 = partial_fill_i_b_2 % (rel_i_b * 3);
                            }
                            if (rel_i_s != 0)
                            {
                                partial_fill_i_s_1 = partial_fill_i_s_1 % (rel_i_s * 5);

                            partial_fill_i_s_2 = partial_fill_i_s_2 % (rel_i_s * 3);
                            }
                            if (rel_ii_b != 0)
                            {
                                partial_fill_ii_b_1 = partial_fill_ii_b_1 % (rel_ii_b * 5);

                            partial_fill_ii_b_2 = partial_fill_ii_b_2 % (rel_ii_b * 3);
                            }
                            if (rel_ii_s != 0)
                            {
                                partial_fill_ii_s_1 = partial_fill_ii_s_1 % (rel_ii_s * 5);

                            partial_fill_ii_s_2 = partial_fill_ii_s_2 % (rel_ii_s * 3);
                            }
                            if (rel_iii_b != 0)
                            {
                                partial_fill_iii_b_1 = partial_fill_iii_b_1 % (rel_iii_b * 5);

                            partial_fill_iii_b_2 = partial_fill_iii_b_2 % (rel_iii_b * 3);
                            }
                            if (rel_iii_s != 0)
                            {
                                partial_fill_iii_s_1 = partial_fill_iii_s_1 % (rel_iii_s * 5);

                            partial_fill_iii_s_2 = partial_fill_iii_s_2 % (rel_iii_s * 3);
                            }
                            if (rel_iv_b != 0)
                            {
                                partial_fill_iv_b_1 = partial_fill_iv_b_1 % (rel_iv_b * 5);

                            partial_fill_iv_b_2 = partial_fill_iv_b_2 % (rel_iv_b * 3);
                            }
                            if (rel_iv_s != 0)
                            {
                                partial_fill_iv_s_1 = partial_fill_iv_s_1 % (rel_iv_s * 5);

                            partial_fill_iv_s_2 = partial_fill_iv_s_2 % (rel_iv_s * 3);
                            }
                            if (rel_v_b != 0)
                            {
                                partial_fill_v_b_1 = partial_fill_v_b_1 % (rel_v_b * 5);

                            partial_fill_v_b_2 = partial_fill_v_b_2 % (rel_v_b * 3);
                            }
                            if (rel_v_s != 0)
                            {
                                partial_fill_v_s_1 = partial_fill_v_s_1 % (rel_v_s * 5);

                            partial_fill_v_s_2 = partial_fill_v_s_2 % (rel_v_s * 3);
                            }
                            if (rel_vi_b != 0)
                            {
                                partial_fill_vi_b_1 = partial_fill_vi_b_1 % (rel_vi_b * 5);

                            partial_fill_vi_b_2 = partial_fill_vi_b_2 % (rel_vi_b * 3);
                            }
                            if (rel_vi_s != 0)
                            {
                                partial_fill_vi_s_1 = partial_fill_vi_s_1 % (rel_vi_s * 5);

                                partial_fill_vi_s_2 = partial_fill_vi_s_2 % (rel_vi_s * 3);
                            }
                            if (prod_name.Contains("ZQ Jul24 .net") && best_bid_1_received && best_ask_1_received)
                            {
                                vwap_jun_jul_i = x;
                                /* richTextBox1.AppendText(String.Format("\naa rha*2 ", user_price_b, best_ask_1));*/
                                lock (OriginalBuyLock_i)
                                {
                                    /* richTextBox1.AppendText(String.Format("\naayyaaaaaaaa"));*/
                                    if (buying_i && qouted_price_received_i_b && qti_b >= 0)
                                    {


                                        if (Convert.ToDecimal(user_price_b) > Convert.ToDecimal(best_ask_1))
                                        {

                                            buying_i = false;
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_i_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-zq Jun-jul", Convert.ToDecimal(final_price_i_b), Convert.ToDecimal(ask)));
                                                buying_i = false;
                                            }
                                            else
                                            {


                                                first_i_b++;
                                                if (qti_b == 0)
                                                {
                                                    new_reload_i_b = false;
                                                    dataGridView2.Rows[14].Cells[6].Value = fill_i_b;
                                                    dataGridView2.Rows[14].Cells[4].Value = "0";
                                                }
                                                /* richTextBox1.AppendText(String.Format("this is it {0},{1},{2},{3}", qoute_stuck_side_i_b_1, qoute_stuck_side_i_b_2,partial_fill_i_b_1,partial_fill_i_b_2));*/

                                                string res = ordermanagement("SR3Jun24", "ZQJul24", myDictionary["jun_bid"], myDictionary["jul_ask_i"], qoute_stuck_side_i_b_1, qoute_stuck_side_i_b_2, order_i_b_a1, order_i_b_a2, order_i_b_a1n, order_i_b_a2n, wait_i_b, qoute_stuck_price_i_b_1, m_instrumentTradeSubscription_i, m_instrumentTradeSubscription_i_a1, m_instrumentTradeSubscription_i_a2, m_orderKey_i_b, new_reload_i_b, m_childorderKey_i_b_1, m_childorderKey_i_b_2, change_i_b, qouted_price_received_i_b, final_price_i_b, qti_b, rel_i_b, instrument_i_a1, instrument_i_a2, instrument_i, partial_fill_i_b_1, partial_fill_i_b_2, "buying", vwap_jun_jul_i,fill_i_b,button5);
                                                wait_i_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_i_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_i_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_i_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_i_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_i_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_i_b_1 = res.Split('+')[6];
                                                m_childorderKey_i_b_2 = res.Split('+')[7];
                                                m_orderKey_i_b = res.Split('+')[8];
                                                change_i_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qti_b = Convert.ToDecimal(res.Split('+')[10]);
                                                /*  richTextBox1.AppendText(String.Format("this is it {0}",res));*/
                                                datagrid_updation_2("BUY", 14, Buy_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid_i"], myDictionary["aug_bid_i"], myDictionary["jun_ask"], myDictionary["jul_ask_i"], myDictionary["aug_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty_i"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty_i"], myDictionary_1["aug_askqty_i"], "two"), m_instrumentTradeSubscription_i, m_instrumentTradeSubscription_i_a1, m_instrumentTradeSubscription_i_a2, m_orderKey_i_b, pause_i_b, qti_b, rel_i_b, fill_i_b, user_price_b);

                                                if (change_i_b == true)
                                                {
                                                    change_i_b = false;
                                                }
                                            }
                                        }
                                    }
                                    /*richTextBox1.AppendText(String.Format("\ngaayyaaaaaaaa"));*/

                                }
                                lock (OriginalsellLock_i)
                                {
                                    if (selling_i && qouted_price_received_i_s && qti_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_s) < Convert.ToDecimal(best_bid_1))
                                        {

                                            selling_i = false;

                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_i_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-zq jun-jul", final_price_1_s, bid));
                                                selling_i = false;

                                            }
                                            else
                                            {

                                                /* richTextBox1.AppendText(String.Format("this is it {0}:{1}", qoute_stuck_side_s_1,qoute_stuck_side_s_2));*/
                                                first_i_s++;
                                                if (qti_s == 0)
                                                {
                                                    new_reload_i_s = false;
                                                    dataGridView2.Rows[15].Cells[6].Value = fill_i_s;
                                                    dataGridView2.Rows[15].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Jun24", "ZQJul24", myDictionary["jun_ask"], myDictionary["jul_bid_i"], qoute_stuck_side_i_s_1, qoute_stuck_side_i_s_2, order_i_s_a1, order_i_s_a2, order_i_s_a1n, order_i_s_a2n, wait_i_s, qoute_stuck_price_i_s_1, m_instrumentTradeSubscription_i, m_instrumentTradeSubscription_i_a1, m_instrumentTradeSubscription_i_a2, m_orderKey_i_s, new_reload_i_s, m_childorderKey_i_s_1, m_childorderKey_i_s_2, change_i_s, qouted_price_received_i_s, final_price_i_s, qti_s, rel_i_s, instrument_i_a1, instrument_i_a2, instrument_i, partial_fill_i_s_1, partial_fill_i_s_2, "selling", vwap_jun_jul_i,fill_i_s,button6);
                                                wait_i_s = Convert.ToBoolean(res.Split('+')[0]);
                                                order_i_s_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_i_s_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_i_s_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_i_s_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_i_s = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_i_s_1 = res.Split('+')[6];
                                                m_childorderKey_i_s_2 = res.Split('+')[7];
                                                m_orderKey_i_s = res.Split('+')[8];
                                                change_i_s = Convert.ToBoolean(res.Split('+')[9]);
                                                qti_s = Convert.ToDecimal(res.Split('+')[10]);
                                                /*richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("SELL", 15, Sell_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid_i"], myDictionary["aug_bid_i"], myDictionary["jun_ask"], myDictionary["jul_ask_i"], myDictionary["aug_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty_i"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty_i"], myDictionary_1["aug_askqty_i"], "two"), m_instrumentTradeSubscription_i, m_instrumentTradeSubscription_i_a1, m_instrumentTradeSubscription_i_a2, m_orderKey_i_s, pause_i_s, qti_s, rel_i_s, fill_i_s, user_price_s);

                                                if (change_i_s == true)
                                                {
                                                    change_i_s = false;
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            if (allowed_2 && prod_name.Contains("Jun24/ZQ Aug24 .net") && best_ask_1_received && best_bid_1_received)
                            {

                                vwap_jun_aug_i = x;

                                lock (OriginalBuyLock_ii)
                                {
                                    if (buying_ii && qouted_price_received_ii_b && qtii_b >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_2_b) > Convert.ToDecimal(best_ask_1))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} ", user_price_2_b, best_ask_1));
                                            buying_ii = false;
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_ii_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-zq jul-aug", final_price_ii_b, ask));
                                                buying_ii = false;

                                            }
                                            else
                                            {
                                                first_ii_b++;
                                                if (qtii_b == 0)
                                                {
                                                    new_reload_ii_b = false;
                                                    dataGridView2.Rows[18].Cells[6].Value = fill_ii_b;
                                                    dataGridView2.Rows[18].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Jun24", "ZQAug24", myDictionary["jun_bid"], myDictionary["aug_ask_i"], qoute_stuck_side_ii_b_1, qoute_stuck_side_ii_b_2, order_ii_b_a1, order_ii_b_a2, order_ii_b_a1n, order_ii_b_a2n, wait_ii_b, qoute_stuck_price_ii_b_1, m_instrumentTradeSubscription_ii, m_instrumentTradeSubscription_ii_a1, m_instrumentTradeSubscription_ii_a2, m_orderKey_ii_b, new_reload_ii_b, m_childorderKey_ii_b_1, m_childorderKey_ii_b_2, change_ii_b, qouted_price_received_ii_b, final_price_ii_b, qtii_b, rel_ii_b, instrument_ii_a1, instrument_ii_a2, instrument_ii, partial_fill_ii_b_1, partial_fill_ii_b_2, "buying", vwap_jun_aug_i,fill_ii_b,button4);
                                                wait_ii_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_ii_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_ii_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_ii_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_ii_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_ii_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_ii_b_1 = res.Split('+')[6];
                                                m_childorderKey_ii_b_2 = res.Split('+')[7];
                                                m_orderKey_ii_b = res.Split('+')[8];
                                                change_ii_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qtii_b = Convert.ToDecimal(res.Split('+')[10]);


                                                datagrid_updation_2("BUY", 18, Buy_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid_i"], myDictionary["jul_bid_i"], myDictionary["jun_ask"], myDictionary["aug_ask_i"], myDictionary["jul_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jul_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty_i"], myDictionary_1["jul_askqty_i"], "two"), m_instrumentTradeSubscription_ii, m_instrumentTradeSubscription_ii_a1, m_instrumentTradeSubscription_ii_a2, m_orderKey_ii_b, pause_ii_b, qtii_b, rel_ii_b, fill_ii_b, user_price_2_b);


                                                if (change_ii_b == true)
                                                {
                                                    change_ii_b = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                lock (OriginalsellLock_ii)
                                {
                                    if (selling_ii && qouted_price_received_ii_s && qtii_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_2_s) < Convert.ToDecimal(best_bid_1))

                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));
                                            selling_ii = false;
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_ii_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-zq Jun-aug", final_price_ii_s, bid));
                                                selling_ii = false;

                                            }
                                            else
                                            {
                                                /* richTextBox1.AppendText(String.Format("\n sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));*/
                                                first_ii_s++;

                                                if (qtii_s == 0)
                                                {
                                                    new_reload_ii_s = false;
                                                    dataGridView2.Rows[19].Cells[6].Value = fill_ii_s;
                                                    dataGridView2.Rows[19].Cells[4].Value = "0";
                                                }
                                                string res1 = ordermanagement("SR3Jun24", "ZQAug24", myDictionary["jun_ask"], myDictionary["aug_bid_i"], qoute_stuck_side_ii_s_1, qoute_stuck_side_ii_s_2, order_ii_s_a1, order_ii_s_a2, order_ii_s_a1n, order_ii_s_a2n, wait_ii_s, qoute_stuck_price_ii_s_1, m_instrumentTradeSubscription_ii, m_instrumentTradeSubscription_ii_a1, m_instrumentTradeSubscription_ii_a2, m_orderKey_ii_s, new_reload_ii_s, m_childorderKey_ii_s_1, m_childorderKey_ii_s_2, change_ii_s, qouted_price_received_ii_s, final_price_ii_s, qtii_s, rel_ii_s, instrument_ii_a1, instrument_ii_a2, instrument_ii, partial_fill_ii_s_1, partial_fill_ii_s_2, "selling", vwap_jun_aug_i,fill_ii_s,button3);
                                                wait_ii_s = Convert.ToBoolean(res1.Split('+')[0]);
                                                order_ii_s_a1n = Convert.ToBoolean(res1.Split('+')[1]);
                                                order_ii_s_a1 = Convert.ToBoolean(res1.Split('+')[2]);
                                                order_ii_s_a2n = Convert.ToBoolean(res1.Split('+')[3]);
                                                order_ii_s_a2 = Convert.ToBoolean(res1.Split('+')[4]);
                                                new_reload_ii_s = Convert.ToBoolean(res1.Split('+')[5]);
                                                m_childorderKey_ii_s_1 = res1.Split('+')[6];
                                                m_childorderKey_ii_s_2 = res1.Split('+')[7];
                                                m_orderKey_ii_s = res1.Split('+')[8];
                                                change_ii_s = Convert.ToBoolean(res1.Split('+')[9]);
                                                qtii_s = Convert.ToDecimal(res1.Split('+')[10]);

                                                datagrid_updation_2("SELL", 19, Sell_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid_i"], myDictionary["jul_bid_i"], myDictionary["jun_ask"], myDictionary["aug_ask_i"], myDictionary["jul_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jul_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty_i"], myDictionary_1["jul_askqty_i"], "two"), m_instrumentTradeSubscription_ii, m_instrumentTradeSubscription_ii_a1, m_instrumentTradeSubscription_ii_a2, m_orderKey_ii_s, pause_ii_s, qtii_s, rel_ii_s, fill_ii_s, user_price_2_s);



                                                if (change_ii_s == true)
                                                {
                                                    change_ii_s = false;
                                                }
                                            }
                                        }


                                    }
                                }
                            }

                            if (allowed_3 && prod_name.Contains("Jan24 .net") && best_bid_2_received && best_ask_2_received)
                            {
                                vwap_dec_jan_i = x;

                                /* richTextBox1.AppendText(String.Format("\naa rha*2 ", user_price_b, best_ask_1));*/
                                lock (OriginalBuyLock_iii)
                                {
                                    /* richTextBox1.AppendText(String.Format("\naayyaaaaaaaa"));*/
                                    if (buying_iii && qouted_price_received_iii_b && qtiii_b >= 0)
                                    {


                                        if (Convert.ToDecimal(user_price_3_b) > Convert.ToDecimal(best_ask_2))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1}", user_price_3_b, best_ask_2));
                                            buying_iii = false;
                                        }
                                        else
                                        {

                                            if (Convert.ToDecimal(final_price_3_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-zq dec-jan", final_price_3_b, ask));
                                                buying_iii = false;

                                            }
                                            else
                                            {
                                                first_iii_b++;
                                                if (qtiii_b == 0)
                                                {
                                                    new_reload_iii_b = false;
                                                    dataGridView2.Rows[22].Cells[6].Value = fill_iii_b;
                                                    dataGridView2.Rows[22].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Dec23", "ZQJan24", myDictionary["dec_bid"], myDictionary["jan_ask_i"], qoute_stuck_side_iii_b_1, qoute_stuck_side_iii_b_2, order_iii_b_a1, order_iii_b_a2, order_iii_b_a1n, order_iii_b_a2n, wait_iii_b, qoute_stuck_price_iii_b_1, m_instrumentTradeSubscription_iii, m_instrumentTradeSubscription_iii_a1, m_instrumentTradeSubscription_iii_a2, m_orderKey_iii_b, new_reload_iii_b, m_childorderKey_iii_b_1, m_childorderKey_iii_b_2, change_iii_b, qouted_price_received_iii_b, final_price_iii_b, qtiii_b, rel_iii_b, instrument_iii_a1, instrument_iii_a2, instrument_iii, partial_fill_iii_b_1, partial_fill_iii_b_2, "buying", vwap_dec_jan_i,fill_iii_b,button31);
                                                wait_iii_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_iii_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_iii_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_iii_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_iii_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_iii_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_iii_b_1 = res.Split('+')[6];
                                                m_childorderKey_iii_b_2 = res.Split('+')[7];
                                                m_orderKey_iii_b = res.Split('+')[8];
                                                change_iii_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qtiii_b = Convert.ToDecimal(res.Split('+')[10]);
                                                /*  richTextBox1.AppendText(String.Format("this is it {0}",res));*/
                                                datagrid_updation_2("BUY", 22, Buy_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid_i"], myDictionary["feb_bid_i"], myDictionary["dec_ask"], myDictionary["jan_ask_i"], myDictionary["feb_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty_i"], myDictionary_1["feb_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty_i"], myDictionary_1["feb_askqty_i"], "two"), m_instrumentTradeSubscription_iii, m_instrumentTradeSubscription_iii_a1, m_instrumentTradeSubscription_iii_a2, m_orderKey_iii_b, pause_iii_b, qtiii_b, rel_iii_b, fill_iii_b, user_price_3_b);

                                                if (change_iii_b == true)
                                                {
                                                    change_iii_b = false;
                                                }
                                            }
                                        }
                                    }
                                    /*richTextBox1.AppendText(String.Format("\ngaayyaaaaaaaa"));*/

                                }
                                lock (OriginalsellLock_iii)
                                {
                                    if (selling_iii && qouted_price_received_iii_s && qtiii_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_3_s) < Convert.ToDecimal(best_bid_2))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", user_price_3_s, best_bid_2));
                                            selling_iii = false;

                                        }
                                        else
                                        {
                                            /*  richTextBox1.AppendText(String.Format("this is it {0}:{1}", qoute_stuck_side_iii_s_1, qoute_stuck_side_iii_s_2));*/
                                            if (Convert.ToDecimal(final_price_iii_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-zq dec-jan", final_price_iii_s, bid));
                                                selling_iii = false;

                                            }
                                            else
                                            {
                                                first_iii_s++;
                                                if (qtiii_s == 0)
                                                {
                                                    new_reload_iii_s = false;
                                                    dataGridView2.Rows[23].Cells[6].Value = fill_iii_s;
                                                    dataGridView2.Rows[23].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Dec23", "ZQJan24", myDictionary["dec_ask"], myDictionary["jan_bid_i"], qoute_stuck_side_iii_s_1, qoute_stuck_side_iii_s_2, order_iii_s_a1, order_iii_s_a2, order_iii_s_a1n, order_iii_s_a2n, wait_iii_s, qoute_stuck_price_iii_s_1, m_instrumentTradeSubscription_iii, m_instrumentTradeSubscription_iii_a1, m_instrumentTradeSubscription_iii_a2, m_orderKey_iii_s, new_reload_iii_s, m_childorderKey_iii_s_1, m_childorderKey_iii_s_2, change_iii_s, qouted_price_received_iii_s, final_price_iii_s, qtiii_s, rel_iii_s, instrument_iii_a1, instrument_iii_a2, instrument_iii, partial_fill_iii_s_1, partial_fill_iii_s_2, "selling", vwap_dec_jan_i,fill_iii_s,button29);
                                                wait_iii_s = Convert.ToBoolean(res.Split('+')[0]);
                                                order_iii_s_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_iii_s_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_iii_s_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_iii_s_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_iii_s = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_iii_s_1 = res.Split('+')[6];
                                                m_childorderKey_iii_s_2 = res.Split('+')[7];
                                                m_orderKey_iii_s = res.Split('+')[8];
                                                change_iii_s = Convert.ToBoolean(res.Split('+')[9]);
                                                qtiii_s = Convert.ToDecimal(res.Split('+')[10]);
                                                /*richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("SELL", 23, Sell_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid_i"], myDictionary["feb_bid_i"], myDictionary["dec_ask"], myDictionary["jan_ask_i"], myDictionary["feb_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty_i"], myDictionary_1["feb_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty_i"], myDictionary_1["feb_askqty_i"], "two"), m_instrumentTradeSubscription_iii, m_instrumentTradeSubscription_iii_a1, m_instrumentTradeSubscription_iii_a2, m_orderKey_iii_s, pause_iii_s, qtiii_s, rel_iii_s, fill_iii_s, user_price_3_s);

                                                if (change_iii_s == true)
                                                {
                                                    change_iii_s = false;
                                                }

                                            }
                                        }
                                    }

                                }
                            }
                            if (allowed_4 && prod_name.Contains("Feb24 .net") && best_ask_2_received && best_bid_2_received)
                            {

                                vwap_dec_feb_i = x;

                                lock (OriginalBuyLock_iv)
                                {
                                    if (buying_iv && qouted_price_received_iv_b && qtiv_b >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_4_b) > Convert.ToDecimal(best_ask_2))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} ", user_price_4_b, best_ask_2));
                                            buying_iv = false;
                                        }
                                        else
                                        {
                                            /*  ric*//*hTextBox1.AppendText(String.Format("\n buy at {0} as best_ask is {1},{2} ", user_price_iv_b, best_ask_2,rel_iv_b));*/
                                            if (Convert.ToDecimal(final_price_iv_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-zq dec-feb", final_price_iv_b, ask));
                                                buying_iv = false;

                                            }
                                            else
                                            {
                                                first_iv_b++;
                                                if (qtiv_b == 0)
                                                {
                                                    new_reload_iv_b = false;
                                                    dataGridView2.Rows[26].Cells[6].Value = fill_iv_b;
                                                    dataGridView2.Rows[26].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Dec23", "SR1Feb24", myDictionary["dec_bid"], myDictionary["feb_ask_i"], qoute_stuck_side_iv_b_1, qoute_stuck_side_iv_b_2, order_iv_b_a1, order_iv_b_a2, order_iv_b_a1n, order_iv_b_a2n, wait_iv_b, qoute_stuck_price_iv_b_1, m_instrumentTradeSubscription_iv, m_instrumentTradeSubscription_iv_a1, m_instrumentTradeSubscription_iv_a2, m_orderKey_iv_b, new_reload_iv_b, m_childorderKey_iv_b_1, m_childorderKey_iv_b_2, change_iv_b, qouted_price_received_iv_b, final_price_iv_b, qtiv_b, rel_iv_b, instrument_iv_a1, instrument_iv_a2, instrument_iv, partial_fill_iv_b_1, partial_fill_iv_b_2, "buying", vwap_dec_feb_i,fill_iv_b,button23);
                                                wait_iv_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_iv_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_iv_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_iv_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_iv_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_iv_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_iv_b_1 = res.Split('+')[6];
                                                m_childorderKey_iv_b_2 = res.Split('+')[7];
                                                m_orderKey_iv_b = res.Split('+')[8];
                                                change_iv_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qtiv_b = Convert.ToDecimal(res.Split('+')[10]);


                                                datagrid_updation_2("BUY", 26, Buy_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid_i"], myDictionary["jan_bid_i"], myDictionary["dec_ask"], myDictionary["feb_ask_i"], myDictionary["jan_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty_i"], myDictionary_1["jan_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty_i"], myDictionary_1["jan_askqty_i"], "two"), m_instrumentTradeSubscription_iv, m_instrumentTradeSubscription_iv_a1, m_instrumentTradeSubscription_iv_a2, m_orderKey_iv_b, pause_iv_b, qtiv_b, rel_iv_b, fill_iv_b, user_price_4_b);


                                                if (change_iv_b == true)
                                                {
                                                    change_iv_b = false;
                                                }
                                            }
                                        }
                                    }
                                }

                                lock (OriginalsellLock_iv)
                                {
                                    if (selling_iv && qouted_price_received_iv_s && qtiv_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_4_s) < Convert.ToDecimal(best_bid_2))

                                        {

                                            selling_iv = false;
                                        }
                                        else
                                        {
                                            /* richTextBox1.AppendText(String.Format("\n sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));*/
                                            if (Convert.ToDecimal(final_price_iv_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 dec-feb", final_price_iv_s, bid));
                                                selling_iv = false;

                                            }
                                            else
                                            {
                                                first_iv_s++;

                                                if (qtiv_s == 0)
                                                {
                                                    new_reload_iv_s = false;
                                                    dataGridView2.Rows[27].Cells[6].Value = fill_iv_s;
                                                    dataGridView2.Rows[27].Cells[4].Value = "0";
                                                }
                                                string res1 = ordermanagement("SR3Dec23", "ZQFeb24", myDictionary["dec_ask"], myDictionary["feb_bid_i"], qoute_stuck_side_iv_s_1, qoute_stuck_side_iv_s_2, order_iv_s_a1, order_iv_s_a2, order_iv_s_a1n, order_iv_s_a2n, wait_iv_s, qoute_stuck_price_iv_s_1, m_instrumentTradeSubscription_iv, m_instrumentTradeSubscription_iv_a1, m_instrumentTradeSubscription_iv_a2, m_orderKey_iv_s, new_reload_iv_s, m_childorderKey_iv_s_1, m_childorderKey_iv_s_2, change_iv_s, qouted_price_received_iv_s, final_price_iv_s, qtiv_s, rel_iv_s, instrument_iv_a1, instrument_iv_a2, instrument_iv, partial_fill_iv_s_1, partial_fill_iv_s_2, "selling", vwap_dec_feb_i,fill_iv_s,button27);
                                                wait_iv_s = Convert.ToBoolean(res1.Split('+')[0]);
                                                order_iv_s_a1n = Convert.ToBoolean(res1.Split('+')[1]);
                                                order_iv_s_a1 = Convert.ToBoolean(res1.Split('+')[2]);
                                                order_iv_s_a2n = Convert.ToBoolean(res1.Split('+')[3]);
                                                order_iv_s_a2 = Convert.ToBoolean(res1.Split('+')[4]);
                                                new_reload_iv_s = Convert.ToBoolean(res1.Split('+')[5]);
                                                m_childorderKey_iv_s_1 = res1.Split('+')[6];
                                                m_childorderKey_iv_s_2 = res1.Split('+')[7];
                                                m_orderKey_iv_s = res1.Split('+')[8];
                                                change_iv_s = Convert.ToBoolean(res1.Split('+')[9]);
                                                qtiv_s = Convert.ToDecimal(res1.Split('+')[10]);

                                                datagrid_updation_2("SELL", 27, Sell_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid_i"], myDictionary["jan_bid_i"], myDictionary["dec_ask"], myDictionary["feb_ask_i"], myDictionary["jan_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty_i"], myDictionary_1["jan_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty_i"], myDictionary_1["jan_askqty_i"], "two"), m_instrumentTradeSubscription_iv, m_instrumentTradeSubscription_iv_a1, m_instrumentTradeSubscription_iv_a2, m_orderKey_iv_s, pause_iv_s, qtiv_s, rel_iv_s, fill_iv_s, user_price_4_s);



                                                if (change_iv_s == true)
                                                {
                                                    change_iv_s = false;
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                            if (allowed_5 && prod_name.Contains("Apr24 .net") && best_bid_3_received && best_ask_3_received)
                            {
                                vwap_mar_apr_i = x;

                                /* richTextBox1.AppendText(String.Format("\naa rha*2 ", user_price_b, best_ask_1));*/
                                lock (OriginalBuyLock_v)
                                {
                                    /* richTextBox1.AppendText(String.Format("\naayyaaaaaaaa"));*/
                                    if (buying_v && qouted_price_received_v_b && qtv_b >= 0)
                                    {


                                        if (Convert.ToDecimal(user_price_5_b) > Convert.ToDecimal(best_ask_3))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1}", user_price_5_b, best_ask_3));
                                            buying_v = false;
                                        }
                                        else
                                        {

                                            if (Convert.ToDecimal(final_price_v_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-zq mar-apr", final_price_v_b, ask));
                                                buying_v = false;

                                            }
                                            else
                                            {
                                                first_v_b++;
                                                if (qtv_b == 0)
                                                {
                                                    new_reload_v_b = false;
                                                    dataGridView2.Rows[30].Cells[6].Value = fill_v_b;
                                                    dataGridView2.Rows[30].Cells[4].Value = "0";
                                                }
                                               /* richTextBox1.AppendText(String.Format("\nYEH {0} :{1},{2} :{3},{4}:{5},{6}", qoute_stuck_side_v_b_1, qoute_stuck_side_v_b_2, qoute_stuck_price_v_b_1, qoute_stuck_price_v_b_2, qtv_b, m_orderKey_v_b, new_reload_v_b));*/
                                                string res = ordermanagement("SR3Mar24", "ZQApr24", myDictionary["mar_bid"], myDictionary["apr_ask_i"], qoute_stuck_side_v_b_1, qoute_stuck_side_v_b_2, order_v_b_a1, order_v_b_a2, order_v_b_a1n, order_v_b_a2n, wait_v_b, qoute_stuck_price_v_b_1, m_instrumentTradeSubscription_v, m_instrumentTradeSubscription_v_a1, m_instrumentTradeSubscription_v_a2, m_orderKey_v_b, new_reload_v_b, m_childorderKey_v_b_1, m_childorderKey_v_b_2, change_v_b, qouted_price_received_v_b, final_price_v_b, qtv_b, rel_v_b, instrument_v_a1, instrument_v_a2, instrument_v, partial_fill_v_b_1, partial_fill_v_b_2, "buying", vwap_mar_apr_i,fill_v_b,button39);
                                                wait_v_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_v_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_v_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_v_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_v_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_v_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_v_b_1 = res.Split('+')[6];
                                                m_childorderKey_v_b_2 = res.Split('+')[7];
                                                m_orderKey_v_b = res.Split('+')[8];
                                                change_v_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qtv_b = Convert.ToDecimal(res.Split('+')[10]);
                                               /* richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("BUY", 30, Buy_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid_i"], myDictionary["may_bid_i"], myDictionary["mar_ask"], myDictionary["apr_ask_i"], myDictionary["may_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty_i"], myDictionary_1["may_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty_i"], myDictionary_1["may_askqty_i"], "two"), m_instrumentTradeSubscription_v, m_instrumentTradeSubscription_v_a1, m_instrumentTradeSubscription_v_a2, m_orderKey_v_b, pause_v_b, qtv_b, rel_v_b, fill_v_b, user_price_5_b);

                                                if (change_v_b == true)
                                                {
                                                    change_v_b = false;
                                                }
                                            }
                                        }
                                    }
                                    /*richTextBox1.AppendText(String.Format("\ngaayyaaaaaaaa"));*/

                                }
                                lock (OriginalsellLock_v)
                                {
                                    if (selling_v && qouted_price_received_v_s && qtv_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_5_s) < Convert.ToDecimal(best_bid_3))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", user_price_5_s, best_bid_3));
                                            selling_v = false;

                                        }
                                        else
                                        {
                                            /*  richTextBox1.AppendText(String.Format("this is it {0}:{1}", qoute_stuck_side_v_s_1, qoute_stuck_side_v_s_2));*/
                                            if (Convert.ToDecimal(final_price_v_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-zq mar-apr", final_price_v_s, bid));
                                                selling_v = false;

                                            }
                                            else
                                            {
                                                first_v_s++;
                                                if (qtv_s == 0)
                                                {
                                                    new_reload_v_s = false;
                                                    dataGridView2.Rows[31].Cells[6].Value = fill_v_s;
                                                    dataGridView2.Rows[31].Cells[4].Value = "0";
                                                }
                                              /*  richTextBox1.AppendText(String.Format("yahan se {0}", new_reload_v_s));*/
                                                string res = ordermanagement("SR3Mar24", "ZQApr24", myDictionary["mar_ask"], myDictionary["apr_bid_i"], qoute_stuck_side_v_s_1, qoute_stuck_side_v_s_2, order_v_s_a1, order_v_s_a2, order_v_s_a1n, order_v_s_a2n, wait_v_s, qoute_stuck_price_v_s_1, m_instrumentTradeSubscription_v, m_instrumentTradeSubscription_v_a1, m_instrumentTradeSubscription_v_a2, m_orderKey_v_s, new_reload_v_s, m_childorderKey_v_s_1, m_childorderKey_v_s_2, change_v_s, qouted_price_received_v_s, final_price_v_s, qtv_s, rel_v_s, instrument_v_a1, instrument_v_a2, instrument_v, partial_fill_v_s_1, partial_fill_v_s_2, "selling", vwap_mar_apr_i,fill_v_s,button37);
                                                wait_v_s = Convert.ToBoolean(res.Split('+')[0]);
                                                order_v_s_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_v_s_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_v_s_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_v_s_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_v_s = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_v_s_1 = res.Split('+')[6];
                                                m_childorderKey_v_s_2 = res.Split('+')[7];
                                                m_orderKey_v_s = res.Split('+')[8];
                                                change_v_s = Convert.ToBoolean(res.Split('+')[9]);
                                                qtv_s = Convert.ToDecimal(res.Split('+')[10]);
                                                /*richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("SELL", 31, Sell_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid_i"], myDictionary["may_bid_i"], myDictionary["mar_ask"], myDictionary["apr_ask_i"], myDictionary["may_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty_i"], myDictionary_1["may_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty_i"], myDictionary_1["may_askqty_i"], "two"), m_instrumentTradeSubscription_v, m_instrumentTradeSubscription_v_a1, m_instrumentTradeSubscription_v_a2, m_orderKey_v_s, pause_v_s, qtv_s, rel_v_s, fill_v_s, user_price_5_s);

                                                if (change_v_s == true)
                                                {
                                                    change_v_s = false;
                                                }

                                            }
                                        }
                                    }

                                }
                            }
                            if (allowed_6 && prod_name.Contains("May24 .net") && best_ask_3_received && best_bid_3_received)
                            {

                                vwap_mar_may_i = x;

                                lock (OriginalBuyLock_vi)
                                {
                                    if (buying_vi && qouted_price_received_vi_b && qtvi_b >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_6_b) > Convert.ToDecimal(best_ask_3))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} ", user_price_6_b, best_ask_3));
                                            buying_vi = false;
                                        }
                                        else
                                        {
                                            /*  ric*//*hTextBox1.AppendText(String.Format("\n buy at {0} as best_ask is {1},{2} ", user_price_vi_b, best_ask_2,rel_vi_b));*/
                                            if (Convert.ToDecimal(final_price_vi_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-zq mar-may", final_price_vi_b, ask));
                                                buying_vi = false;

                                            }
                                            else
                                            {
                                                first_vi_b++;
                                                if (qtvi_b == 0)
                                                {
                                                    new_reload_vi_b = false;
                                                    dataGridView2.Rows[34].Cells[6].Value = fill_vi_b;
                                                    dataGridView2.Rows[34].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Mar24", "ZQMay24", myDictionary["mar_bid"], myDictionary["may_ask_i"], qoute_stuck_side_vi_b_1, qoute_stuck_side_vi_b_2, order_vi_b_a1, order_vi_b_a2, order_vi_b_a1n, order_vi_b_a2n, wait_vi_b, qoute_stuck_price_vi_b_1, m_instrumentTradeSubscription_vi, m_instrumentTradeSubscription_vi_a1, m_instrumentTradeSubscription_vi_a2, m_orderKey_vi_b, new_reload_vi_b, m_childorderKey_vi_b_1, m_childorderKey_vi_b_2, change_vi_b, qouted_price_received_vi_b, final_price_vi_b, qtvi_b, rel_vi_b, instrument_vi_a1, instrument_vi_a2, instrument_vi, partial_fill_vi_b_1, partial_fill_vi_b_2, "buying", vwap_mar_may_i,fill_vi_b,button47);
                                                wait_vi_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_vi_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_vi_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_vi_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_vi_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_vi_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_vi_b_1 = res.Split('+')[6];
                                                m_childorderKey_vi_b_2 = res.Split('+')[7];
                                                m_orderKey_vi_b = res.Split('+')[8];
                                                change_vi_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qtvi_b = Convert.ToDecimal(res.Split('+')[10]);


                                                datagrid_updation_2("BUY", 34, Buy_Vwap(myDictionary["mar_bid"], myDictionary["may_bid_i"], myDictionary["apr_bid_i"], myDictionary["mar_ask"], myDictionary["may_ask_i"], myDictionary["apr_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty_i"], myDictionary_1["apr_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty_i"], myDictionary_1["apr_askqty_i"], "two"), m_instrumentTradeSubscription_vi, m_instrumentTradeSubscription_vi_a1, m_instrumentTradeSubscription_vi_a2, m_orderKey_vi_b, pause_vi_b, qtvi_b, rel_vi_b, fill_vi_b, user_price_6_b);


                                                if (change_vi_b == true)
                                                {
                                                    change_vi_b = false;
                                                }
                                            }
                                        }
                                    }
                                }

                                lock (OriginalsellLock_vi)
                                {
                                    if (selling_vi && qouted_price_received_vi_s && qtvi_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_6_s) < Convert.ToDecimal(best_bid_3))

                                        {

                                            selling_vi = false;
                                        }
                                        else
                                        {
                                            /* richTextBox1.AppendText(String.Format("\n sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));*/
                                            if (Convert.ToDecimal(final_price_vi_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 mar-may", final_price_vi_s, bid));
                                                selling_vi = false;

                                            }
                                            else
                                            {
                                                first_vi_s++;

                                                if (qtvi_s == 0)
                                                {
                                                    new_reload_vi_s = false;
                                                    dataGridView2.Rows[35].Cells[6].Value = fill_vi_s;
                                                    dataGridView2.Rows[35].Cells[4].Value = "0";
                                                }
                                                string res1 = ordermanagement("SR3Mar24", "ZQMay24", myDictionary["mar_ask"], myDictionary["may_bid_i"], qoute_stuck_side_vi_s_1, qoute_stuck_side_vi_s_2, order_vi_s_a1, order_vi_s_a2, order_vi_s_a1n, order_vi_s_a2n, wait_vi_s, qoute_stuck_price_vi_s_1, m_instrumentTradeSubscription_vi, m_instrumentTradeSubscription_vi_a1, m_instrumentTradeSubscription_vi_a2, m_orderKey_vi_s, new_reload_vi_s, m_childorderKey_vi_s_1, m_childorderKey_vi_s_2, change_vi_s, qouted_price_received_vi_s, final_price_vi_s, qtvi_s, rel_vi_s, instrument_vi_a1, instrument_vi_a2, instrument_vi, partial_fill_vi_s_1, partial_fill_vi_s_2, "selling", vwap_mar_may_i,fill_vi_s,button45);
                                                wait_vi_s = Convert.ToBoolean(res1.Split('+')[0]);
                                                order_vi_s_a1n = Convert.ToBoolean(res1.Split('+')[1]);
                                                order_vi_s_a1 = Convert.ToBoolean(res1.Split('+')[2]);
                                                order_vi_s_a2n = Convert.ToBoolean(res1.Split('+')[3]);
                                                order_vi_s_a2 = Convert.ToBoolean(res1.Split('+')[4]);
                                                new_reload_vi_s = Convert.ToBoolean(res1.Split('+')[5]);
                                                m_childorderKey_vi_s_1 = res1.Split('+')[6];
                                                m_childorderKey_vi_s_2 = res1.Split('+')[7];
                                                m_orderKey_vi_s = res1.Split('+')[8];
                                                change_vi_s = Convert.ToBoolean(res1.Split('+')[9]);
                                                qtvi_s = Convert.ToDecimal(res1.Split('+')[10]);

                                                datagrid_updation_2("SELL", 35, Sell_Vwap(myDictionary["mar_bid"], myDictionary["may_bid_i"], myDictionary["apr_bid_i"], myDictionary["mar_ask"], myDictionary["may_ask_i"], myDictionary["apr_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty_i"], myDictionary_1["apr_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty_i"], myDictionary_1["apr_askqty_i"], "two"), m_instrumentTradeSubscription_vi, m_instrumentTradeSubscription_vi_a1, m_instrumentTradeSubscription_vi_a2, m_orderKey_vi_s, pause_vi_s, qtvi_s, rel_vi_s, fill_vi_s, user_price_6_s);



                                                if (change_vi_s == true)
                                                {
                                                    change_vi_s = false;
                                                }

                                            }

                                        }
                                    }
                                }
                            }

                        }
                    }
                    Log.Information("Bid: {0}           BidQty: {1}\nAsk: {2}           AskQty: {3} \n{4}\n{5}", bid, bidQty, ask, askQty, x, prod_name);
                }
                else
                {
                    Log.Information("{0} price subscription wrong value",prod_name);
                }
            }
            /*}
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Environment.Exit(516);
            }*/
        }
        void m_priceSubscription_FieldsUpdated(object sender, FieldsUpdatedEventArgs e)
        {
           /* try
            {*/
                Log.Information("\n================= {0}", m_ps_counter++);

                if (e.Error != null)
                {
                    // Error has occured - the subscription is no longer active

                    tt_net_sdk.PriceSubscription ps = (tt_net_sdk.PriceSubscription)sender;
                    Log.Information("Unrecoverable price subscription error: {0}", e.Error.Message);
                    richTextBox1.AppendText(String.Format("\n Unrecoverable price subscription error: {0}", e.Error.Message));
                    ps.Dispose();
                    return;
                }

                else
                {
                    Price bid = e.Fields.GetDirectBidPriceField().Value;
                    Price ask = e.Fields.GetDirectAskPriceField().Value;
                    Quantity bidQty = e.Fields.GetBestBidQuantityField().Value;
                    Quantity askQty = e.Fields.GetBestAskQuantityField().Value;
                    string prod_name = e.Fields.Instrument.ToString();
                if (bid.IsValid && ask.IsValid && bidQty.IsValid && askQty.IsValid && bid.IsTradable && ask.IsTradable && bidQty != 0 && askQty != 0)
                {
                    decimal x = (bid * askQty + ask * bidQty) / (decimal)(askQty + bidQty);
                    /* richTextBox1.AppendText(String.Format("\n{0} :{1}", prod_name, prod_name.Contains("23 .net")));*/


                    /*if (prod_name.Contains("Oct23-Nov23 Calendar"))
                    {
                        Log.Information(allowed_1);
                        Log.Information("alloed walaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
                        if (allowed_1)
                        {
                            Log.Information("yooooooooooooo");


                            if (Convert.ToDecimal(final_price_1_b )!= Convert.ToDecimal(Price_calculator_1_b(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1)) && buying_1 && first_1_b > 0)
                            {
                                 currentDateTime_start = DateTime.Now;

                                change_b = true;
                            }
                            if(selling_1 && first_1_s>0 && Convert.ToDecimal(final_price_1_s) != Convert.ToDecimal(Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1)))
                             {
                                Log.Information("kya dikkat");
                                Log.Information(final_price_1_s);
                                Log.Information(Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_b, user_price_s, ratio_1, selling_1));
                                    change_s = true;

                            }
                            Log.Information(ratio_1);
                            Log.Information("hellllllllll");
                            final_price_1_b =Price_calculator_1_b(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument,user_price_b,user_price_s,ratio_1,selling_1);
                            final_price_1_s =Price_calculator_1_s(buying_1, bid, ask, bidQty, askQty, e.Fields.Instrument,user_price_b,user_price_s,ratio_1,selling_1);
                            if (buying_1&& final_price_1_b!= Price.FromDecimal(instrument, Int32.MinValue)&&final_price_1_b != Price.FromDecimal(instrument, Int32.MaxValue))
                            {
                                qouted_price_received_b = true;

                            }
                            if(selling_1 && final_price_1_s != Price.FromDecimal(instrument, Int32.MaxValue)&&final_price_1_s!= Price.FromDecimal(instrument, Int32.MinValue))
                            {
                                qouted_price_received_s = true;
                            }

                        }
                        if (allowed_2)
                        {
                            if(Convert.ToDecimal(final_price_2_b)!= Convert.ToDecimal(Price_calculator_2_b(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument,user_price_2_b,user_price_2_s,ratio_2,selling_2))&& buying_2 && first_2_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_2_b = true;
                            } if(selling_2 && first_2_s > 0&&Convert.ToDecimal(final_price_2_s) !=Convert.ToDecimal( Price_calculator_2_s(buying_2, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_2_b, user_price_2_s, ratio_2, selling_2)))
                            {
                                    change_2_s = true;
                            }

                            final_price_2_b=Price_calculator_2_b(buying_2, bid,ask,bidQty,askQty, e.Fields.Instrument, user_price_2_b,user_price_2_s, ratio_2,selling_2);
                            final_price_2_s=Price_calculator_2_s(buying_2, bid,ask,bidQty,askQty, e.Fields.Instrument, user_price_2_b,user_price_2_s, ratio_2,selling_2);
                            if (buying_2 && final_price_2_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_2_b != Price.FromDecimal(instrument, Int32.MaxValue))
                            {
                                qouted_price_received_2_b = true;
                            }
                            if (selling_2 && final_price_2_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_2_s != Price.FromDecimal(instrument, Int32.MinValue)) { 
                                qouted_price_received_2_s = true;
                            }

                        }
                    }
                    else if (prod_name.Contains("Jan24-Feb24 Calendar"))
                    {
                        if (allowed_3)
                        {


                            if (Convert.ToDecimal(final_price_3_b) != Convert.ToDecimal(Price_calculator_1_b(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3)) && buying_3 && first_3_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_3_b = true;
                            }
                            if (selling_3 && first_3_s > 0 && Convert.ToDecimal(final_price_3_s) != Convert.ToDecimal(Price_calculator_1_s(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3)))
                            {

                                change_3_s = true;

                            }
                            Log.Information(ratio_1);
                            Log.Information("hellllllllll");

                        final_price_3_b = Price_calculator_1_b(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3);
                        final_price_3_s = Price_calculator_1_s(buying_3, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_3_b, user_price_3_s, ratio_3, selling_3);
                            if (buying_3 && final_price_3_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_3_b != Price.FromDecimal(instrument, Int32.MaxValue))
                            {
                                qouted_price_received_3_b = true;

                            }
                            if (selling_3 && final_price_3_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_3_s != Price.FromDecimal(instrument, Int32.MinValue))
                            {
                                qouted_price_received_3_s = true;
                            }

                        }
                        if (allowed_4)
                        {
                            if (Convert.ToDecimal(final_price_4_b) != Convert.ToDecimal(Price_calculator_2_b(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4)) && buying_4 && first_4_b > 0)
                            {
                                currentDateTime_start = DateTime.Now;
                                change_4_b = true;
                            }
                            if (selling_4 && first_4_s > 0 && Convert.ToDecimal(final_price_4_s) != Convert.ToDecimal(Price_calculator_2_s(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4)))
                            {
                                change_4_s = true;
                            }

                            final_price_4_b = Price_calculator_2_b(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4);
                            final_price_4_s = Price_calculator_2_s(buying_4, bid, ask, bidQty, askQty, e.Fields.Instrument, user_price_4_b, user_price_4_s, ratio_4, selling_4);
                            if (buying_4 && final_price_4_b != Price.FromDecimal(instrument, Int32.MinValue) && final_price_4_b != Price.FromDecimal(instrument, Int32.MaxValue))
                            {
                                qouted_price_received_4_b = true;
                            }
                            if (selling_4 && final_price_4_s != Price.FromDecimal(instrument, Int32.MaxValue) && final_price_4_s != Price.FromDecimal(instrument, Int32.MinValue))
                            {
                                qouted_price_received_4_s = true;
                            }

                        }
                    }*/
                    if (prod_name.Contains("SR3 Jun24/Sr1 Jul24/Sr1 Aug24 .net"))
                    {
                        best_bid_1 = bid;
                        best_ask_1 = ask;

                        best_ask_1_received = true;
                        best_bid_1_received = true;

                    }
                    else if (prod_name.Contains("SR3 Dec23/Sr1 Jan24/Sr1 Feb24 .net"))
                    {
                        best_bid_2 = bid;
                        best_ask_2 = ask;
                        best_ask_2_received = true;
                        best_bid_2_received = true;
                        /*richTextBox1.AppendText("hmmm")*/
                        ;

                    } 
                    else if (prod_name.Contains("SR3 Mar24/Sr1 Apr24/Sr1 May24 .net"))
                    {
                        best_bid_3 = bid;
                        best_ask_3 = ask;
                        best_ask_3_received = true;
                        best_bid_3_received = true;
                        /*richTextBox1.AppendText("hmmm")*/
                        ;

                    }
                    else if (prod_name.Contains("CME SR3 Jun24"))
                    {
                        if (myDictionary.ContainsKey("jun_bid"))
                        {
                            // Update the value if the key is present
                            myDictionary["jun_bid"] = bid;
                        }
                        else
                        {
                            // Add a new key-value pair if the key is not present
                            myDictionary.Add("jun_bid", bid);
                        }

                        if (myDictionary.ContainsKey("jun_ask"))
                        {
                            // Update the value if the key is present
                            myDictionary["jun_ask"] = ask;
                        }
                        else
                        {
                            // Add a new key-value pair if the key is not present
                            myDictionary.Add("jun_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("jun_bidqty"))
                        {
                            myDictionary_1["jun_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jun_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("jun_askqty"))
                        {
                            myDictionary_1["jun_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jun_askqty", askQty);
                        }


                        datagrid_updation(dataGridView1, "SR3 Jun24", ask, bid);
                        datagrid_updation(dataGridView3, "SR3 Jun24", ask, bid);

                    }
                    else if (prod_name.Contains("CME SR1 Jul24"))
                    {


                        if (myDictionary.ContainsKey("jul_bid"))
                        {
                            myDictionary["jul_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("jul_bid", bid);
                        }

                        if (myDictionary.ContainsKey("jul_ask"))
                        {
                            myDictionary["jul_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("jul_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("jul_bidqty"))
                        {
                            myDictionary_1["jul_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jul_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("jul_askqty"))
                        {
                            myDictionary_1["jul_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jul_askqty", askQty);
                        }

                        datagrid_updation(dataGridView1, "SR1 Jul24", ask, bid);
                        datagrid_updation(dataGridView3, "SR1 Jul24", ask, bid);
                    }
                    else if (prod_name.Contains("CME SR1 Aug24"))
                    {

                        if (myDictionary.ContainsKey("aug_bid"))
                        {
                            myDictionary["aug_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("aug_bid", bid);
                        }

                        if (myDictionary.ContainsKey("aug_ask"))
                        {
                            myDictionary["aug_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("aug_ask", ask);
                        }

                        // Update or add values for myDictionary_1
                        if (myDictionary_1.ContainsKey("aug_bidqty"))
                        {
                            myDictionary_1["aug_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("aug_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("aug_askqty"))
                        {
                            myDictionary_1["aug_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("aug_askqty", askQty);
                        }

                        datagrid_updation(dataGridView1, "SR1 Aug24", ask, bid);
                        datagrid_updation(dataGridView3, "SR1 Aug24", ask, bid);
                    }
                    else if (prod_name.Contains("CME SR3 Dec23"))
                    {


                        if (myDictionary.ContainsKey("dec_bid"))
                        {
                            myDictionary["dec_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("dec_bid", bid);
                        }

                        if (myDictionary.ContainsKey("dec_ask"))
                        {
                            myDictionary["dec_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("dec_ask", ask);
                        }

                        // Update or add values for myDictionary_1
                        if (myDictionary_1.ContainsKey("dec_bidqty"))
                        {
                            myDictionary_1["dec_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("dec_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("dec_askqty"))
                        {
                            myDictionary_1["dec_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("dec_askqty", askQty);
                        }

                        datagrid_updation(dataGridView1, "SR3 Dec23", ask, bid);
                        datagrid_updation(dataGridView3, "SR3 Dec23", ask, bid);

                    }
                    else if (prod_name.Contains("CME SR1 Jan24"))
                    {
                        if (myDictionary.ContainsKey("jan_bid"))
                        {
                            myDictionary["jan_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("jan_bid", bid);
                        }

                        if (myDictionary.ContainsKey("jan_ask"))
                        {
                            myDictionary["jan_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("jan_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("jan_bidqty"))
                        {
                            myDictionary_1["jan_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jan_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("jan_askqty"))
                        {
                            myDictionary_1["jan_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jan_askqty", askQty);
                        }
                     
                        datagrid_updation(dataGridView1, "SR1 Jan24", ask, bid);
                        datagrid_updation(dataGridView3, "SR1 Jan24", ask, bid);
                    }
                    else if (prod_name.Contains("CME SR1 Feb24"))
                    {
                        if (myDictionary.ContainsKey("feb_bid"))
                        {
                            myDictionary["feb_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("feb_bid", bid);
                        }

                        if (myDictionary.ContainsKey("feb_ask"))
                        {
                            myDictionary["feb_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("feb_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("feb_bidqty"))
                        {
                            myDictionary_1["feb_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("feb_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("feb_askqty"))
                        {
                            myDictionary_1["feb_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("feb_askqty", askQty);
                        }

                        datagrid_updation(dataGridView1, "SR1 Feb24", ask, bid);
                        datagrid_updation(dataGridView3, "SR1 Feb24", ask, bid);
                    }
                    else if (prod_name.Contains("CME SR3 Mar24"))
                    {


                        if (myDictionary.ContainsKey("mar_bid"))
                        {
                            myDictionary["mar_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("mar_bid", bid);
                        }

                        if (myDictionary.ContainsKey("mar_ask"))
                        {
                            myDictionary["mar_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("mar_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("mar_bidqty"))
                        {
                            myDictionary_1["mar_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("mar_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("mar_askqty"))
                        {
                            myDictionary_1["mar_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("mar_askqty", askQty);
                        }

                        datagrid_updation(dataGridView1, "SR3 Mar24", ask, bid);
                        datagrid_updation(dataGridView3, "SR3 Mar24", ask, bid);

                    }
                    else if (prod_name.Contains("CME SR1 Apr24"))
                    {
                        if (myDictionary.ContainsKey("apr_bid"))
                        {
                            myDictionary["apr_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("apr_bid", bid);
                        }

                        if (myDictionary.ContainsKey("apr_ask"))
                        {
                            myDictionary["apr_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("apr_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("apr_bidqty"))
                        {
                            myDictionary_1["apr_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("apr_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("apr_askqty"))
                        {
                            myDictionary_1["apr_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("apr_askqty", askQty);
                        }
                        datagrid_updation(dataGridView1, "SR1 Apr24", ask, bid);
                        datagrid_updation(dataGridView3, "SR1 Apr24", ask, bid);
                    }
                    else if (prod_name.Contains("CME SR1 May24"))
                    {
                        if (myDictionary.ContainsKey("may_bid"))
                        {
                            myDictionary["may_bid"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("may_bid", bid);
                        }

                        if (myDictionary.ContainsKey("may_ask"))
                        {
                            myDictionary["may_ask"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("may_ask", ask);
                        }

                        if (myDictionary_1.ContainsKey("may_bidqty"))
                        {
                            myDictionary_1["may_bidqty"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("may_bidqty", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("may_askqty"))
                        {
                            myDictionary_1["may_askqty"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("may_askqty", askQty);
                        }

                        datagrid_updation(dataGridView1, "SR1 May24", ask, bid);
                        datagrid_updation(dataGridView3, "SR1 May24", ask, bid);
                    }
                    else if (prod_name.Contains("CME ZQ Jul24"))
                    {
                        if (myDictionary.ContainsKey("jul_bid_i"))
                        {
                            myDictionary["jul_bid_i"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("jul_bid_i", bid);
                        }

                        if (myDictionary.ContainsKey("jul_ask_i"))
                        {
                            myDictionary["jul_ask_i"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("jul_ask_i", ask);
                        }

                        if (myDictionary_1.ContainsKey("jul_bidqty_i"))
                        {
                            myDictionary_1["jul_bidqty_i"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jul_bidqty_i", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("jul_askqty_i"))
                        {
                            myDictionary_1["jul_askqty_i"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jul_askqty_i", askQty);
                        }

                        datagrid_updation(dataGridView1, "ZQ Jul24", ask, bid);
                        datagrid_updation(dataGridView3, "ZQ Jul24", ask, bid);
                    }
                    else if (prod_name.Contains("CME ZQ Aug24"))
                    {
                        if (myDictionary.ContainsKey("aug_bid_i"))
                        {
                            myDictionary["aug_bid_i"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("aug_bid_i", bid);
                        }

                        if (myDictionary.ContainsKey("aug_ask_i"))
                        {
                            myDictionary["aug_ask_i"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("aug_ask_i", ask);
                        }

                        if (myDictionary_1.ContainsKey("aug_bidqty_i"))
                        {
                            myDictionary_1["aug_bidqty_i"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("aug_bidqty_i", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("aug_askqty_i"))
                        {
                            myDictionary_1["aug_askqty_i"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("aug_askqty_i", askQty);
                        }
                        datagrid_updation(dataGridView1, "ZQ Aug24", ask, bid);
                        datagrid_updation(dataGridView3, "ZQ Aug24", ask, bid);
                    }

                    else if (prod_name.Contains("CME ZQ Jan24"))
                    {
                        if (myDictionary.ContainsKey("jan_bid_i"))
                        {
                            myDictionary["jan_bid_i"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("jan_bid_i", bid);
                        }

                        if (myDictionary.ContainsKey("jan_ask_i"))
                        {
                            myDictionary["jan_ask_i"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("jan_ask_i", ask);
                        }

                        if (myDictionary_1.ContainsKey("jan_bidqty_i"))
                        {
                            myDictionary_1["jan_bidqty_i"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jan_bidqty_i", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("jan_askqty_i"))
                        {
                            myDictionary_1["jan_askqty_i"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("jan_askqty_i", askQty);
                        }
                        datagrid_updation(dataGridView1, "ZQ Jan24", ask, bid);
                        datagrid_updation(dataGridView3, "ZQ Jan24", ask, bid);
                    }
                    else if (prod_name.Contains("CME ZQ Feb24"))
                    {
                        if (myDictionary.ContainsKey("feb_bid_i"))
                        {
                            myDictionary["feb_bid_i"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("feb_bid_i", bid);
                        }

                        if (myDictionary.ContainsKey("feb_ask_i"))
                        {
                            myDictionary["feb_ask_i"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("feb_ask_i", ask);
                        }

                        if (myDictionary_1.ContainsKey("feb_bidqty_i"))
                        {
                            myDictionary_1["feb_bidqty_i"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("feb_bidqty_i", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("feb_askqty_i"))
                        {
                            myDictionary_1["feb_askqty_i"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("feb_askqty_i", askQty);
                        }

                        datagrid_updation(dataGridView1, "ZQ Feb24", ask, bid);
                        datagrid_updation(dataGridView3, "ZQ Feb24", ask, bid);
                    }
                    else if (prod_name.Contains("CME ZQ Apr24"))
                    {
                        if(myDictionary.ContainsKey("apr_bid_i"))
        {
                            myDictionary["apr_bid_i"] = bid;
                        }
        else
                        {
                            myDictionary.Add("apr_bid_i", bid);
                        }

                        if (myDictionary.ContainsKey("apr_ask_i"))
                        {
                            myDictionary["apr_ask_i"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("apr_ask_i", ask);
                        }

                        if (myDictionary_1.ContainsKey("apr_bidqty_i"))
                        {
                            myDictionary_1["apr_bidqty_i"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("apr_bidqty_i", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("apr_askqty_i"))
                        {
                            myDictionary_1["apr_askqty_i"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("apr_askqty_i", askQty);
                        }

                        datagrid_updation(dataGridView1, "ZQ Apr24", ask, bid);
                        datagrid_updation(dataGridView3, "ZQ Apr24", ask, bid);
                    }
                    else if (prod_name.Contains("CME ZQ May24"))
                    {
                        if (myDictionary.ContainsKey("may_bid_i"))
                        {
                            myDictionary["may_bid_i"] = bid;
                        }
                        else
                        {
                            myDictionary.Add("may_bid_i", bid);
                        }

                        if (myDictionary.ContainsKey("may_ask_i"))
                        {
                            myDictionary["may_ask_i"] = ask;
                        }
                        else
                        {
                            myDictionary.Add("may_ask_i", ask);
                        }

                        if (myDictionary_1.ContainsKey("may_bidqty_i"))
                        {
                            myDictionary_1["may_bidqty_i"] = bidQty;
                        }
                        else
                        {
                            myDictionary_1.Add("may_bidqty_i", bidQty);
                        }

                        if (myDictionary_1.ContainsKey("may_askqty_i"))
                        {
                            myDictionary_1["may_askqty_i"] = askQty;
                        }
                        else
                        {
                            myDictionary_1.Add("may_askqty_i", askQty);
                        }
                        datagrid_updation(dataGridView1, "ZQ May24", ask, bid);
                        datagrid_updation(dataGridView3, "ZQ May24", ask, bid);
                    }
                    else if (prod_name.Contains(".net"))
                    {/*
                    richTextBox1.AppendText(String.Format("\nhmmmm ", user_price_b, best_ask_1));*/
                        Log.Information("hi");
                        Log.Information("{0}", m_isOrderBookDownloaded);
                        Log.Information("{0}", qouted_price_received_b);
                        Log.Information("{0}", qouted_price_received_s);
                        if (e.Fields.GetBestBidPriceField().Value != null && m_isOrderBookDownloaded)
                        {

                            if (rel_1_b != 0)
                            {
                                partial_fill_b_1 = partial_fill_b_1 % (rel_1_b * 5);

                                partial_fill_b_2 = partial_fill_b_2 % (rel_1_b * 3);
                            } if(rel_1_s != 0){ 

                            partial_fill_s_1 = partial_fill_s_1 % (rel_1_s * 5);

                            partial_fill_s_2 = partial_fill_s_2 % (rel_1_s * 3);
                            }
                            if (rel_2_b != 0)
                            {
                                partial_fill_1_b_1 = partial_fill_1_b_1 % (rel_2_b * 5);

                            partial_fill_1_b_2 = partial_fill_1_b_2 % (rel_2_b * 3);
                            }
                            if (rel_2_s != 0)
                            {
                                partial_fill_1_s_1 = partial_fill_1_s_1 % (rel_2_s * 5);

                            partial_fill_1_s_2 = partial_fill_1_s_2 % (rel_2_s * 3);
                            }
                            if (rel_3_b != 0)
                            {
                                partial_fill_3_b_1 = partial_fill_3_b_1 % (rel_3_b * 5);

                            partial_fill_3_b_2 = partial_fill_3_b_2 % (rel_3_b * 3);
                            }
                            if (rel_3_s != 0)
                            {
                                partial_fill_3_s_1 = partial_fill_3_s_1 % (rel_3_s * 5);

                            partial_fill_3_s_2 = partial_fill_3_s_2 % (rel_3_s * 3);
                            }
                            if (rel_4_b != 0)
                            {
                                partial_fill_4_b_1 = partial_fill_4_b_1 % (rel_4_b * 5);

                            partial_fill_4_b_2 = partial_fill_4_b_2 % (rel_4_b * 3);
                            }
                            if (rel_4_s != 0)
                            {
                                partial_fill_4_s_1 = partial_fill_4_s_1 % (rel_4_s * 5);

                            partial_fill_4_s_2 = partial_fill_4_s_2 % (rel_4_s * 3);
                            }
                            if (rel_5_b != 0)
                            {
                                partial_fill_5_b_1 = partial_fill_5_b_1 % (rel_5_b * 5);

                            partial_fill_5_b_2 = partial_fill_5_b_2 % (rel_5_b * 3);
                            }
                            if (rel_5_s != 0)
                            {
                                partial_fill_5_s_1 = partial_fill_5_s_1 % (rel_5_s * 5);

                            partial_fill_5_s_2 = partial_fill_5_s_2 % (rel_5_s * 3);
                            }
                            if (rel_6_b != 0)
                            {
                                partial_fill_6_b_1 = partial_fill_6_b_1 % (rel_6_b * 5);

                            partial_fill_6_b_2 = partial_fill_6_b_2 % (rel_6_b * 3);
                            }
                            if (rel_6_s != 0)
                            {
                                partial_fill_6_s_1 = partial_fill_6_s_1 % (rel_6_s * 5);

                                partial_fill_6_s_2 = partial_fill_6_s_2 % (rel_6_s * 3);
                            }
                            dataGridView2.Rows[0].Cells[1].Value = Buy_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid"], myDictionary["aug_bid"], myDictionary["jun_ask"], myDictionary["jul_ask"], myDictionary["aug_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty"], myDictionary_1["aug_askqty"], "three");
                            dataGridView2.Rows[1].Cells[1].Value = Sell_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid"], myDictionary["aug_bid"], myDictionary["jun_ask"], myDictionary["jul_ask"], myDictionary["aug_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty"], myDictionary_1["aug_askqty"], "three");
                            dataGridView2.Rows[2].Cells[1].Value = Buy_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid_i"], myDictionary["aug_bid_i"], myDictionary["jun_ask"], myDictionary["jul_ask_i"], myDictionary["aug_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty_i"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty_i"], myDictionary_1["aug_askqty_i"], "three");
                            dataGridView2.Rows[3].Cells[1].Value = Sell_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid_i"], myDictionary["aug_bid_i"], myDictionary["jun_ask"], myDictionary["jul_ask_i"], myDictionary["aug_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty_i"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty_i"], myDictionary_1["aug_askqty_i"], "three");


                            dataGridView2.Rows[4].Cells[1].Value = Buy_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid"], myDictionary["feb_bid"], myDictionary["dec_ask"], myDictionary["jan_ask"], myDictionary["feb_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty"], myDictionary_1["feb_askqty"], "three");
                            dataGridView2.Rows[5].Cells[1].Value = Sell_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid"], myDictionary["feb_bid"], myDictionary["dec_ask"], myDictionary["jan_ask"], myDictionary["feb_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty"], myDictionary_1["feb_askqty"], "three");
                            dataGridView2.Rows[6].Cells[1].Value = Buy_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid_i"], myDictionary["feb_bid_i"], myDictionary["dec_ask"], myDictionary["jan_ask_i"], myDictionary["feb_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty_i"], myDictionary_1["feb_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty_i"], myDictionary_1["feb_askqty_i"], "three");
                            dataGridView2.Rows[7].Cells[1].Value = Sell_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid_i"], myDictionary["feb_bid_i"], myDictionary["dec_ask"], myDictionary["jan_ask_i"], myDictionary["feb_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty_i"], myDictionary_1["feb_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty_i"], myDictionary_1["feb_askqty_i"], "three");

                            dataGridView2.Rows[8].Cells[1].Value = Buy_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid"], myDictionary["may_bid"], myDictionary["mar_ask"], myDictionary["apr_ask"], myDictionary["may_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty"], myDictionary_1["may_askqty"], "three");
                            dataGridView2.Rows[9].Cells[1].Value = Sell_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid"], myDictionary["may_bid"], myDictionary["mar_ask"], myDictionary["apr_ask"], myDictionary["may_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty"], myDictionary_1["may_askqty"], "three");
                            dataGridView2.Rows[10].Cells[1].Value = Buy_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid_i"], myDictionary["may_bid_i"], myDictionary["mar_ask"], myDictionary["apr_ask_i"], myDictionary["may_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty_i"], myDictionary_1["may_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty_i"], myDictionary_1["may_askqty_i"], "three");
                            dataGridView2.Rows[11].Cells[1].Value = Sell_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid_i"], myDictionary["may_bid_i"], myDictionary["mar_ask"], myDictionary["apr_ask_i"], myDictionary["may_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty_i"], myDictionary_1["may_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty_i"], myDictionary_1["may_askqty_i"], "three");

                            dataGridView2.Rows[12].Cells[1].Value = Buy_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid"], myDictionary["aug_bid"], myDictionary["jun_ask"], myDictionary["jul_ask"], myDictionary["aug_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty"], myDictionary_1["aug_askqty"], "two");
                            dataGridView2.Rows[13].Cells[1].Value = Sell_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid"], myDictionary["aug_bid"], myDictionary["jun_ask"], myDictionary["jul_ask"], myDictionary["aug_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty"], myDictionary_1["aug_askqty"], "two");
                            dataGridView2.Rows[14].Cells[1].Value = Buy_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid_i"], myDictionary["aug_bid_i"], myDictionary["jun_ask"], myDictionary["jul_ask_i"], myDictionary["aug_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty_i"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty_i"], myDictionary_1["aug_askqty_i"], "two");
                            dataGridView2.Rows[15].Cells[1].Value = Sell_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid_i"], myDictionary["aug_bid_i"], myDictionary["jun_ask"], myDictionary["jul_ask_i"], myDictionary["aug_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty_i"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty_i"], myDictionary_1["aug_askqty_i"], "two");
                            dataGridView2.Rows[16].Cells[1].Value = Buy_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid"], myDictionary["jul_bid"], myDictionary["jun_ask"], myDictionary["aug_ask"], myDictionary["jul_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty"], myDictionary_1["jul_askqty"], "two");
                            dataGridView2.Rows[17].Cells[1].Value = Sell_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid"], myDictionary["jul_bid"], myDictionary["jun_ask"], myDictionary["aug_ask"], myDictionary["jul_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty"], myDictionary_1["jul_askqty"], "two");
                            dataGridView2.Rows[18].Cells[1].Value = Buy_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid_i"], myDictionary["jul_bid_i"], myDictionary["jun_ask"], myDictionary["aug_ask_i"], myDictionary["jul_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jul_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty_i"], myDictionary_1["jul_askqty_i"], "two");
                            dataGridView2.Rows[19].Cells[1].Value = Sell_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid_i"], myDictionary["jul_bid_i"], myDictionary["jun_ask"], myDictionary["aug_ask_i"], myDictionary["jul_ask_i"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty_i"], myDictionary_1["jul_bidqty_i"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty_i"], myDictionary_1["jul_askqty_i"], "two");

                            dataGridView2.Rows[20].Cells[1].Value = Buy_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid"], myDictionary["feb_bid"], myDictionary["dec_ask"], myDictionary["jan_ask"], myDictionary["feb_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty"], myDictionary_1["feb_askqty"], "two");
                            dataGridView2.Rows[21].Cells[1].Value = Sell_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid"], myDictionary["feb_bid"], myDictionary["dec_ask"], myDictionary["jan_ask"], myDictionary["feb_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty"], myDictionary_1["feb_askqty"], "two");
                            dataGridView2.Rows[22].Cells[1].Value = Buy_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid_i"], myDictionary["feb_bid_i"], myDictionary["dec_ask"], myDictionary["jan_ask_i"], myDictionary["feb_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty_i"], myDictionary_1["feb_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty_i"], myDictionary_1["feb_askqty_i"], "two");
                            dataGridView2.Rows[23].Cells[1].Value = Sell_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid_i"], myDictionary["feb_bid_i"], myDictionary["dec_ask"], myDictionary["jan_ask_i"], myDictionary["feb_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty_i"], myDictionary_1["feb_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty_i"], myDictionary_1["feb_askqty_i"], "two");
                            dataGridView2.Rows[24].Cells[1].Value = Buy_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid"], myDictionary["jan_bid"], myDictionary["dec_ask"], myDictionary["feb_ask"], myDictionary["jan_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty"], myDictionary_1["jan_askqty"], "two");
                            dataGridView2.Rows[25].Cells[1].Value = Sell_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid"], myDictionary["jan_bid"], myDictionary["dec_ask"], myDictionary["feb_ask"], myDictionary["jan_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty"], myDictionary_1["jan_askqty"], "two");
                            dataGridView2.Rows[26].Cells[1].Value = Buy_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid_i"], myDictionary["jan_bid_i"], myDictionary["dec_ask"], myDictionary["feb_ask_i"], myDictionary["jan_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty_i"], myDictionary_1["jan_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty_i"], myDictionary_1["jan_askqty_i"], "two");
                            dataGridView2.Rows[27].Cells[1].Value = Sell_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid_i"], myDictionary["jan_bid_i"], myDictionary["dec_ask"], myDictionary["feb_ask_i"], myDictionary["jan_ask_i"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty_i"], myDictionary_1["jan_bidqty_i"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty_i"], myDictionary_1["jan_askqty_i"], "two");

                            dataGridView2.Rows[28].Cells[1].Value = Buy_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid"], myDictionary["may_bid"], myDictionary["mar_ask"], myDictionary["apr_ask"], myDictionary["may_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty"], myDictionary_1["may_askqty"], "two");
                            dataGridView2.Rows[29].Cells[1].Value = Sell_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid"], myDictionary["may_bid"], myDictionary["mar_ask"], myDictionary["apr_ask"], myDictionary["may_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty"], myDictionary_1["may_askqty"], "two");
                            dataGridView2.Rows[30].Cells[1].Value = Buy_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid_i"], myDictionary["may_bid_i"], myDictionary["mar_ask"], myDictionary["apr_ask_i"], myDictionary["may_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty_i"], myDictionary_1["may_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty_i"], myDictionary_1["may_askqty_i"], "two");
                            dataGridView2.Rows[31].Cells[1].Value = Sell_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid_i"], myDictionary["may_bid_i"], myDictionary["mar_ask"], myDictionary["apr_ask_i"], myDictionary["may_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty_i"], myDictionary_1["may_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty_i"], myDictionary_1["may_askqty_i"], "two");
                            dataGridView2.Rows[32].Cells[1].Value = Buy_Vwap(myDictionary["mar_bid"], myDictionary["may_bid"], myDictionary["apr_bid"], myDictionary["mar_ask"], myDictionary["may_ask"], myDictionary["apr_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty"], myDictionary_1["apr_askqty"], "two");
                            dataGridView2.Rows[33].Cells[1].Value = Sell_Vwap(myDictionary["mar_bid"], myDictionary["may_bid"], myDictionary["apr_bid"], myDictionary["mar_ask"], myDictionary["may_ask"], myDictionary["apr_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty"], myDictionary_1["apr_askqty"], "two");
                            dataGridView2.Rows[34].Cells[1].Value = Buy_Vwap(myDictionary["mar_bid"], myDictionary["may_bid_i"], myDictionary["apr_bid_i"], myDictionary["mar_ask"], myDictionary["may_ask_i"], myDictionary["apr_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty_i"], myDictionary_1["apr_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty_i"], myDictionary_1["apr_askqty_i"], "two");
                            dataGridView2.Rows[35].Cells[1].Value = Sell_Vwap(myDictionary["mar_bid"], myDictionary["may_bid_i"], myDictionary["apr_bid_i"], myDictionary["mar_ask"], myDictionary["may_ask_i"], myDictionary["apr_ask_i"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty_i"], myDictionary_1["apr_bidqty_i"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty_i"], myDictionary_1["apr_askqty_i"], "two");
                            if (allowed_1 && prod_name.Contains("Jul24 .net") && best_bid_1_received && best_ask_1_received)
                            {

                                vwap_jun_jul = x;


                                /* richTextBox1.AppendText(String.Format("\naa rha*2 ", user_price_b, best_ask_1));*/
                                lock (OriginalBuyLock)
                                {
                                    /* richTextBox1.AppendText(String.Format("\naayyaaaaaaaa"));*/
                                    if (buying_1 && qouted_price_received_b && qt1_b >= 0)
                                    {


                                        if (Convert.ToDecimal(user_price_b) > Convert.ToDecimal(best_ask_1))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1}", user_price_b, best_ask_1));
                                            buying_1 = false;
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_1_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-sr1 jun-jul", final_price_1_b, ask));
                                                buying_1 = false;
                                            }
                                            else
                                            {


                                                first_1_b++;
                                                if (qt1_b == 0)
                                                {
                                                    new_reload_1_b = false;
                                                    dataGridView2.Rows[12].Cells[6].Value = fill_1_b;
                                                    dataGridView2.Rows[12].Cells[4].Value = "0";
                                                }
                                                /* richTextBox1.AppendText(String.Format("this is it {0},{1}", qoute_stuck_side_b_1, qoute_stuck_side_b_2));*/

                                                string res = ordermanagement("SR3Jun24", "SR1Jul24", myDictionary["jun_bid"], myDictionary["jul_ask"], qoute_stuck_side_b_1, qoute_stuck_side_b_2, order_b_a1, order_b_a2, order_b_a1n, order_b_a2n, wait_1_b, qoute_stuck_price_b_1, m_instrumentTradeSubscription_1, m_instrumentTradeSubscription_1_a1, m_instrumentTradeSubscription_1_a2, m_orderKey_b, new_reload_1_b, m_childorderKey_b_1, m_childorderKey_b_2, change_b, qouted_price_received_b, final_price_1_b, qt1_b, rel_1_b, instrument_1_a1, instrument_1_a2, instrument_1, partial_fill_b_1, partial_fill_b_2, "buying", vwap_jun_jul,fill_1_b,button5);
                                                wait_1_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_1_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_b_1 = res.Split('+')[6];
                                                m_childorderKey_b_2 = res.Split('+')[7];
                                                m_orderKey_b = res.Split('+')[8];
                                                change_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qt1_b = Convert.ToDecimal(res.Split('+')[10]);
                                                /*  richTextBox1.AppendText(String.Format("this is it {0}",res));*/
                                                datagrid_updation_2("BUY", 12, Buy_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid"], myDictionary["aug_bid"], myDictionary["jun_ask"], myDictionary["jul_ask"], myDictionary["aug_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty"], myDictionary_1["aug_askqty"], "two"), m_instrumentTradeSubscription_1, m_instrumentTradeSubscription_1_a1, m_instrumentTradeSubscription_1_a2, m_orderKey_b, pause_1_b, qt1_b, rel_1_b, fill_1_b, user_price_b);

                                                if (change_b == true)
                                                {
                                                    change_b = false;
                                                }
                                            }
                                        }
                                    }
                                    /*richTextBox1.AppendText(String.Format("\ngaayyaaaaaaaa"));*/

                                }
                                lock (OriginalsellLock)
                                {
                                    if (selling_1 && qouted_price_received_s && qt1_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_s) < Convert.ToDecimal(best_bid_1))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", user_price_s, best_bid_1));
                                            selling_1 = false;

                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_1_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 jun-jul", final_price_1_s, bid));
                                                selling_1 = false;

                                            }
                                            else
                                            {

                                                /* richTextBox1.AppendText(String.Format("this is it {0}:{1}", qoute_stuck_side_s_1,qoute_stuck_side_s_2));*/
                                                first_1_s++;
                                                if (qt1_s == 0)
                                                {
                                                    new_reload_1_s = false;
                                                    dataGridView2.Rows[13].Cells[6].Value = fill_1_s;
                                                    dataGridView2.Rows[13].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Jun24", "SR1Jul24", myDictionary["jun_ask"], myDictionary["jul_bid"], qoute_stuck_side_s_1, qoute_stuck_side_s_2, order_s_a1, order_s_a2, order_s_a1n, order_s_a2n, wait_1_s, qoute_stuck_price_s_1, m_instrumentTradeSubscription_1, m_instrumentTradeSubscription_1_a1, m_instrumentTradeSubscription_1_a2, m_orderKey_s, new_reload_1_s, m_childorderKey_s_1, m_childorderKey_s_2, change_s, qouted_price_received_s, final_price_1_s, qt1_s, rel_1_s, instrument_1_a1, instrument_1_a2, instrument_1, partial_fill_s_1, partial_fill_s_2, "selling", vwap_jun_jul,fill_1_s,button6);
                                                wait_1_s = Convert.ToBoolean(res.Split('+')[0]);
                                                order_s_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_s_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_s_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_s_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_1_s = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_s_1 = res.Split('+')[6];
                                                m_childorderKey_s_2 = res.Split('+')[7];
                                                m_orderKey_s = res.Split('+')[8];
                                                change_s = Convert.ToBoolean(res.Split('+')[9]);
                                                qt1_s = Convert.ToDecimal(res.Split('+')[10]);
                                                /*richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("SELL", 13, Sell_Vwap(myDictionary["jun_bid"], myDictionary["jul_bid"], myDictionary["aug_bid"], myDictionary["jun_ask"], myDictionary["jul_ask"], myDictionary["aug_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["jul_askqty"], myDictionary_1["aug_askqty"], "two"), m_instrumentTradeSubscription_1, m_instrumentTradeSubscription_1_a1, m_instrumentTradeSubscription_1_a2, m_orderKey_s, pause_1_s, qt1_s, rel_1_s, fill_1_s, user_price_s);

                                                if (change_s == true)
                                                {
                                                    change_s = false;
                                                }
                                            }
                                        }
                                    }
                                }

                            }



                            /*  if (m_orderKey_s == "" && !buying_1&&qouted_price_received_s)
                              {
                                  // If there is no order working, submit one .
                                  first_1_s++;
                                  OrderProfile op = new OrderProfile(e.Fields.Instrument);
                                  op.BuySell = BuySell.Sell;
                                  op.Account = m_accounts.ElementAt(14);
                                  qt1 = Convert.ToDecimal(textBox1.Text);
                                  op.OrderQuantity = Quantity.FromDecimal(e.Fields.Instrument, qt1);
                                  op.OrderType = OrderType.Limit;
                                  op.LimitPrice = final_price_1;

                                  if (!m_instrumentTradeSubscription.SendOrder(op))
                                  {
                                      Log.Information("Send new order Failed.!!");
                                      richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));
                                      Dispose();
                                  }
                                  else
                                  {
                                      m_orderKey_s = op.SiteOrderKey;
                                      Log.Information("\nSent new order: " + e.Fields.Instrument.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                      richTextBox1.AppendText(String.Format("\nSent new order: " + e.Fields.Instrument.Name + " " + op.BuySell + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));
                                  }
                              }
                              else if (m_instrumentTradeSubscription.Orders.ContainsKey(m_orderKey_s) & change_s == true)
                              {
                                  // If there is a working order, reprice it
                                  OrderProfile op = m_instrumentTradeSubscription.Orders[m_orderKey_s].GetOrderProfile();
                                  op.LimitPrice = final_price_1;
                                  op.Action = OrderAction.Change;

                                  Log.Information("Change price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_s].LimitPrice, op.LimitPrice);
                                  richTextBox1.AppendText(String.Format("\nChange price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_s].LimitPrice, op.LimitPrice));

                                  if (!m_instrumentTradeSubscription.SendOrder(op))
                                  {
                                      Log.Information("Sent order update: " + e.Fields.Instrument.Name + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey);
                                      richTextBox1.AppendText(String.Format("\nSent order update: " + e.Fields.Instrument.Name + " " + op.OrderQuantity.ToString() + "@" + op.LimitPrice.ToString() + " SOK=" + op.SiteOrderKey));
                                  }
                                  else
                                  {
                                      Log.Information("Send change order succeeded.");
                                      richTextBox1.AppendText(String.Format("\nSend change order succeeded."));
                                  }
                              }
                          }*/
                            Log.Information("hey");
                            Log.Information("{0}", qouted_price_received_2_b);
                            Log.Information("{0}", qouted_price_received_2_s);
                            Log.Information("{0}", allowed_2);
                            Log.Information("{0}", prod_name.Contains("Jun24/Sr1 Aug24 .net"));
                            if (allowed_2 && prod_name.Contains("Jun24/Sr1 Aug24 .net") && best_ask_1_received && best_bid_1_received)
                            {

                                vwap_jun_aug = x;

                                lock (OriginalBuy2Lock)
                                {
                                    if (buying_2 && qouted_price_received_2_b && qt2_b >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_2_b) > Convert.ToDecimal(best_ask_1))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} ", user_price_2_b, best_ask_1));
                                            buying_2 = false;
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_2_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-sr1 jun-aug", final_price_2_b, ask));
                                                buying_2 = false;

                                            }
                                            else
                                            {
                                                first_2_b++;
                                                if (qt2_b == 0)
                                                {
                                                    new_reload_2_b = false;
                                                    dataGridView2.Rows[16].Cells[6].Value = fill_2_b;
                                                    dataGridView2.Rows[16].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Jun24", "SR1Aug24", myDictionary["jun_bid"], myDictionary["aug_ask"], qoute_stuck_side_1_b_1, qoute_stuck_side_1_b_2, order_1_b_a1, order_1_b_a2, order_1_b_a1n, order_1_b_a2n, wait_2_b, qoute_stuck_price_1_b_1, m_instrumentTradeSubscription_2, m_instrumentTradeSubscription_2_a1, m_instrumentTradeSubscription_2_a2, m_orderKey_1_b, new_reload_2_b, m_childorderKey_1_b_1, m_childorderKey_1_b_2, change_2_b, qouted_price_received_2_b, final_price_2_b, qt2_b, rel_2_b, instrument_2_a1, instrument_2_a2, instrument_2, partial_fill_1_b_1, partial_fill_1_b_2, "buying", vwap_jun_aug,fill_2_b,button4);
                                                wait_2_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_1_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_1_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_1_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_1_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_2_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_1_b_1 = res.Split('+')[6];
                                                m_childorderKey_1_b_2 = res.Split('+')[7];
                                                m_orderKey_1_b = res.Split('+')[8];
                                                change_2_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qt2_b = Convert.ToDecimal(res.Split('+')[10]);


                                                datagrid_updation_2("BUY", 16, Buy_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid"], myDictionary["jul_bid"], myDictionary["jun_ask"], myDictionary["aug_ask"], myDictionary["jul_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty"], myDictionary_1["jul_askqty"], "two"), m_instrumentTradeSubscription_2, m_instrumentTradeSubscription_2_a1, m_instrumentTradeSubscription_2_a2, m_orderKey_1_b, pause_2_b, qt2_b, rel_2_b, fill_2_b, user_price_2_b);


                                                if (change_2_b == true)
                                                {
                                                    change_2_b = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                lock (Originalsell2Lock)
                                {
                                    if (selling_2 && qouted_price_received_2_s && qt2_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_2_s) < Convert.ToDecimal(best_bid_1))

                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));
                                            selling_2 = false;
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(final_price_2_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 jun-aug", final_price_2_s, bid));
                                                selling_2 = false;

                                            }
                                            else
                                            {
                                                /* richTextBox1.AppendText(String.Format("\n sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));*/
                                                first_2_s++;

                                                if (qt2_s == 0)
                                                {
                                                    new_reload_2_s = false;
                                                    dataGridView2.Rows[17].Cells[6].Value = fill_2_s;
                                                    dataGridView2.Rows[17].Cells[4].Value = "0";
                                                }
                                                string res1 = ordermanagement("SR3Jun24", "SR1Aug24", myDictionary["jun_ask"], myDictionary["aug_bid"], qoute_stuck_side_1_s_1, qoute_stuck_side_1_s_2, order_1_s_a1, order_1_s_a2, order_1_s_a1n, order_1_s_a2n, wait_2_s, qoute_stuck_price_1_s_1, m_instrumentTradeSubscription_2, m_instrumentTradeSubscription_2_a1, m_instrumentTradeSubscription_2_a2, m_orderKey_1_s, new_reload_2_s, m_childorderKey_1_s_1, m_childorderKey_1_s_2, change_2_s, qouted_price_received_2_s, final_price_2_s, qt2_s, rel_2_s, instrument_2_a1, instrument_2_a2, instrument_2, partial_fill_1_s_1, partial_fill_1_s_2, "selling", vwap_jun_aug,fill_2_s,button3);
                                                wait_2_s = Convert.ToBoolean(res1.Split('+')[0]);
                                                order_1_s_a1n = Convert.ToBoolean(res1.Split('+')[1]);
                                                order_1_s_a1 = Convert.ToBoolean(res1.Split('+')[2]);
                                                order_1_s_a2n = Convert.ToBoolean(res1.Split('+')[3]);
                                                order_1_s_a2 = Convert.ToBoolean(res1.Split('+')[4]);
                                                new_reload_2_s = Convert.ToBoolean(res1.Split('+')[5]);
                                                m_childorderKey_1_s_1 = res1.Split('+')[6];
                                                m_childorderKey_1_s_2 = res1.Split('+')[7];
                                                m_orderKey_1_s = res1.Split('+')[8];
                                                change_2_s = Convert.ToBoolean(res1.Split('+')[9]);
                                                qt2_s = Convert.ToDecimal(res1.Split('+')[10]);

                                                datagrid_updation_2("SELL", 17, Sell_Vwap(myDictionary["jun_bid"], myDictionary["aug_bid"], myDictionary["jul_bid"], myDictionary["jun_ask"], myDictionary["aug_ask"], myDictionary["jul_ask"], myDictionary_1["jun_bidqty"], myDictionary_1["aug_bidqty"], myDictionary_1["jul_bidqty"], myDictionary_1["jun_askqty"], myDictionary_1["aug_askqty"], myDictionary_1["jul_askqty"], "two"), m_instrumentTradeSubscription_2, m_instrumentTradeSubscription_2_a1, m_instrumentTradeSubscription_2_a2, m_orderKey_1_s, pause_2_s, qt2_s, rel_2_s, fill_2_s, user_price_2_s);



                                                if (change_2_s == true)
                                                {
                                                    change_2_s = false;
                                                }
                                            }
                                        }


                                    }
                                }
                            }
                            /*  if (m_orderKey_1_b == ""&&buying_2&& qouted_price_received_2_b)
                          {
                              // If there is no order working, submit one .
                              first_2_b++;

                              OrderProfile op1 = new OrderProfile(e.Fields.Instrument);
                               op1.BuySell = BuySell.Buy; 

                              op1.Account = m_accounts.ElementAt(14);
                              qt2 = Convert.ToDecimal(textBox6.Text);
                              op1.OrderQuantity = Quantity.FromDecimal(e.Fields.Instrument, qt2);
                              op1.OrderType = OrderType.Limit;
                              op1.LimitPrice = final_price_2;

                              if (!m_instrumentTradeSubscription.SendOrder(op1))
                              {
                                  Log.Information("Send new order Failed.!!");
                                  richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));
                                  Dispose();
                              }
                              else
                              {
                                  m_orderKey_1_b = op1.SiteOrderKey;
                                  Log.Information("\nSent new order: " + e.Fields.Instrument.Name + " " + op1.BuySell + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey);
                                  richTextBox1.AppendText(String.Format("\nSent new order: " + e.Fields.Instrument.Name + " " + op1.BuySell + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey));
                              }
                          }
                          else if (m_instrumentTradeSubscription.Orders.ContainsKey(m_orderKey_1_b) & change_2_b == true)
                          {
                              // If there is a working order, reprice it
                              OrderProfile op1 = m_instrumentTradeSubscription.Orders[m_orderKey_1_b].GetOrderProfile();
                              op1.LimitPrice = final_price_2;
                              op1.Action = OrderAction.Change;

                              Log.Information("Change price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_1_b].LimitPrice, op1.LimitPrice);
                              richTextBox1.AppendText(String.Format("\nChange price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_1_b].LimitPrice, op1.LimitPrice));

                              if (!m_instrumentTradeSubscription.SendOrder(op1))
                              {
                                  Log.Information("Sent order update: " + e.Fields.Instrument.Name + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey);
                                  richTextBox1.AppendText(String.Format("\nSent order update: " + e.Fields.Instrument.Name + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey));
                              }
                              else
                              {
                                  Log.Information("Send change order succeeded.");
                                  richTextBox1.AppendText(String.Format("\nSend change order succeeded."));
                              }
                          }



                          if (m_orderKey_1_s == "" && !buying_2 && qouted_price_received_2_s)
                          {
                              // If there is no order working, submit one .
                              first_2_s++;

                              OrderProfile op1 = new OrderProfile(e.Fields.Instrument);
                              op1.BuySell = BuySell.Sell;

                              op1.Account = m_accounts.ElementAt(14);
                              qt2 = Convert.ToDecimal(textBox6.Text);
                              op1.OrderQuantity = Quantity.FromDecimal(e.Fields.Instrument, qt2);
                              op1.OrderType = OrderType.Limit;
                              op1.LimitPrice = final_price_2;

                              if (!m_instrumentTradeSubscription.SendOrder(op1))
                              {
                                  Log.Information("Send new order Failed.!!");
                                  richTextBox1.AppendText(String.Format("\nSend new order Failed.!!"));
                                  Dispose();
                              }
                              else
                              {
                                  m_orderKey_1_s = op1.SiteOrderKey;
                                  Log.Information("\nSent new order: " + e.Fields.Instrument.Name + " " + op1.BuySell + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey);
                                  richTextBox1.AppendText(String.Format("\nSent new order: " + e.Fields.Instrument.Name + " " + op1.BuySell + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey));
                              }
                          }
                          else if (m_instrumentTradeSubscription.Orders.ContainsKey(m_orderKey_1_s) & change_2_s == true)
                          {
                              // If there is a working order, reprice it
                              OrderProfile op1 = m_instrumentTradeSubscription.Orders[m_orderKey_1_s].GetOrderProfile();
                              op1.LimitPrice = final_price_2;
                              op1.Action = OrderAction.Change;

                              Log.Information("Change price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_1_s].LimitPrice, op1.LimitPrice);
                              richTextBox1.AppendText(String.Format("\nChange price from {0} to {1}", m_instrumentTradeSubscription.Orders[m_orderKey_1_s].LimitPrice, op1.LimitPrice));

                              if (!m_instrumentTradeSubscription.SendOrder(op1))
                              {
                                  Log.Information("Sent order update: " + e.Fields.Instrument.Name + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey);
                                  richTextBox1.AppendText(String.Format("\nSent order update: " + e.Fields.Instrument.Name + " " + op1.OrderQuantity.ToString() + "@" + op1.LimitPrice.ToString() + " SOK=" + op1.SiteOrderKey));
                              }
                              else
                              {
                                  Log.Information("Send change order succeeded.");
                                  richTextBox1.AppendText(String.Format("\nSend change order succeeded."));
                              }
                          }*/

                            if (allowed_3 && prod_name.Contains("Jan24 .net") && best_bid_2_received && best_ask_2_received)
                            {
                                vwap_dec_jan = x;
                                /* richTextBox1.AppendText(String.Format("\naa rha*2 ", user_price_b, best_ask_1));*/
                                lock (OriginalBuy3Lock)
                                {
                                    /* richTextBox1.AppendText(String.Format("\naayyaaaaaaaa"));*/
                                    if (buying_3 && qouted_price_received_3_b && qt3_b >= 0)
                                    {


                                        if (Convert.ToDecimal(user_price_3_b) > Convert.ToDecimal(best_ask_2))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1}", user_price_3_b, best_ask_2));
                                            buying_3 = false;
                                        }
                                        else
                                        {

                                            if (Convert.ToDecimal(final_price_3_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-sr1 dec-jan", final_price_3_b, ask));
                                                buying_3 = false;

                                            }
                                            else
                                            {
                                                first_3_b++;
                                                if (qt3_b == 0)
                                                {
                                                    new_reload_3_b = false;
                                                    dataGridView2.Rows[20].Cells[6].Value = fill_3_b;
                                                    dataGridView2.Rows[20].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Dec23", "SR1Jan24", myDictionary["dec_bid"], myDictionary["jan_ask"], qoute_stuck_side_3_b_1, qoute_stuck_side_3_b_2, order_3_b_a1, order_3_b_a2, order_3_b_a1n, order_3_b_a2n, wait_3_b, qoute_stuck_price_3_b_1, m_instrumentTradeSubscription_3, m_instrumentTradeSubscription_3_a1, m_instrumentTradeSubscription_3_a2, m_orderKey_3_b, new_reload_3_b, m_childorderKey_3_b_1, m_childorderKey_3_b_2, change_3_b, qouted_price_received_3_b, final_price_3_b, qt3_b, rel_3_b, instrument_3_a1, instrument_3_a2, instrument_3, partial_fill_3_b_1, partial_fill_3_b_2, "buying", vwap_dec_jan,fill_3_b,button31);
                                                wait_3_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_3_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_3_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_3_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_3_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_3_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_3_b_1 = res.Split('+')[6];
                                                m_childorderKey_3_b_2 = res.Split('+')[7];
                                                m_orderKey_3_b = res.Split('+')[8];
                                                change_3_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qt3_b = Convert.ToDecimal(res.Split('+')[10]);
                                                /*  richTextBox1.AppendText(String.Format("this is it {0}",res));*/
                                                datagrid_updation_2("BUY", 20, Buy_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid"], myDictionary["feb_bid"], myDictionary["dec_ask"], myDictionary["jan_ask"], myDictionary["feb_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty"], myDictionary_1["feb_askqty"], "two"), m_instrumentTradeSubscription_3, m_instrumentTradeSubscription_3_a1, m_instrumentTradeSubscription_3_a2, m_orderKey_3_b, pause_3_b, qt3_b, rel_3_b, fill_3_b, user_price_3_b);

                                                if (change_3_b == true)
                                                {
                                                    change_3_b = false;
                                                }
                                            }
                                        }
                                    }
                                    /*richTextBox1.AppendText(String.Format("\ngaayyaaaaaaaa"));*/

                                }
                                lock (Originalsell3Lock)
                                {
                                    if (selling_3 && qouted_price_received_3_s && qt3_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_3_s) < Convert.ToDecimal(best_bid_2))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", user_price_3_s, best_bid_2));
                                            selling_3 = false;

                                        }
                                        else
                                        {
                                            /*  richTextBox1.AppendText(String.Format("this is it {0}:{1}", qoute_stuck_side_3_s_1, qoute_stuck_side_3_s_2));*/
                                            if (Convert.ToDecimal(final_price_3_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 dec-jan", final_price_3_s, bid));
                                                selling_3 = false;

                                            }
                                            else
                                            {
                                                first_3_s++;
                                                if (qt3_s == 0)
                                                {
                                                    new_reload_3_s = false;
                                                    dataGridView2.Rows[21].Cells[6].Value = fill_3_s;
                                                    dataGridView2.Rows[21].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Dec23", "SR1Jan24", myDictionary["dec_ask"], myDictionary["jan_bid"], qoute_stuck_side_3_s_1, qoute_stuck_side_3_s_2, order_3_s_a1, order_3_s_a2, order_3_s_a1n, order_3_s_a2n, wait_3_s, qoute_stuck_price_3_s_1, m_instrumentTradeSubscription_3, m_instrumentTradeSubscription_3_a1, m_instrumentTradeSubscription_3_a2, m_orderKey_3_s, new_reload_3_s, m_childorderKey_3_s_1, m_childorderKey_3_s_2, change_3_s, qouted_price_received_3_s, final_price_3_s, qt3_s, rel_3_s, instrument_3_a1, instrument_3_a2, instrument_3, partial_fill_3_s_1, partial_fill_3_s_2, "selling", vwap_dec_jan,fill_3_s,button29);
                                                wait_3_s = Convert.ToBoolean(res.Split('+')[0]);
                                                order_3_s_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_3_s_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_3_s_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_3_s_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_3_s = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_3_s_1 = res.Split('+')[6];
                                                m_childorderKey_3_s_2 = res.Split('+')[7];
                                                m_orderKey_3_s = res.Split('+')[8];
                                                change_3_s = Convert.ToBoolean(res.Split('+')[9]);
                                                qt3_s = Convert.ToDecimal(res.Split('+')[10]);
                                                /*richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("SELL", 21, Sell_Vwap(myDictionary["dec_bid"], myDictionary["jan_bid"], myDictionary["feb_bid"], myDictionary["dec_ask"], myDictionary["jan_ask"], myDictionary["feb_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["jan_askqty"], myDictionary_1["feb_askqty"], "two"), m_instrumentTradeSubscription_3, m_instrumentTradeSubscription_3_a1, m_instrumentTradeSubscription_3_a2, m_orderKey_3_s, pause_3_s, qt3_s, rel_3_s, fill_3_s, user_price_3_s);

                                                if (change_3_s == true)
                                                {
                                                    change_3_s = false;
                                                }

                                            }
                                        }
                                    }

                                }
                            }
                            if (allowed_4 && prod_name.Contains("Feb24 .net") && best_ask_2_received && best_bid_2_received)
                            {

                                vwap_dec_feb = x;

                                lock (OriginalBuy4Lock)
                                {
                                    if (buying_4 && qouted_price_received_4_b && qt4_b >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_4_b) > Convert.ToDecimal(best_ask_2))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} ", user_price_4_b, best_ask_2));
                                            buying_4 = false;
                                        }
                                        else
                                        {
                                            /*  ric*//*hTextBox1.AppendText(String.Format("\n buy at {0} as best_ask is {1},{2} ", user_price_4_b, best_ask_2,rel_4_b));*/
                                            if (Convert.ToDecimal(final_price_4_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-sr1 dec-feb", final_price_4_b, ask));
                                                buying_4 = false;

                                            }
                                            else
                                            {
                                                first_4_b++;
                                                if (qt4_b == 0)
                                                {
                                                    new_reload_4_b = false;
                                                    dataGridView2.Rows[24].Cells[6].Value = fill_4_b;
                                                    dataGridView2.Rows[24].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Dec23", "SR1Feb24", myDictionary["dec_bid"], myDictionary["feb_ask"], qoute_stuck_side_4_b_1, qoute_stuck_side_4_b_2, order_4_b_a1, order_4_b_a2, order_4_b_a1n, order_4_b_a2n, wait_4_b, qoute_stuck_price_4_b_1, m_instrumentTradeSubscription_4, m_instrumentTradeSubscription_4_a1, m_instrumentTradeSubscription_4_a2, m_orderKey_4_b, new_reload_4_b, m_childorderKey_4_b_1, m_childorderKey_4_b_2, change_4_b, qouted_price_received_4_b, final_price_4_b, qt4_b, rel_4_b, instrument_4_a1, instrument_4_a2, instrument_4, partial_fill_4_b_1, partial_fill_4_b_2, "buying", vwap_dec_feb,fill_4_b,button23);
                                                wait_4_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_4_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_4_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_4_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_4_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_4_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_4_b_1 = res.Split('+')[6];
                                                m_childorderKey_4_b_2 = res.Split('+')[7];
                                                m_orderKey_4_b = res.Split('+')[8];
                                                change_4_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qt4_b = Convert.ToDecimal(res.Split('+')[10]);


                                                datagrid_updation_2("BUY", 24, Buy_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid"], myDictionary["jan_bid"], myDictionary["dec_ask"], myDictionary["feb_ask"], myDictionary["jan_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty"], myDictionary_1["jan_askqty"], "two"), m_instrumentTradeSubscription_4, m_instrumentTradeSubscription_4_a1, m_instrumentTradeSubscription_4_a2, m_orderKey_4_b, pause_4_b, qt4_b, rel_4_b, fill_4_b, user_price_4_b);


                                                if (change_4_b == true)
                                                {
                                                    change_4_b = false;
                                                }
                                            }
                                        }
                                    }
                                }

                                lock (Originalsell4Lock)
                                {
                                    if (selling_4 && qouted_price_received_4_s && qt4_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_4_s) < Convert.ToDecimal(best_bid_2))

                                        {

                                            selling_4 = false;
                                        }
                                        else
                                        {
                                            /* richTextBox1.AppendText(String.Format("\n sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));*/
                                            if (Convert.ToDecimal(final_price_4_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 dec-feb", final_price_4_s, bid));
                                                selling_4 = false;

                                            }
                                            else
                                            {
                                                first_4_s++;

                                                if (qt4_s == 0)
                                                {
                                                    new_reload_4_s = false;
                                                    dataGridView2.Rows[25].Cells[6].Value = fill_4_s;
                                                    dataGridView2.Rows[25].Cells[4].Value = "0";
                                                }
                                                string res1 = ordermanagement("SR3Dec23", "SR1Feb24", myDictionary["dec_ask"], myDictionary["feb_bid"], qoute_stuck_side_4_s_1, qoute_stuck_side_4_s_2, order_4_s_a1, order_4_s_a2, order_4_s_a1n, order_4_s_a2n, wait_4_s, qoute_stuck_price_4_s_1, m_instrumentTradeSubscription_4, m_instrumentTradeSubscription_4_a1, m_instrumentTradeSubscription_4_a2, m_orderKey_4_s, new_reload_4_s, m_childorderKey_4_s_1, m_childorderKey_4_s_2, change_4_s, qouted_price_received_4_s, final_price_4_s, qt4_s, rel_4_s, instrument_4_a1, instrument_4_a2, instrument_4, partial_fill_4_s_1, partial_fill_4_s_2, "selling", vwap_dec_feb,fill_4_s,button27);
                                                wait_4_s = Convert.ToBoolean(res1.Split('+')[0]);
                                                order_4_s_a1n = Convert.ToBoolean(res1.Split('+')[1]);
                                                order_4_s_a1 = Convert.ToBoolean(res1.Split('+')[2]);
                                                order_4_s_a2n = Convert.ToBoolean(res1.Split('+')[3]);
                                                order_4_s_a2 = Convert.ToBoolean(res1.Split('+')[4]);
                                                new_reload_4_s = Convert.ToBoolean(res1.Split('+')[5]);
                                                m_childorderKey_4_s_1 = res1.Split('+')[6];
                                                m_childorderKey_4_s_2 = res1.Split('+')[7];
                                                m_orderKey_4_s = res1.Split('+')[8];
                                                change_4_s = Convert.ToBoolean(res1.Split('+')[9]);
                                                qt4_s = Convert.ToDecimal(res1.Split('+')[10]);

                                                datagrid_updation_2("SELL", 25, Sell_Vwap(myDictionary["dec_bid"], myDictionary["feb_bid"], myDictionary["jan_bid"], myDictionary["dec_ask"], myDictionary["feb_ask"], myDictionary["jan_ask"], myDictionary_1["dec_bidqty"], myDictionary_1["feb_bidqty"], myDictionary_1["jan_bidqty"], myDictionary_1["dec_askqty"], myDictionary_1["feb_askqty"], myDictionary_1["jan_askqty"], "two"), m_instrumentTradeSubscription_4, m_instrumentTradeSubscription_4_a1, m_instrumentTradeSubscription_4_a2, m_orderKey_4_s, pause_4_s, qt4_s, rel_4_s, fill_4_s, user_price_4_s);



                                                if (change_4_s == true)
                                                {
                                                    change_4_s = false;
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                            if (allowed_5 && prod_name.Contains("Apr24 .net") && best_bid_3_received && best_ask_3_received)
                            {
                                vwap_mar_apr = x;
                                /* richTextBox1.AppendText(String.Format("\naa rha*2 ", user_price_b, best_ask_1));*/
                                lock (OriginalBuy5Lock)
                                {
                                    /* richTextBox1.AppendText(String.Format("\naayyaaaaaaaa"));*/
                                    if (buying_5 && qouted_price_received_5_b && qt5_b >= 0)
                                    {


                                        if (Convert.ToDecimal(user_price_5_b) > Convert.ToDecimal(best_ask_3))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1}", user_price_5_b, best_ask_3));
                                            buying_5 = false;
                                        }
                                        else
                                        {

                                            if (Convert.ToDecimal(final_price_5_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-sr1 mar-apr", final_price_5_b, ask));
                                                buying_5 = false;

                                            }
                                            else
                                            {
                                                first_5_b++;
                                                if (qt5_b == 0)
                                                {
                                                    new_reload_5_b = false;
                                                    dataGridView2.Rows[28].Cells[6].Value = fill_5_b;
                                                    dataGridView2.Rows[28].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Mar24", "SR1Apr24", myDictionary["mar_bid"], myDictionary["apr_ask"], qoute_stuck_side_5_b_1, qoute_stuck_side_5_b_2, order_5_b_a1, order_5_b_a2, order_5_b_a1n, order_5_b_a2n, wait_5_b, qoute_stuck_price_5_b_1, m_instrumentTradeSubscription_5, m_instrumentTradeSubscription_5_a1, m_instrumentTradeSubscription_5_a2, m_orderKey_5_b, new_reload_5_b, m_childorderKey_5_b_1, m_childorderKey_5_b_2, change_5_b, qouted_price_received_5_b, final_price_5_b, qt5_b, rel_5_b, instrument_5_a1, instrument_5_a2, instrument_5, partial_fill_5_b_1, partial_fill_5_b_2, "buying", vwap_mar_apr,fill_5_b,button39);
                                                wait_5_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_5_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_5_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_5_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_5_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_5_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_5_b_1 = res.Split('+')[6];
                                                m_childorderKey_5_b_2 = res.Split('+')[7];
                                                m_orderKey_5_b = res.Split('+')[8];
                                                change_5_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qt5_b = Convert.ToDecimal(res.Split('+')[10]);
                                                /*  richTextBox1.AppendText(String.Format("this is it {0}",res));*/
                                                datagrid_updation_2("BUY", 28, Buy_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid"], myDictionary["may_bid"], myDictionary["mar_ask"], myDictionary["apr_ask"], myDictionary["may_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty"], myDictionary_1["may_askqty"], "two"), m_instrumentTradeSubscription_5, m_instrumentTradeSubscription_5_a1, m_instrumentTradeSubscription_5_a2, m_orderKey_5_b, pause_5_b, qt5_b, rel_5_b, fill_5_b, user_price_5_b);

                                                if (change_5_b == true)
                                                {
                                                    change_5_b = false;
                                                }
                                            }
                                        }
                                    }
                                    /*richTextBox1.AppendText(String.Format("\ngaayyaaaaaaaa"));*/

                                }
                                lock (Originalsell5Lock)
                                {
                                    if (selling_5 && qouted_price_received_5_s && qt5_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_5_s) < Convert.ToDecimal(best_bid_3))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} ", user_price_5_s, best_bid_3));
                                            selling_5 = false;

                                        }
                                        else
                                        {
                                            /*  richTextBox1.AppendText(String.Format("this is it {0}:{1}", qoute_stuck_side_5_s_1, qoute_stuck_side_5_s_2));*/
                                            if (Convert.ToDecimal(final_price_5_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 mar-apr", final_price_5_s, bid));
                                                selling_5 = false;

                                            }
                                            else
                                            {
                                                first_5_s++;
                                                if (qt5_s == 0)
                                                {
                                                    new_reload_5_s = false;
                                                    dataGridView2.Rows[29].Cells[6].Value = fill_5_s;
                                                    dataGridView2.Rows[29].Cells[4].Value = "0";
                                                }
                                                string res = ordermanagement("SR3Mar24", "SR1Apr24", myDictionary["mar_ask"], myDictionary["apr_bid"], qoute_stuck_side_5_s_1, qoute_stuck_side_5_s_2, order_5_s_a1, order_5_s_a2, order_5_s_a1n, order_5_s_a2n, wait_5_s, qoute_stuck_price_5_s_1, m_instrumentTradeSubscription_5, m_instrumentTradeSubscription_5_a1, m_instrumentTradeSubscription_5_a2, m_orderKey_5_s, new_reload_5_s, m_childorderKey_5_s_1, m_childorderKey_5_s_2, change_5_s, qouted_price_received_5_s, final_price_5_s, qt5_s, rel_5_s, instrument_5_a1, instrument_5_a2, instrument_5, partial_fill_5_s_1, partial_fill_5_s_2, "selling", vwap_mar_apr,fill_5_s,button37);
                                                wait_5_s = Convert.ToBoolean(res.Split('+')[0]);
                                                order_5_s_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_5_s_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_5_s_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_5_s_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_5_s = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_5_s_1 = res.Split('+')[6];
                                                m_childorderKey_5_s_2 = res.Split('+')[7];
                                                m_orderKey_5_s = res.Split('+')[8];
                                                change_5_s = Convert.ToBoolean(res.Split('+')[9]);
                                                qt5_s = Convert.ToDecimal(res.Split('+')[10]);
                                                /*richTextBox1.AppendText(String.Format("this is it {0}", res));*/
                                                datagrid_updation_2("SELL", 29, Sell_Vwap(myDictionary["mar_bid"], myDictionary["apr_bid"], myDictionary["may_bid"], myDictionary["mar_ask"], myDictionary["apr_ask"], myDictionary["may_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["apr_askqty"], myDictionary_1["may_askqty"], "two"), m_instrumentTradeSubscription_5, m_instrumentTradeSubscription_5_a1, m_instrumentTradeSubscription_5_a2, m_orderKey_5_s, pause_5_s, qt5_s, rel_5_s, fill_5_s, user_price_5_s);

                                                if (change_5_s == true)
                                                {
                                                    change_5_s = false;
                                                }

                                            }
                                        }
                                    }

                                }
                            }
                            if (allowed_6 && prod_name.Contains("May24 .net") && best_ask_3_received && best_bid_3_received)
                            {

                                vwap_mar_may = x;

                                lock (OriginalBuy6Lock)
                                {
                                    if (buying_6 && qouted_price_received_6_b && qt6_b >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_6_b) > Convert.ToDecimal(best_ask_3))
                                        {
                                            richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} ", user_price_6_b, best_ask_3));
                                            buying_6 = false;
                                        }
                                        else
                                        {
                                            /*  ric*//*hTextBox1.AppendText(String.Format("\n buy at {0} as best_ask is {1},{2} ", user_price_6_b, best_ask_2,rel_6_b));*/
                                            if (Convert.ToDecimal(final_price_6_b) > Convert.ToDecimal(ask))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot buy at {0} as best_ask is {1} for sr3-sr1 mar-may", final_price_6_b, ask));
                                                buying_6 = false;

                                            }
                                            else
                                            {
                                                first_6_b++;
                                                if (qt6_b == 0)
                                                {
                                                    new_reload_6_b = false;
                                                    dataGridView2.Rows[32].Cells[6].Value = fill_6_b;
                                                    dataGridView2.Rows[32].Cells[4].Value = "0";
                                                }
                                                /*richTextBox1.AppendText(String.Format("\nYEH {0} :{1},{2} :{3} ,{4}:{5}", qoute_stuck_side_6_b_1, qoute_stuck_side_6_b_2, qoute_stuck_price_6_b_1, qoute_stuck_price_6_b_2, myDictionary["mar_bid"], myDictionary["may_ask"]));*/
                                                string res = ordermanagement("SR3Mar24", "SR1May24", myDictionary["mar_bid"], myDictionary["may_ask"], qoute_stuck_side_6_b_1, qoute_stuck_side_6_b_2, order_6_b_a1, order_6_b_a2, order_6_b_a1n, order_6_b_a2n, wait_6_b, qoute_stuck_price_6_b_1, m_instrumentTradeSubscription_6, m_instrumentTradeSubscription_6_a1, m_instrumentTradeSubscription_6_a2, m_orderKey_6_b, new_reload_6_b, m_childorderKey_6_b_1, m_childorderKey_6_b_2, change_6_b, qouted_price_received_6_b, final_price_6_b, qt6_b, rel_6_b, instrument_6_a1, instrument_6_a2, instrument_6, partial_fill_6_b_1, partial_fill_6_b_2, "buying", vwap_mar_may,fill_6_b,button47);
                                                wait_6_b = Convert.ToBoolean(res.Split('+')[0]);
                                                order_6_b_a1n = Convert.ToBoolean(res.Split('+')[1]);
                                                order_6_b_a1 = Convert.ToBoolean(res.Split('+')[2]);
                                                order_6_b_a2n = Convert.ToBoolean(res.Split('+')[3]);
                                                order_6_b_a2 = Convert.ToBoolean(res.Split('+')[4]);
                                                new_reload_6_b = Convert.ToBoolean(res.Split('+')[5]);
                                                m_childorderKey_6_b_1 = res.Split('+')[6];
                                                m_childorderKey_6_b_2 = res.Split('+')[7];
                                                m_orderKey_6_b = res.Split('+')[8];
                                                change_6_b = Convert.ToBoolean(res.Split('+')[9]);
                                                qt6_b = Convert.ToDecimal(res.Split('+')[10]);


                                                datagrid_updation_2("BUY", 32, Buy_Vwap(myDictionary["mar_bid"], myDictionary["may_bid"], myDictionary["apr_bid"], myDictionary["mar_ask"], myDictionary["may_ask"], myDictionary["apr_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty"], myDictionary_1["apr_askqty"], "two"), m_instrumentTradeSubscription_6, m_instrumentTradeSubscription_6_a1, m_instrumentTradeSubscription_6_a2, m_orderKey_6_b, pause_6_b, qt6_b, rel_6_b, fill_6_b, user_price_6_b);


                                                if (change_6_b == true)
                                                {
                                                    change_6_b = false;
                                                }
                                            }
                                        }
                                    }
                                }

                                lock (Originalsell6Lock)
                                {
                                    if (selling_6 && qouted_price_received_6_s && qt6_s >= 0)
                                    {
                                        if (Convert.ToDecimal(user_price_6_s) < Convert.ToDecimal(best_bid_3))

                                        {

                                            selling_6 = false;
                                          /*  richTextBox1.AppendText(String.Format("\nidhar {0},{1)", final_price_6_s, bid));*/

                                        }
                                        else
                                        {
                                            /* richTextBox1.AppendText(String.Format("\n sell at {0} as best_bid is {1} ", Convert.ToDecimal(user_price_2_s), Convert.ToDecimal(best_bid_1)));*/
                                            if (Convert.ToDecimal(final_price_6_s) < Convert.ToDecimal(bid))
                                            {
                                                richTextBox1.AppendText(String.Format("\ncannot sell at {0} as best_bid is {1} for sr3-sr1 mar-may", final_price_6_s, bid));
                                                selling_6 = false;

                                            }
                                            else
                                            {
                                                first_6_s++;

                                                if (qt6_s == 0)
                                                {
                                                    new_reload_6_s = false;
                                                    dataGridView2.Rows[33].Cells[6].Value = fill_6_s;
                                                    dataGridView2.Rows[33].Cells[4].Value = "0";
                                                }
                                                string res1 = ordermanagement("SR3Mar24", "SR1May24", myDictionary["mar_ask"], myDictionary["may_bid"], qoute_stuck_side_6_s_1, qoute_stuck_side_6_s_2, order_6_s_a1, order_6_s_a2, order_6_s_a1n, order_6_s_a2n, wait_6_s, qoute_stuck_price_6_s_1, m_instrumentTradeSubscription_6, m_instrumentTradeSubscription_6_a1, m_instrumentTradeSubscription_6_a2, m_orderKey_6_s, new_reload_6_s, m_childorderKey_6_s_1, m_childorderKey_6_s_2, change_6_s, qouted_price_received_6_s, final_price_6_s, qt6_s, rel_6_s, instrument_6_a1, instrument_6_a2, instrument_6, partial_fill_6_s_1, partial_fill_6_s_2, "selling", vwap_mar_may,fill_6_s,button45);
                                                wait_6_s = Convert.ToBoolean(res1.Split('+')[0]);
                                                order_6_s_a1n = Convert.ToBoolean(res1.Split('+')[1]);
                                                order_6_s_a1 = Convert.ToBoolean(res1.Split('+')[2]);
                                                order_6_s_a2n = Convert.ToBoolean(res1.Split('+')[3]);
                                                order_6_s_a2 = Convert.ToBoolean(res1.Split('+')[4]);
                                                new_reload_6_s = Convert.ToBoolean(res1.Split('+')[5]);
                                                m_childorderKey_6_s_1 = res1.Split('+')[6];
                                                m_childorderKey_6_s_2 = res1.Split('+')[7];
                                                m_orderKey_6_s = res1.Split('+')[8];
                                                change_6_s = Convert.ToBoolean(res1.Split('+')[9]);
                                                qt6_s = Convert.ToDecimal(res1.Split('+')[10]);

                                                datagrid_updation_2("SELL", 33, Sell_Vwap(myDictionary["mar_bid"], myDictionary["may_bid"], myDictionary["apr_bid"], myDictionary["mar_ask"], myDictionary["may_ask"], myDictionary["apr_ask"], myDictionary_1["mar_bidqty"], myDictionary_1["may_bidqty"], myDictionary_1["apr_bidqty"], myDictionary_1["mar_askqty"], myDictionary_1["may_askqty"], myDictionary_1["apr_askqty"], "two"), m_instrumentTradeSubscription_6, m_instrumentTradeSubscription_6_a1, m_instrumentTradeSubscription_6_a2, m_orderKey_6_s, pause_6_s, qt6_s, rel_6_s, fill_6_s, user_price_6_s);



                                                if (change_6_s == true)
                                                {
                                                    change_6_s = false;
                                                }

                                            }

                                        }
                                    }
                                }
                            }

                        }
                    }
                    Log.Information("Bid: {0}           BidQty: {1}\nAsk: {2}           AskQty: {3} \n{4}\n{5}", bid, bidQty, ask, askQty, x, prod_name);
                }
                else
                {
                    Log.Information("{0},{1},{2},{3},{4} price subscription wrong value", prod_name,bid,ask,bidQty,askQty);
                }
            }
           /* }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Environment.Exit(517);
            }*/
        }
        String fill_management(string fill_key,Quantity fill_q,Price match_p,BuySell bs,string childorder_1,string childorder_2,decimal rel_1,decimal partial_1,decimal partial_2,bool order_1,bool order_2,bool order_1n,bool order_2n, TradeSubscription m_1, TradeSubscription m_1_a1, TradeSubscription m_1_a2, string order_key, string order_key_old,string side_1,string side_2,decimal side_1_p,decimal side_2_p,string word,bool reload,string parent,string identifier,String order_updated_detail)
        {
            bool x = false;
            bool y = false;
            string res="";
            try
            {
                /*richTextBox1.AppendText(String.Format("\n side *1 {0}:{1}  {2}", side_1, side_2, partial_1));*//**/
                if ((fill_key == childorder_1 && fill_q == rel_1 * 5 - partial_1) || (fill_key == childorder_2 && fill_q == rel_1 * 3 - partial_2))
                {

                    if (fill_key == childorder_1)
                    {
                        childorder_1 = "";
                        partial_1 = 0;
                        partial_2 = 0;
                        x = true;
                    }
                    else
                    {
                        childorder_2 = "";
                        partial_1 = 0;
                        partial_2 = 0;
                        y = true;
                    }
                    /*richTextBox1.AppendText(String.Format("\n side  {0}:{1}  ", side_1, side_2));*/
                    if ((childorder_1 != "" || childorder_2 != "" || order_1 == true || order_2 == true) && (m_1.Orders.ContainsKey(order_key) || m_1_a1.Orders.ContainsKey(order_key) || m_1_a2.Orders.ContainsKey(order_key)))
                    {
                        if (side_1 == "")
                        {
                            /* richTextBox1.AppendText("idhar aata toh hai");*/
                            var wordish = word.Split(' ');
                            side_1 = wordish[1] + wordish[2];
                            side_1_p = Convert.ToDecimal(match_p);
                            order_key_old = order_key;
                            reload = true;
                            order_1 = false;
                            order_1n = false;
                            order_2 = false;
                            order_2n = false;

                        }
                        else
                        {
                            /*richTextBox1.AppendText(String.Format("\n side hmmm  {0}:{1}  ", side_1, side_2));*/
                            var wordish = word.Split(' ');
                            side_2 = wordish[1] + wordish[2];
                            side_2_p = Convert.ToDecimal(match_p);
                            order_1 = false;
                            order_1n = false;
                            order_2 = false;
                            order_2n = false;
                        }
                        if (x == true)
                        {
                            if (childorder_2 == order_updated_detail.Split('+')[4])
                            {
                                dataGridView1.Rows.Add(order_updated_detail.Split('+')[3], order_updated_detail.Split('+')[2], order_updated_detail.Split('+')[0], order_updated_detail.Split('+')[1], order_updated_detail.Split('+')[4]);
                                childorder_2 = "";
                            }
                        }
                        else if (y == true)
                        {
                            if (childorder_1 == order_updated_detail.Split('+')[4])
                            {
                                dataGridView1.Rows.Add(order_updated_detail.Split('+')[3], order_updated_detail.Split('+')[2], order_updated_detail.Split('+')[0], order_updated_detail.Split('+')[1], order_updated_detail.Split('+')[4]);
                                childorder_1 = "";
                            }
                        }
                    }
                    else
                    {
                        /* if(ord)*/
                        if (side_2 != "")
                        {
                            /* new_reload_1_b = true;*/
                            order_1 = false;
                            order_1n = false;
                            order_2 = false;
                            order_2n = false;

                            /*qoute_stuck_side_b_1 = "";
                            qoute_stuck_price_b_1 = 0;*/
                        }
                        else
                        {
                            reload = true;
                            order_1 = false;
                            order_1n = false;
                            order_2 = false;
                            order_2n = false;


                        }


                    }
                    /* if(e.Fill.SiteOrderKey== m_childorderKey_b_1 &&)*/
                }

                else if (parent.Contains("parent:" + order_key) == true && order_key != "")
                {
                    if (identifier == "buying")
                    {
                        if (bs == BuySell.Buy)
                        {
                            partial_1 += fill_q;
                        }
                        if (bs == BuySell.Sell)
                        {
                            partial_2 += fill_q;
                        }
                    }
                    else
                    {
                        if (bs == BuySell.Buy)
                        {
                            partial_2 += fill_q;
                        }
                        if (bs == BuySell.Sell)
                        {
                            partial_1 += fill_q;
                        }

                    }

                }
                res += childorder_1;
                res += "+";
                res += childorder_2;
                res += "+";
                res += order_key;
                res += "+";
                res += order_key_old;
                res += "+";
                res += order_1n.ToString();
                res += "+";
                res += order_1.ToString();
                res += "+";
                res += order_2n.ToString();
                res += "+";
                res += order_2.ToString();
                res += "+";
                res += reload.ToString();
                res += "+";
                res += rel_1;
                res += "+";
                res += partial_1;
                res += "+";
                res += partial_2;
                res += "+";
                res += side_1;
                res += "+";
                res += side_2;
                res += "+";
                res += side_1_p;
                res += "+";
                res += side_2_p;
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(518);
            }
            return res;

        }
        void m_instrumentTradeSubscription_OrderBookDownload(object sender, OrderBookDownloadEventArgs e)
        {
            try
            {
                Log.Information("Orderbook downloaded...");
                richTextBox1.AppendText(String.Format("\nOrderbook downloaded..."));
                m_isOrderBookDownloaded = true;
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(519);
            }
        }

        void m_instrumentTradeSubscription_OrderRejected(object sender, OrderRejectedEventArgs e)
        {
            try
            {
                Log.Information("\nOrderRejected [{0}]", e.Order.SiteOrderKey);
                richTextBox1.AppendText(String.Format("\nOrderRejected [{0}] :{1}", e.Order.SiteOrderKey, e.OrderRejectReason));
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(520);
            }
        }

        
        void m_instrumentTradeSubscription_OrderFilled(object sender, OrderFilledEventArgs e)
        {
            try
            {
                if (e.FillType == tt_net_sdk.FillType.Full)
                {
                    Log.Information("\nOrderFullyFilled [{0}]: {1}@{2}", e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice);
                    richTextBox1.AppendText(String.Format("\nOrderFullyFilled  {0}:{1}  ", e.Fill.SiteOrderKey, e.OldOrder.Instrument));
                    /* richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] :{1}", qoute_stuck_side_b_1, qoute_stuck_side_b_2));*/

                    string out1 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_b_1, m_childorderKey_b_2, rel_1_b, partial_fill_b_1, partial_fill_b_2, order_b_a1, order_b_a2, order_b_a1n, order_b_a2n, m_instrumentTradeSubscription_1, m_instrumentTradeSubscription_1_a1, m_instrumentTradeSubscription_1_a2, m_orderKey_b, m_orderKey_b_old, qoute_stuck_side_b_1, qoute_stuck_side_b_2, qoute_stuck_price_b_1, qoute_stuck_price_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_1_b, e.Fill.Order.ToString(), "buying", order_updated_details);
                    m_childorderKey_b_1 = out1.Split('+')[0];
                    m_childorderKey_b_2 = out1.Split('+')[1];
                    m_orderKey_b = out1.Split('+')[2];
                    m_orderKey_b_old = out1.Split('+')[3];
                    order_b_a1n = Convert.ToBoolean(out1.Split('+')[4]);
                    order_b_a1 = Convert.ToBoolean(out1.Split('+')[5]);
                    order_b_a2n = Convert.ToBoolean(out1.Split('+')[6]);
                    order_b_a2 = Convert.ToBoolean(out1.Split('+')[7]);
                    new_reload_1_b = Convert.ToBoolean(out1.Split('+')[8]);
                    rel_1_b = Convert.ToDecimal(out1.Split('+')[9]);
                    partial_fill_b_1 = Convert.ToDecimal(out1.Split('+')[10]);
                    partial_fill_b_2 = Convert.ToDecimal(out1.Split('+')[11]);
                    qoute_stuck_side_b_1 = out1.Split('+')[12];
                    qoute_stuck_side_b_2 = out1.Split('+')[13];
                    qoute_stuck_price_b_1 = Convert.ToDecimal(out1.Split('+')[14]);
                    qoute_stuck_price_b_2 = Convert.ToDecimal(out1.Split('+')[15]);

                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", qoute_stuck_price_s_2));*/


                    string out2 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_s_1, m_childorderKey_s_2, rel_1_s, partial_fill_s_1, partial_fill_s_2, order_s_a1, order_s_a2, order_s_a1n, order_s_a2n, m_instrumentTradeSubscription_1, m_instrumentTradeSubscription_1_a1, m_instrumentTradeSubscription_1_a2, m_orderKey_s, m_orderKey_s_old, qoute_stuck_side_s_1, qoute_stuck_side_s_2, qoute_stuck_price_s_1, qoute_stuck_price_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_1_s, e.Fill.Order.ToString(), "selling", order_updated_details);
                    m_childorderKey_s_1 = out2.Split('+')[0];
                    m_childorderKey_s_2 = out2.Split('+')[1];
                    m_orderKey_s = out2.Split('+')[2];
                    m_orderKey_s_old = out2.Split('+')[3];
                    order_s_a1n = Convert.ToBoolean(out2.Split('+')[4]);
                    order_s_a1 = Convert.ToBoolean(out2.Split('+')[5]);
                    order_s_a2n = Convert.ToBoolean(out2.Split('+')[6]);
                    order_s_a2 = Convert.ToBoolean(out2.Split('+')[7]);
                    new_reload_1_s = Convert.ToBoolean(out2.Split('+')[8]);
                    rel_1_s = Convert.ToDecimal(out2.Split('+')[9]);
                    partial_fill_s_1 = Convert.ToDecimal(out2.Split('+')[10]);
                    partial_fill_s_2 = Convert.ToDecimal(out2.Split('+')[11]);
                    qoute_stuck_side_s_1 = out2.Split('+')[12];
                    qoute_stuck_side_s_2 = out2.Split('+')[13];
                    qoute_stuck_price_s_1 = Convert.ToDecimal(out2.Split('+')[14]);
                    qoute_stuck_price_s_2 = Convert.ToDecimal(out2.Split('+')[15]);


                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ",out2));*/

                    string out3 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_1_b_1, m_childorderKey_1_b_2, rel_2_b, partial_fill_1_b_1, partial_fill_1_b_2, order_1_b_a1, order_1_b_a2, order_1_b_a1n, order_1_b_a2n, m_instrumentTradeSubscription_2, m_instrumentTradeSubscription_2_a1, m_instrumentTradeSubscription_2_a2, m_orderKey_1_b, m_orderKey_1_b_old, qoute_stuck_side_1_b_1, qoute_stuck_side_1_b_2, qoute_stuck_price_1_b_1, qoute_stuck_price_1_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_2_b, e.Fill.Order.ToString(), "buying", order_updated_details);
                    m_childorderKey_1_b_1 = out3.Split('+')[0];
                    m_childorderKey_1_b_2 = out3.Split('+')[1];
                    m_orderKey_1_b = out3.Split('+')[2];
                    m_orderKey_1_b_old = out3.Split('+')[3];
                    order_1_b_a1n = Convert.ToBoolean(out3.Split('+')[4]);
                    order_1_b_a1 = Convert.ToBoolean(out3.Split('+')[5]);
                    order_1_b_a2n = Convert.ToBoolean(out3.Split('+')[6]);
                    order_1_b_a2 = Convert.ToBoolean(out3.Split('+')[7]);
                    new_reload_2_b = Convert.ToBoolean(out3.Split('+')[8]);
                    rel_2_b = Convert.ToDecimal(out3.Split('+')[9]);
                    partial_fill_1_b_1 = Convert.ToDecimal(out3.Split('+')[10]);
                    partial_fill_1_b_2 = Convert.ToDecimal(out3.Split('+')[11]);
                    qoute_stuck_side_1_b_1 = out3.Split('+')[12];
                    qoute_stuck_side_1_b_2 = out3.Split('+')[13];
                    qoute_stuck_price_1_b_1 = Convert.ToDecimal(out3.Split('+')[14]);
                    qoute_stuck_price_1_b_2 = Convert.ToDecimal(out3.Split('+')[15]);



                    string out4 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_1_s_1, m_childorderKey_1_s_2, rel_2_s, partial_fill_1_s_1, partial_fill_1_s_2, order_1_s_a1, order_1_s_a2, order_1_s_a1n, order_1_s_a2n, m_instrumentTradeSubscription_2, m_instrumentTradeSubscription_2_a1, m_instrumentTradeSubscription_2_a2, m_orderKey_1_s, m_orderKey_1_s_old, qoute_stuck_side_1_s_1, qoute_stuck_side_1_s_2, qoute_stuck_price_1_s_1, qoute_stuck_price_1_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_2_s, e.Fill.Order.ToString(), "selling", order_updated_details);
                    m_childorderKey_1_s_1 = out4.Split('+')[0];
                    m_childorderKey_1_s_2 = out4.Split('+')[1];
                    m_orderKey_1_s = out4.Split('+')[2];
                    m_orderKey_1_s_old = out4.Split('+')[3];
                    order_1_s_a1n = Convert.ToBoolean(out4.Split('+')[4]);
                    order_1_s_a1 = Convert.ToBoolean(out4.Split('+')[5]);
                    order_1_s_a2n = Convert.ToBoolean(out4.Split('+')[6]);
                    order_1_s_a2 = Convert.ToBoolean(out4.Split('+')[7]);
                    new_reload_2_s = Convert.ToBoolean(out4.Split('+')[8]);
                    rel_2_s = Convert.ToDecimal(out4.Split('+')[9]);
                    partial_fill_1_s_1 = Convert.ToDecimal(out4.Split('+')[10]);
                    partial_fill_1_s_2 = Convert.ToDecimal(out4.Split('+')[11]);
                    qoute_stuck_side_1_s_1 = out4.Split('+')[12];
                    qoute_stuck_side_1_s_2 = out4.Split('+')[13];
                    qoute_stuck_price_1_s_1 = Convert.ToDecimal(out4.Split('+')[14]);
                    qoute_stuck_price_1_s_2 = Convert.ToDecimal(out4.Split('+')[15]);

                    string out5 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_3_b_1, m_childorderKey_3_b_2, rel_3_b, partial_fill_3_b_1, partial_fill_3_b_2, order_3_b_a1, order_3_b_a2, order_3_b_a1n, order_3_b_a2n, m_instrumentTradeSubscription_3, m_instrumentTradeSubscription_3_a1, m_instrumentTradeSubscription_3_a2, m_orderKey_3_b, m_orderKey_3_b_old, qoute_stuck_side_3_b_1, qoute_stuck_side_3_b_2, qoute_stuck_price_3_b_1, qoute_stuck_price_3_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_3_b, e.Fill.Order.ToString(), "buying", order_updated_details);
                    m_childorderKey_3_b_1 = out5.Split('+')[0];
                    m_childorderKey_3_b_2 = out5.Split('+')[1];
                    m_orderKey_3_b = out5.Split('+')[2];
                    m_orderKey_3_b_old = out5.Split('+')[3];
                    order_3_b_a1n = Convert.ToBoolean(out5.Split('+')[4]);
                    order_3_b_a1 = Convert.ToBoolean(out5.Split('+')[5]);
                    order_3_b_a2n = Convert.ToBoolean(out5.Split('+')[6]);
                    order_3_b_a2 = Convert.ToBoolean(out5.Split('+')[7]);
                    new_reload_3_b = Convert.ToBoolean(out5.Split('+')[8]);
                    rel_3_b = Convert.ToDecimal(out5.Split('+')[9]);
                    partial_fill_3_b_1 = Convert.ToDecimal(out5.Split('+')[10]);
                    partial_fill_3_b_2 = Convert.ToDecimal(out5.Split('+')[11]);
                    qoute_stuck_side_3_b_1 = out5.Split('+')[12];
                    qoute_stuck_side_3_b_2 = out5.Split('+')[13];
                    qoute_stuck_price_3_b_1 = Convert.ToDecimal(out5.Split('+')[14]);
                    qoute_stuck_price_3_b_2 = Convert.ToDecimal(out5.Split('+')[15]);




                    string out6 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_3_s_1, m_childorderKey_3_s_2, rel_3_s, partial_fill_3_s_1, partial_fill_3_s_2, order_3_s_a1, order_3_s_a2, order_3_s_a1n, order_3_s_a2n, m_instrumentTradeSubscription_3, m_instrumentTradeSubscription_3_a1, m_instrumentTradeSubscription_3_a2, m_orderKey_3_s, m_orderKey_3_s_old, qoute_stuck_side_3_s_1, qoute_stuck_side_3_s_2, qoute_stuck_price_3_s_1, qoute_stuck_price_3_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_3_s, e.Fill.Order.ToString(), "selling", order_updated_details);
                    m_childorderKey_3_s_1 = out6.Split('+')[0];
                    m_childorderKey_3_s_2 = out6.Split('+')[1];
                    m_orderKey_3_s = out6.Split('+')[2];
                    m_orderKey_3_s_old = out6.Split('+')[3];
                    order_3_s_a1n = Convert.ToBoolean(out6.Split('+')[4]);
                    order_3_s_a1 = Convert.ToBoolean(out6.Split('+')[5]);
                    order_3_s_a2n = Convert.ToBoolean(out6.Split('+')[6]);
                    order_3_s_a2 = Convert.ToBoolean(out6.Split('+')[7]);
                    new_reload_3_s = Convert.ToBoolean(out6.Split('+')[8]);
                    rel_3_s = Convert.ToDecimal(out6.Split('+')[9]);
                    partial_fill_3_s_1 = Convert.ToDecimal(out6.Split('+')[10]);
                    partial_fill_3_s_2 = Convert.ToDecimal(out6.Split('+')[11]);
                    qoute_stuck_side_3_s_1 = out6.Split('+')[12];
                    qoute_stuck_side_3_s_2 = out6.Split('+')[13];
                    qoute_stuck_price_3_s_1 = Convert.ToDecimal(out6.Split('+')[14]);
                    qoute_stuck_price_3_s_2 = Convert.ToDecimal(out6.Split('+')[15]);


                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", out2));*/

                    string out7 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_4_b_1, m_childorderKey_4_b_2, rel_4_b, partial_fill_4_b_1, partial_fill_4_b_2, order_4_b_a1, order_4_b_a2, order_4_b_a1n, order_4_b_a2n, m_instrumentTradeSubscription_4, m_instrumentTradeSubscription_4_a1, m_instrumentTradeSubscription_4_a2, m_orderKey_4_b, m_orderKey_4_b_old, qoute_stuck_side_4_b_1, qoute_stuck_side_4_b_2, qoute_stuck_price_4_b_1, qoute_stuck_price_4_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_4_b, e.Fill.Order.ToString(), "buying", order_updated_details);
                    m_childorderKey_4_b_1 = out7.Split('+')[0];
                    m_childorderKey_4_b_2 = out7.Split('+')[1];
                    m_orderKey_4_b = out7.Split('+')[2];
                    m_orderKey_4_b_old = out7.Split('+')[3];
                    order_4_b_a1n = Convert.ToBoolean(out7.Split('+')[4]);
                    order_4_b_a1 = Convert.ToBoolean(out7.Split('+')[5]);
                    order_4_b_a2n = Convert.ToBoolean(out7.Split('+')[6]);
                    order_4_b_a2 = Convert.ToBoolean(out7.Split('+')[7]);
                    new_reload_4_b = Convert.ToBoolean(out7.Split('+')[8]);
                    rel_4_b = Convert.ToDecimal(out7.Split('+')[9]);
                    partial_fill_4_b_1 = Convert.ToDecimal(out7.Split('+')[10]);
                    partial_fill_4_b_2 = Convert.ToDecimal(out7.Split('+')[11]);
                    qoute_stuck_side_4_b_1 = out7.Split('+')[12];
                    qoute_stuck_side_4_b_2 = out7.Split('+')[13];
                    qoute_stuck_price_4_b_1 = Convert.ToDecimal(out7.Split('+')[14]);
                    qoute_stuck_price_4_b_2 = Convert.ToDecimal(out7.Split('+')[15]);



                    string out8 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_4_s_1, m_childorderKey_4_s_2, rel_4_s, partial_fill_4_s_1, partial_fill_4_s_2, order_4_s_a1, order_4_s_a2, order_4_s_a1n, order_4_s_a2n, m_instrumentTradeSubscription_4, m_instrumentTradeSubscription_4_a1, m_instrumentTradeSubscription_4_a2, m_orderKey_4_s, m_orderKey_4_s_old, qoute_stuck_side_4_s_1, qoute_stuck_side_4_s_2, qoute_stuck_price_4_s_1, qoute_stuck_price_4_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_4_s, e.Fill.Order.ToString(), "selling", order_updated_details);
                    m_childorderKey_4_s_1 = out8.Split('+')[0];
                    m_childorderKey_4_s_2 = out8.Split('+')[1];
                    m_orderKey_4_s = out8.Split('+')[2];
                    m_orderKey_4_s_old = out8.Split('+')[3];
                    order_4_s_a1n = Convert.ToBoolean(out8.Split('+')[4]);
                    order_4_s_a1 = Convert.ToBoolean(out8.Split('+')[5]);
                    order_4_s_a2n = Convert.ToBoolean(out8.Split('+')[6]);
                    order_4_s_a2 = Convert.ToBoolean(out8.Split('+')[7]);
                    new_reload_4_s = Convert.ToBoolean(out8.Split('+')[8]);
                    rel_4_s = Convert.ToDecimal(out8.Split('+')[9]);
                    partial_fill_4_s_1 = Convert.ToDecimal(out8.Split('+')[10]);
                    partial_fill_4_s_2 = Convert.ToDecimal(out8.Split('+')[11]);
                    qoute_stuck_side_4_s_1 = out8.Split('+')[12];
                    qoute_stuck_side_4_s_2 = out8.Split('+')[13];
                    qoute_stuck_price_4_s_1 = Convert.ToDecimal(out8.Split('+')[14]);
                    qoute_stuck_price_4_s_2 = Convert.ToDecimal(out8.Split('+')[15]);


                    string out9 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_5_b_1, m_childorderKey_5_b_2, rel_5_b, partial_fill_5_b_1, partial_fill_5_b_2, order_5_b_a1, order_5_b_a2, order_5_b_a1n, order_5_b_a2n, m_instrumentTradeSubscription_5, m_instrumentTradeSubscription_5_a1, m_instrumentTradeSubscription_5_a2, m_orderKey_5_b, m_orderKey_5_b_old, qoute_stuck_side_5_b_1, qoute_stuck_side_5_b_2, qoute_stuck_price_5_b_1, qoute_stuck_price_5_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_5_b, e.Fill.Order.ToString(), "buying", order_updated_details);
                    m_childorderKey_5_b_1 = out9.Split('+')[0];
                    m_childorderKey_5_b_2 = out9.Split('+')[1];
                    m_orderKey_5_b = out9.Split('+')[2];
                    m_orderKey_5_b_old = out9.Split('+')[3];
                    order_5_b_a1n = Convert.ToBoolean(out9.Split('+')[4]);
                    order_5_b_a1 = Convert.ToBoolean(out9.Split('+')[5]);
                    order_5_b_a2n = Convert.ToBoolean(out9.Split('+')[6]);
                    order_5_b_a2 = Convert.ToBoolean(out9.Split('+')[7]);
                    new_reload_5_b = Convert.ToBoolean(out9.Split('+')[8]);
                    rel_5_b = Convert.ToDecimal(out9.Split('+')[9]);
                    partial_fill_5_b_1 = Convert.ToDecimal(out9.Split('+')[10]);
                    partial_fill_5_b_2 = Convert.ToDecimal(out9.Split('+')[11]);
                    qoute_stuck_side_5_b_1 = out9.Split('+')[12];
                    qoute_stuck_side_5_b_2 = out9.Split('+')[13];
                    qoute_stuck_price_5_b_1 = Convert.ToDecimal(out9.Split('+')[14]);
                    qoute_stuck_price_5_b_2 = Convert.ToDecimal(out9.Split('+')[15]);




                    string out10 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_5_s_1, m_childorderKey_5_s_2, rel_5_s, partial_fill_5_s_1, partial_fill_5_s_2, order_5_s_a1, order_5_s_a2, order_5_s_a1n, order_5_s_a2n, m_instrumentTradeSubscription_5, m_instrumentTradeSubscription_5_a1, m_instrumentTradeSubscription_5_a2, m_orderKey_5_s, m_orderKey_5_s_old, qoute_stuck_side_5_s_1, qoute_stuck_side_5_s_2, qoute_stuck_price_5_s_1, qoute_stuck_price_5_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_5_s, e.Fill.Order.ToString(), "selling", order_updated_details);
                    m_childorderKey_5_s_1 = out10.Split('+')[0];
                    m_childorderKey_5_s_2 = out10.Split('+')[1];
                    m_orderKey_5_s = out10.Split('+')[2];
                    m_orderKey_5_s_old = out10.Split('+')[3];
                    order_5_s_a1n = Convert.ToBoolean(out10.Split('+')[4]);
                    order_5_s_a1 = Convert.ToBoolean(out10.Split('+')[5]);
                    order_5_s_a2n = Convert.ToBoolean(out10.Split('+')[6]);
                    order_5_s_a2 = Convert.ToBoolean(out10.Split('+')[7]);
                    new_reload_5_s = Convert.ToBoolean(out10.Split('+')[8]);
                    rel_5_s = Convert.ToDecimal(out10.Split('+')[9]);
                    partial_fill_5_s_1 = Convert.ToDecimal(out10.Split('+')[10]);
                    partial_fill_5_s_2 = Convert.ToDecimal(out10.Split('+')[11]);
                    qoute_stuck_side_5_s_1 = out10.Split('+')[12];
                    qoute_stuck_side_5_s_2 = out10.Split('+')[13];
                    qoute_stuck_price_5_s_1 = Convert.ToDecimal(out10.Split('+')[14]);
                    qoute_stuck_price_5_s_2 = Convert.ToDecimal(out10.Split('+')[15]);


                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", out2));*/

                    string out11 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_6_b_1, m_childorderKey_6_b_2, rel_6_b, partial_fill_6_b_1, partial_fill_6_b_2, order_6_b_a1, order_6_b_a2, order_6_b_a1n, order_6_b_a2n, m_instrumentTradeSubscription_6, m_instrumentTradeSubscription_6_a1, m_instrumentTradeSubscription_6_a2, m_orderKey_6_b, m_orderKey_6_b_old, qoute_stuck_side_6_b_1, qoute_stuck_side_6_b_2, qoute_stuck_price_6_b_1, qoute_stuck_price_6_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_6_b, e.Fill.Order.ToString(), "buying", order_updated_details);
                    m_childorderKey_6_b_1 = out11.Split('+')[0];
                    m_childorderKey_6_b_2 = out11.Split('+')[1];
                    m_orderKey_6_b = out11.Split('+')[2];
                    m_orderKey_6_b_old = out11.Split('+')[3];
                    order_6_b_a1n = Convert.ToBoolean(out11.Split('+')[4]);
                    order_6_b_a1 = Convert.ToBoolean(out11.Split('+')[5]);
                    order_6_b_a2n = Convert.ToBoolean(out11.Split('+')[6]);
                    order_6_b_a2 = Convert.ToBoolean(out11.Split('+')[7]);
                    new_reload_6_b = Convert.ToBoolean(out11.Split('+')[8]);
                    rel_6_b = Convert.ToDecimal(out11.Split('+')[9]);
                    partial_fill_6_b_1 = Convert.ToDecimal(out11.Split('+')[10]);
                    partial_fill_6_b_2 = Convert.ToDecimal(out11.Split('+')[11]);
                    qoute_stuck_side_6_b_1 = out11.Split('+')[12];
                    qoute_stuck_side_6_b_2 = out11.Split('+')[13];
                    qoute_stuck_price_6_b_1 = Convert.ToDecimal(out11.Split('+')[14]);
                    qoute_stuck_price_6_b_2 = Convert.ToDecimal(out11.Split('+')[15]);



                    string out12 = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_6_s_1, m_childorderKey_6_s_2, rel_6_s, partial_fill_6_s_1, partial_fill_6_s_2, order_6_s_a1, order_6_s_a2, order_6_s_a1n, order_6_s_a2n, m_instrumentTradeSubscription_6, m_instrumentTradeSubscription_6_a1, m_instrumentTradeSubscription_6_a2, m_orderKey_6_s, m_orderKey_6_s_old, qoute_stuck_side_6_s_1, qoute_stuck_side_6_s_2, qoute_stuck_price_6_s_1, qoute_stuck_price_6_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_6_s, e.Fill.Order.ToString(), "selling", order_updated_details);
                    m_childorderKey_6_s_1 = out12.Split('+')[0];
                    m_childorderKey_6_s_2 = out12.Split('+')[1];
                    m_orderKey_6_s = out12.Split('+')[2];
                    m_orderKey_6_s_old = out12.Split('+')[3];
                    order_6_s_a1n = Convert.ToBoolean(out12.Split('+')[4]);
                    order_6_s_a1 = Convert.ToBoolean(out12.Split('+')[5]);
                    order_6_s_a2n = Convert.ToBoolean(out12.Split('+')[6]);
                    order_6_s_a2 = Convert.ToBoolean(out12.Split('+')[7]);
                    new_reload_6_s = Convert.ToBoolean(out12.Split('+')[8]);
                    rel_6_s = Convert.ToDecimal(out12.Split('+')[9]);
                    partial_fill_6_s_1 = Convert.ToDecimal(out12.Split('+')[10]);
                    partial_fill_6_s_2 = Convert.ToDecimal(out12.Split('+')[11]);
                    qoute_stuck_side_6_s_1 = out12.Split('+')[12];
                    qoute_stuck_side_6_s_2 = out12.Split('+')[13];
                    qoute_stuck_price_6_s_1 = Convert.ToDecimal(out12.Split('+')[14]);
                    qoute_stuck_price_6_s_2 = Convert.ToDecimal(out12.Split('+')[15]);




                    string outi = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_i_b_1, m_childorderKey_i_b_2, rel_i_b, partial_fill_i_b_1, partial_fill_i_b_2, order_i_b_a1, order_i_b_a2, order_i_b_a1n, order_i_b_a2n, m_instrumentTradeSubscription_i, m_instrumentTradeSubscription_i_a1, m_instrumentTradeSubscription_i_a2, m_orderKey_i_b, m_orderKey_i_b_old, qoute_stuck_side_i_b_1, qoute_stuck_side_i_b_2, qoute_stuck_price_i_b_1, qoute_stuck_price_i_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_i_b, e.Fill.Order.ToString(), "buying", order_updated_details_i);
                    m_childorderKey_i_b_1 = outi.Split('+')[0];
                    m_childorderKey_i_b_2 = outi.Split('+')[1];
                    m_orderKey_i_b = outi.Split('+')[2];
                    m_orderKey_i_b_old = outi.Split('+')[3];
                    order_i_b_a1n = Convert.ToBoolean(outi.Split('+')[4]);
                    order_i_b_a1 = Convert.ToBoolean(outi.Split('+')[5]);
                    order_i_b_a2n = Convert.ToBoolean(outi.Split('+')[6]);
                    order_i_b_a2 = Convert.ToBoolean(outi.Split('+')[7]);
                    new_reload_i_b = Convert.ToBoolean(outi.Split('+')[8]);
                    rel_i_b = Convert.ToDecimal(outi.Split('+')[9]);
                    partial_fill_i_b_1 = Convert.ToDecimal(outi.Split('+')[10]);
                    partial_fill_i_b_2 = Convert.ToDecimal(outi.Split('+')[11]);
                    qoute_stuck_side_i_b_1 = outi.Split('+')[12];
                    qoute_stuck_side_i_b_2 = outi.Split('+')[13];
                    qoute_stuck_price_i_b_1 = Convert.ToDecimal(outi.Split('+')[14]);
                    qoute_stuck_price_i_b_2 = Convert.ToDecimal(outi.Split('+')[15]);

                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", qoute_stuck_price_s_2));*/


                    string outii = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_i_s_1, m_childorderKey_i_s_2, rel_i_s, partial_fill_i_s_1, partial_fill_i_s_2, order_i_s_a1, order_i_s_a2, order_i_s_a1n, order_i_s_a2n, m_instrumentTradeSubscription_i, m_instrumentTradeSubscription_i_a1, m_instrumentTradeSubscription_i_a2, m_orderKey_i_s, m_orderKey_i_s_old, qoute_stuck_side_i_s_1, qoute_stuck_side_i_s_2, qoute_stuck_price_i_s_1, qoute_stuck_price_i_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_i_s, e.Fill.Order.ToString(), "selling", order_updated_details_i);
                    m_childorderKey_i_s_1 = outii.Split('+')[0];
                    m_childorderKey_i_s_2 = outii.Split('+')[1];
                    m_orderKey_i_s = outii.Split('+')[2];
                    m_orderKey_i_s_old = outii.Split('+')[3];
                    order_i_s_a1n = Convert.ToBoolean(outii.Split('+')[4]);
                    order_i_s_a1 = Convert.ToBoolean(outii.Split('+')[5]);
                    order_i_s_a2n = Convert.ToBoolean(outii.Split('+')[6]);
                    order_i_s_a2 = Convert.ToBoolean(outii.Split('+')[7]);
                    new_reload_i_s = Convert.ToBoolean(outii.Split('+')[8]);
                    rel_i_s = Convert.ToDecimal(outii.Split('+')[9]);
                    partial_fill_i_s_1 = Convert.ToDecimal(outii.Split('+')[10]);
                    partial_fill_i_s_2 = Convert.ToDecimal(outii.Split('+')[11]);
                    qoute_stuck_side_i_s_1 = outii.Split('+')[12];
                    qoute_stuck_side_i_s_2 = outii.Split('+')[13];
                    qoute_stuck_price_i_s_1 = Convert.ToDecimal(outii.Split('+')[14]);
                    qoute_stuck_price_i_s_2 = Convert.ToDecimal(outii.Split('+')[15]);


                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ",out2));*/

                    string outiii = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_ii_b_1, m_childorderKey_ii_b_2, rel_ii_b, partial_fill_ii_b_1, partial_fill_ii_b_2, order_ii_b_a1, order_ii_b_a2, order_ii_b_a1n, order_ii_b_a2n, m_instrumentTradeSubscription_ii, m_instrumentTradeSubscription_ii_a1, m_instrumentTradeSubscription_ii_a2, m_orderKey_ii_b, m_orderKey_ii_b_old, qoute_stuck_side_ii_b_1, qoute_stuck_side_ii_b_2, qoute_stuck_price_ii_b_1, qoute_stuck_price_ii_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_ii_b, e.Fill.Order.ToString(), "buying", order_updated_details_i);
                    m_childorderKey_ii_b_1 = outiii.Split('+')[0];
                    m_childorderKey_ii_b_2 = outiii.Split('+')[1];
                    m_orderKey_ii_b = outiii.Split('+')[2];
                    m_orderKey_ii_b_old = outiii.Split('+')[3];
                    order_ii_b_a1n = Convert.ToBoolean(outiii.Split('+')[4]);
                    order_ii_b_a1 = Convert.ToBoolean(outiii.Split('+')[5]);
                    order_ii_b_a2n = Convert.ToBoolean(outiii.Split('+')[6]);
                    order_ii_b_a2 = Convert.ToBoolean(outiii.Split('+')[7]);
                    new_reload_ii_b = Convert.ToBoolean(outiii.Split('+')[8]);
                    rel_ii_b = Convert.ToDecimal(outiii.Split('+')[9]);
                    partial_fill_ii_b_1 = Convert.ToDecimal(outiii.Split('+')[10]);
                    partial_fill_ii_b_2 = Convert.ToDecimal(outiii.Split('+')[11]);
                    qoute_stuck_side_ii_b_1 = outiii.Split('+')[12];
                    qoute_stuck_side_ii_b_2 = outiii.Split('+')[13];
                    qoute_stuck_price_ii_b_1 = Convert.ToDecimal(outiii.Split('+')[14]);
                    qoute_stuck_price_ii_b_2 = Convert.ToDecimal(outiii.Split('+')[15]);



                    string outiv = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_ii_s_1, m_childorderKey_ii_s_2, rel_ii_s, partial_fill_ii_s_1, partial_fill_ii_s_2, order_ii_s_a1, order_ii_s_a2, order_ii_s_a1n, order_ii_s_a2n, m_instrumentTradeSubscription_ii, m_instrumentTradeSubscription_ii_a1, m_instrumentTradeSubscription_ii_a2, m_orderKey_ii_s, m_orderKey_ii_s_old, qoute_stuck_side_ii_s_1, qoute_stuck_side_ii_s_2, qoute_stuck_price_ii_s_1, qoute_stuck_price_ii_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_ii_s, e.Fill.Order.ToString(), "selling", order_updated_details_i);
                    m_childorderKey_ii_s_1 = outiv.Split('+')[0];
                    m_childorderKey_ii_s_2 = outiv.Split('+')[1];
                    m_orderKey_ii_s = outiv.Split('+')[2];
                    m_orderKey_ii_s_old = outiv.Split('+')[3];
                    order_ii_s_a1n = Convert.ToBoolean(outiv.Split('+')[4]);
                    order_ii_s_a1 = Convert.ToBoolean(outiv.Split('+')[5]);
                    order_ii_s_a2n = Convert.ToBoolean(outiv.Split('+')[6]);
                    order_ii_s_a2 = Convert.ToBoolean(outiv.Split('+')[7]);
                    new_reload_ii_s = Convert.ToBoolean(outiv.Split('+')[8]);
                    rel_ii_s = Convert.ToDecimal(outiv.Split('+')[9]);
                    partial_fill_ii_s_1 = Convert.ToDecimal(outiv.Split('+')[10]);
                    partial_fill_ii_s_2 = Convert.ToDecimal(outiv.Split('+')[11]);
                    qoute_stuck_side_ii_s_1 = outiv.Split('+')[12];
                    qoute_stuck_side_ii_s_2 = outiv.Split('+')[13];
                    qoute_stuck_price_ii_s_1 = Convert.ToDecimal(outiv.Split('+')[14]);
                    qoute_stuck_price_ii_s_2 = Convert.ToDecimal(outiv.Split('+')[15]);

                    string outv = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_iii_b_1, m_childorderKey_iii_b_2, rel_iii_b, partial_fill_iii_b_1, partial_fill_iii_b_2, order_iii_b_a1, order_iii_b_a2, order_iii_b_a1n, order_iii_b_a2n, m_instrumentTradeSubscription_iii, m_instrumentTradeSubscription_iii_a1, m_instrumentTradeSubscription_iii_a2, m_orderKey_iii_b, m_orderKey_iii_b_old, qoute_stuck_side_iii_b_1, qoute_stuck_side_iii_b_2, qoute_stuck_price_iii_b_1, qoute_stuck_price_iii_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_iii_b, e.Fill.Order.ToString(), "buying", order_updated_details_i);
                    m_childorderKey_iii_b_1 = outv.Split('+')[0];
                    m_childorderKey_iii_b_2 = outv.Split('+')[1];
                    m_orderKey_iii_b = outv.Split('+')[2];
                    m_orderKey_iii_b_old = outv.Split('+')[3];
                    order_iii_b_a1n = Convert.ToBoolean(outv.Split('+')[4]);
                    order_iii_b_a1 = Convert.ToBoolean(outv.Split('+')[5]);
                    order_iii_b_a2n = Convert.ToBoolean(outv.Split('+')[6]);
                    order_iii_b_a2 = Convert.ToBoolean(outv.Split('+')[7]);
                    new_reload_iii_b = Convert.ToBoolean(outv.Split('+')[8]);
                    rel_iii_b = Convert.ToDecimal(outv.Split('+')[9]);
                    partial_fill_iii_b_1 = Convert.ToDecimal(outv.Split('+')[10]);
                    partial_fill_iii_b_2 = Convert.ToDecimal(outv.Split('+')[11]);
                    qoute_stuck_side_iii_b_1 = outv.Split('+')[12];
                    qoute_stuck_side_iii_b_2 = outv.Split('+')[13];
                    qoute_stuck_price_iii_b_1 = Convert.ToDecimal(outv.Split('+')[14]);
                    qoute_stuck_price_iii_b_2 = Convert.ToDecimal(outv.Split('+')[15]);




                    string outvi = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_iii_s_1, m_childorderKey_iii_s_2, rel_iii_s, partial_fill_iii_s_1, partial_fill_iii_s_2, order_iii_s_a1, order_iii_s_a2, order_iii_s_a1n, order_iii_s_a2n, m_instrumentTradeSubscription_iii, m_instrumentTradeSubscription_iii_a1, m_instrumentTradeSubscription_iii_a2, m_orderKey_iii_s, m_orderKey_iii_s_old, qoute_stuck_side_iii_s_1, qoute_stuck_side_iii_s_2, qoute_stuck_price_iii_s_1, qoute_stuck_price_iii_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_iii_s, e.Fill.Order.ToString(), "selling", order_updated_details_i);
                    m_childorderKey_iii_s_1 = outvi.Split('+')[0];
                    m_childorderKey_iii_s_2 = outvi.Split('+')[1];
                    m_orderKey_iii_s = outvi.Split('+')[2];
                    m_orderKey_iii_s_old = outvi.Split('+')[3];
                    order_iii_s_a1n = Convert.ToBoolean(outvi.Split('+')[4]);
                    order_iii_s_a1 = Convert.ToBoolean(outvi.Split('+')[5]);
                    order_iii_s_a2n = Convert.ToBoolean(outvi.Split('+')[6]);
                    order_iii_s_a2 = Convert.ToBoolean(outvi.Split('+')[7]);
                    new_reload_iii_s = Convert.ToBoolean(outvi.Split('+')[8]);
                    rel_iii_s = Convert.ToDecimal(outvi.Split('+')[9]);
                    partial_fill_iii_s_1 = Convert.ToDecimal(outvi.Split('+')[10]);
                    partial_fill_iii_s_2 = Convert.ToDecimal(outvi.Split('+')[11]);
                    qoute_stuck_side_iii_s_1 = outvi.Split('+')[12];
                    qoute_stuck_side_iii_s_2 = outvi.Split('+')[13];
                    qoute_stuck_price_iii_s_1 = Convert.ToDecimal(outvi.Split('+')[14]);
                    qoute_stuck_price_iii_s_2 = Convert.ToDecimal(outvi.Split('+')[15]);


                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", out2));*/

                    string outvii = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_iv_b_1, m_childorderKey_iv_b_2, rel_iv_b, partial_fill_iv_b_1, partial_fill_iv_b_2, order_iv_b_a1, order_iv_b_a2, order_iv_b_a1n, order_iv_b_a2n, m_instrumentTradeSubscription_iv, m_instrumentTradeSubscription_iv_a1, m_instrumentTradeSubscription_iv_a2, m_orderKey_iv_b, m_orderKey_iv_b_old, qoute_stuck_side_iv_b_1, qoute_stuck_side_iv_b_2, qoute_stuck_price_iv_b_1, qoute_stuck_price_iv_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_iv_b, e.Fill.Order.ToString(), "buying", order_updated_details_i);
                    m_childorderKey_iv_b_1 = outvii.Split('+')[0];
                    m_childorderKey_iv_b_2 = outvii.Split('+')[1];
                    m_orderKey_iv_b = outvii.Split('+')[2];
                    m_orderKey_iv_b_old = outvii.Split('+')[3];
                    order_iv_b_a1n = Convert.ToBoolean(outvii.Split('+')[4]);
                    order_iv_b_a1 = Convert.ToBoolean(outvii.Split('+')[5]);
                    order_iv_b_a2n = Convert.ToBoolean(outvii.Split('+')[6]);
                    order_iv_b_a2 = Convert.ToBoolean(outvii.Split('+')[7]);
                    new_reload_iv_b = Convert.ToBoolean(outvii.Split('+')[8]);
                    rel_iv_b = Convert.ToDecimal(outvii.Split('+')[9]);
                    partial_fill_iv_b_1 = Convert.ToDecimal(outvii.Split('+')[10]);
                    partial_fill_iv_b_2 = Convert.ToDecimal(outvii.Split('+')[11]);
                    qoute_stuck_side_iv_b_1 = outvii.Split('+')[12];
                    qoute_stuck_side_iv_b_2 = outvii.Split('+')[13];
                    qoute_stuck_price_iv_b_1 = Convert.ToDecimal(outvii.Split('+')[14]);
                    qoute_stuck_price_iv_b_2 = Convert.ToDecimal(outvii.Split('+')[15]);



                    string outviii = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_iv_s_1, m_childorderKey_iv_s_2, rel_iv_s, partial_fill_iv_s_1, partial_fill_iv_s_2, order_iv_s_a1, order_iv_s_a2, order_iv_s_a1n, order_iv_s_a2n, m_instrumentTradeSubscription_iv, m_instrumentTradeSubscription_iv_a1, m_instrumentTradeSubscription_iv_a2, m_orderKey_iv_s, m_orderKey_iv_s_old, qoute_stuck_side_iv_s_1, qoute_stuck_side_iv_s_2, qoute_stuck_price_iv_s_1, qoute_stuck_price_iv_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_iv_s, e.Fill.Order.ToString(), "selling", order_updated_details_i);
                    m_childorderKey_iv_s_1 = outviii.Split('+')[0];
                    m_childorderKey_iv_s_2 = outviii.Split('+')[1];
                    m_orderKey_iv_s = outviii.Split('+')[2];
                    m_orderKey_iv_s_old = outviii.Split('+')[3];
                    order_iv_s_a1n = Convert.ToBoolean(outviii.Split('+')[4]);
                    order_iv_s_a1 = Convert.ToBoolean(outviii.Split('+')[5]);
                    order_iv_s_a2n = Convert.ToBoolean(outviii.Split('+')[6]);
                    order_iv_s_a2 = Convert.ToBoolean(outviii.Split('+')[7]);
                    new_reload_iv_s = Convert.ToBoolean(outviii.Split('+')[8]);
                    rel_iv_s = Convert.ToDecimal(outviii.Split('+')[9]);
                    partial_fill_iv_s_1 = Convert.ToDecimal(outviii.Split('+')[10]);
                    partial_fill_iv_s_2 = Convert.ToDecimal(outviii.Split('+')[11]);
                    qoute_stuck_side_iv_s_1 = outviii.Split('+')[12];
                    qoute_stuck_side_iv_s_2 = outviii.Split('+')[13];
                    qoute_stuck_price_iv_s_1 = Convert.ToDecimal(outviii.Split('+')[14]);
                    qoute_stuck_price_iv_s_2 = Convert.ToDecimal(outviii.Split('+')[15]);

                    string outix = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_v_b_1, m_childorderKey_v_b_2, rel_v_b, partial_fill_v_b_1, partial_fill_v_b_2, order_v_b_a1, order_v_b_a2, order_v_b_a1n, order_v_b_a2n, m_instrumentTradeSubscription_v, m_instrumentTradeSubscription_v_a1, m_instrumentTradeSubscription_v_a2, m_orderKey_v_b, m_orderKey_v_b_old, qoute_stuck_side_v_b_1, qoute_stuck_side_v_b_2, qoute_stuck_price_v_b_1, qoute_stuck_price_v_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_v_b, e.Fill.Order.ToString(), "buying", order_updated_details_i);
                    m_childorderKey_v_b_1 = outix.Split('+')[0];
                    m_childorderKey_v_b_2 = outix.Split('+')[1];
                    m_orderKey_v_b = outix.Split('+')[2];
                    m_orderKey_v_b_old = outix.Split('+')[3];
                    order_v_b_a1n = Convert.ToBoolean(outix.Split('+')[4]);
                    order_v_b_a1 = Convert.ToBoolean(outix.Split('+')[5]);
                    order_v_b_a2n = Convert.ToBoolean(outix.Split('+')[6]);
                    order_v_b_a2 = Convert.ToBoolean(outix.Split('+')[7]);
                    new_reload_v_b = Convert.ToBoolean(outix.Split('+')[8]);
                    rel_v_b = Convert.ToDecimal(outix.Split('+')[9]);
                    partial_fill_v_b_1 = Convert.ToDecimal(outix.Split('+')[10]);
                    partial_fill_v_b_2 = Convert.ToDecimal(outix.Split('+')[11]);
                    qoute_stuck_side_v_b_1 = outix.Split('+')[12];
                    qoute_stuck_side_v_b_2 = outix.Split('+')[13];
                    qoute_stuck_price_v_b_1 = Convert.ToDecimal(outix.Split('+')[14]);
                    qoute_stuck_price_v_b_2 = Convert.ToDecimal(outix.Split('+')[15]);

                    



                    string outx = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_v_s_1, m_childorderKey_v_s_2, rel_v_s, partial_fill_v_s_1, partial_fill_v_s_2, order_v_s_a1, order_v_s_a2, order_v_s_a1n, order_v_s_a2n, m_instrumentTradeSubscription_v, m_instrumentTradeSubscription_v_a1, m_instrumentTradeSubscription_v_a2, m_orderKey_v_s, m_orderKey_v_s_old, qoute_stuck_side_v_s_1, qoute_stuck_side_v_s_2, qoute_stuck_price_v_s_1, qoute_stuck_price_v_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_v_s, e.Fill.Order.ToString(), "selling", order_updated_details_i);
                    m_childorderKey_v_s_1 = outx.Split('+')[0];
                    m_childorderKey_v_s_2 = outx.Split('+')[1];
                    m_orderKey_v_s = outx.Split('+')[2];
                    m_orderKey_v_s_old = outx.Split('+')[3];
                    order_v_s_a1n = Convert.ToBoolean(outx.Split('+')[4]);
                    order_v_s_a1 = Convert.ToBoolean(outx.Split('+')[5]);
                    order_v_s_a2n = Convert.ToBoolean(outx.Split('+')[6]);
                    order_v_s_a2 = Convert.ToBoolean(outx.Split('+')[7]);
                    new_reload_v_s = Convert.ToBoolean(outx.Split('+')[8]);
                    rel_v_s = Convert.ToDecimal(outx.Split('+')[9]);
                    partial_fill_v_s_1 = Convert.ToDecimal(outx.Split('+')[10]);
                    partial_fill_v_s_2 = Convert.ToDecimal(outx.Split('+')[11]);
                    qoute_stuck_side_v_s_1 = outx.Split('+')[12];
                    qoute_stuck_side_v_s_2 = outx.Split('+')[13];
                    qoute_stuck_price_v_s_1 = Convert.ToDecimal(outx.Split('+')[14]);
                    qoute_stuck_price_v_s_2 = Convert.ToDecimal(outx.Split('+')[15]);


                    /*  richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", out2));*/

                    string outxi = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_vi_b_1, m_childorderKey_vi_b_2, rel_vi_b, partial_fill_vi_b_1, partial_fill_vi_b_2, order_vi_b_a1, order_vi_b_a2, order_vi_b_a1n, order_vi_b_a2n, m_instrumentTradeSubscription_vi, m_instrumentTradeSubscription_vi_a1, m_instrumentTradeSubscription_vi_a2, m_orderKey_vi_b, m_orderKey_vi_b_old, qoute_stuck_side_vi_b_1, qoute_stuck_side_vi_b_2, qoute_stuck_price_vi_b_1, qoute_stuck_price_vi_b_2, Convert.ToString(e.OldOrder.Instrument), new_reload_vi_b, e.Fill.Order.ToString(), "buying", order_updated_details_i);
                    m_childorderKey_vi_b_1 = outxi.Split('+')[0];
                    m_childorderKey_vi_b_2 = outxi.Split('+')[1];
                    m_orderKey_vi_b = outxi.Split('+')[2];
                    m_orderKey_vi_b_old = outxi.Split('+')[3];
                    order_vi_b_a1n = Convert.ToBoolean(outxi.Split('+')[4]);
                    order_vi_b_a1 = Convert.ToBoolean(outxi.Split('+')[5]);
                    order_vi_b_a2n = Convert.ToBoolean(outxi.Split('+')[6]);
                    order_vi_b_a2 = Convert.ToBoolean(outxi.Split('+')[7]);
                    new_reload_vi_b = Convert.ToBoolean(outxi.Split('+')[8]);
                    rel_vi_b = Convert.ToDecimal(outxi.Split('+')[9]);
                    partial_fill_vi_b_1 = Convert.ToDecimal(outxi.Split('+')[10]);
                    partial_fill_vi_b_2 = Convert.ToDecimal(outxi.Split('+')[11]);
                    qoute_stuck_side_vi_b_1 = outxi.Split('+')[12];
                    qoute_stuck_side_vi_b_2 = outxi.Split('+')[13];
                    qoute_stuck_price_vi_b_1 = Convert.ToDecimal(outxi.Split('+')[14]);
                    qoute_stuck_price_vi_b_2 = Convert.ToDecimal(outxi.Split('+')[15]);

                    /*richTextBox1.AppendText(String.Format("\nOrderkyun [{0}] ", outxi));*/


                    string outxii = fill_management(e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.BuySell, m_childorderKey_vi_s_1, m_childorderKey_vi_s_2, rel_vi_s, partial_fill_vi_s_1, partial_fill_vi_s_2, order_vi_s_a1, order_vi_s_a2, order_vi_s_a1n, order_vi_s_a2n, m_instrumentTradeSubscription_vi, m_instrumentTradeSubscription_vi_a1, m_instrumentTradeSubscription_vi_a2, m_orderKey_vi_s, m_orderKey_vi_s_old, qoute_stuck_side_vi_s_1, qoute_stuck_side_vi_s_2, qoute_stuck_price_vi_s_1, qoute_stuck_price_vi_s_2, Convert.ToString(e.OldOrder.Instrument), new_reload_vi_s, e.Fill.Order.ToString(), "selling", order_updated_details_i);
                    m_childorderKey_vi_s_1 = outxii.Split('+')[0];
                    m_childorderKey_vi_s_2 = outxii.Split('+')[1];
                    m_orderKey_vi_s = outxii.Split('+')[2];
                    m_orderKey_vi_s_old = outxii.Split('+')[3];
                    order_vi_s_a1n = Convert.ToBoolean(outxii.Split('+')[4]);
                    order_vi_s_a1 = Convert.ToBoolean(outxii.Split('+')[5]);
                    order_vi_s_a2n = Convert.ToBoolean(outxii.Split('+')[6]);
                    order_vi_s_a2 = Convert.ToBoolean(outxii.Split('+')[7]);
                    new_reload_vi_s = Convert.ToBoolean(outxii.Split('+')[8]);
                    rel_vi_s = Convert.ToDecimal(outxii.Split('+')[9]);
                    partial_fill_vi_s_1 = Convert.ToDecimal(outxii.Split('+')[10]);
                    partial_fill_vi_s_2 = Convert.ToDecimal(outxii.Split('+')[11]);
                    qoute_stuck_side_vi_s_1 = outxii.Split('+')[12];
                    qoute_stuck_side_vi_s_2 = outxii.Split('+')[13];
                    qoute_stuck_price_vi_s_1 = Convert.ToDecimal(outxii.Split('+')[14]);
                    qoute_stuck_price_vi_s_2 = Convert.ToDecimal(outxii.Split('+')[15]);

                    for (int i = 0; i < dataGridView1.RowCount; i++)
                    {
                        if (e.Fill.SiteOrderKey == Convert.ToString(dataGridView1.Rows[i].Cells[4].Value))
                        {
                            dataGridView1.Rows.RemoveAt(i);
                        }
                    }
                    for (int i = 0; i < dataGridView3.RowCount; i++)
                    {
                        if (e.Fill.SiteOrderKey == Convert.ToString(dataGridView3.Rows[i].Cells[4].Value))
                        {
                            dataGridView3.Rows.RemoveAt(i);
                        }
                    }

                }
                else
                {
                    Log.Information("\nOrderPartiallyFilled [{0}]: {1}@{2}", e.Fill.SiteOrderKey, e.Fill.Quantity, e.Fill.MatchPrice);
                    richTextBox1.AppendText(String.Format("\nOrderPartiallyFilled for {0} {1}@{2}   yeh rahi {3}:{4}", e.Fill.Instrument, e.Fill.Quantity, e.Fill.MatchPrice, m_childorderKey_b_1, m_childorderKey_b_2));

                    if (Convert.ToString(e.Fill.Instrument).Contains("Sr1 Jul24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_1_b += Convert.ToDecimal(e.Fill.Quantity);
                            richTextBox1.AppendText(String.Format("{0},{1}", e.Fill.MatchPrice, e.Fill.MatchPrice + 1));
                            if ((Convert.ToDecimal(final_price_1_b) > Convert.ToDecimal(e.Fill.MatchPrice+1)||Convert.ToDecimal(final_price_1_b)< Convert.ToDecimal(e.Fill.MatchPrice-1))&&e.Fill.Quantity==rel_1_b )
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_1_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_1_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-sr1 jul Making wrong Price from buying side {0}:{1}",final_price_1_b,e.Fill.MatchPrice);
                                    Environment.Exit(0);
                                }
                                else
                                {
                                    wrong_price_1_b = true;
                                    wrong_price_time_1_b = DateTime.Now;
                                }
                                wait_1_b = true;
                            }
                            else
                            {
                                wrong_price_1_b = false;

                            }
                        }
                        else
                        {
                            fill_1_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_1_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_1_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_1_s)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_1_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_1_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-sr1 jul Making wrong Price from selling side {0}:{1}",final_price_1_s,e.Fill.MatchPrice);
                                    Environment.Exit(1);
                                }
                                else
                                {
                                    wrong_price_1_s = true;
                                    wrong_price_time_1_s = DateTime.Now;
                                }
                                wait_1_s = true;
                            }
                            else
                            {
                                wrong_price_1_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("Sr1 Aug24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_2_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_2_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_2_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1) )&& e.Fill.Quantity == rel_2_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_2_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_2_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-sr1aug Making wrong Price from buying side {0}:{1}",final_price_2_b,e.Fill.MatchPrice);
                                    Environment.Exit(2);
                                }
                                else
                                {
                                    wrong_price_2_b = true;
                                    wrong_price_time_2_b = DateTime.Now;
                                }
                                wait_2_b = true;

                            }
                            else
                            {
                                wrong_price_2_b = false;

                            }
                        }
                        else
                        {
                            fill_2_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_2_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_2_s )< Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_2_s)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_2_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_2_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-sr1aug Making wrong Price from selling side{0}:{1}", final_price_2_s, e.Fill.MatchPrice);
                                    Environment.Exit(3);
                                }
                                else
                                {
                                    wrong_price_2_s = true;
                                    wrong_price_time_2_s = DateTime.Now;
                                }
                                wait_2_s = true;
                            }
                            else
                            {
                                wrong_price_2_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("Sr1 Jan24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_3_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_3_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_3_b )< Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_3_b)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_3_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_3_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-sr1Jan Making wrong Price from Buying side{0}:{1}", final_price_3_b, e.Fill.MatchPrice);
                                    Environment.Exit(4);
                                }
                                else
                                {
                                    wrong_price_3_b = true;
                                    wrong_price_time_3_b = DateTime.Now;
                                    Log.Information("Code stopped due to SR3Dec-sr1Jan Making wrong Price from Buying side{0}:{1}", final_price_3_b, e.Fill.MatchPrice);

                                }
                                wait_3_b = true;
                            }
                            else
                            {
                                wrong_price_3_b = false;

                            }
                        }
                        else
                        {
                            fill_3_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_3_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_3_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_3_s)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_3_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_3_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-sr1Jan Making wrong Price from selling side{0}:{1}", final_price_3_s, e.Fill.MatchPrice);
                                    Environment.Exit(5);
                                }
                                else
                                {
                                    wrong_price_3_s = true;
                                    wrong_price_time_3_s = DateTime.Now;
                                }
                                wait_3_s = true;
                            }
                            else
                            {
                                wrong_price_3_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("Sr1 Feb24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_4_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_4_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1 )|| Convert.ToDecimal(final_price_4_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_4_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_4_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_4_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-sr1Feb Making wrong Price from Buying side {0}:{1} ", final_price_4_b, e.Fill.MatchPrice);
                                    Environment.Exit(6);
                                }
                                else
                                {
                                    wrong_price_4_b = true;
                                    wrong_price_time_4_b = DateTime.Now;
                                }
                                wait_4_b = true;
                            }
                            else
                            {
                                wrong_price_4_b = false;
                            }
                        }
                        else
                        {
                            fill_4_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_4_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_4_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_4_s)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_4_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_4_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-sr1Feb Making wrong Price from selling side{0}:{1}", final_price_4_s, e.Fill.MatchPrice);
                                    Environment.Exit(7);
                                }
                                else
                                {
                                    wrong_price_4_s = true;
                                    wrong_price_time_4_s = DateTime.Now;
                                }
                                wait_4_s = true;
                            }
                            else
                            {
                                wrong_price_4_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("Sr1 Apr24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_5_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_5_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_5_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_5_b)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_5_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_5_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-sr1apr Making wrong Price from Buying side {0}:{1}", final_price_5_b, e.Fill.MatchPrice);
                                    Environment.Exit(400);
                                }
                                else
                                {
                                    wrong_price_5_b = true;
                                    wrong_price_time_5_b = DateTime.Now;
                                }
                                wait_5_b = true;
                            }
                            else
                            {
                                wrong_price_5_b = false;

                            }
                        }
                        else
                        {
                            fill_5_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_5_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_5_s )< Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_5_s)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_5_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_5_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-sr1apr Making wrong Price from selling side {0}:{1}", final_price_5_s, e.Fill.MatchPrice);
                                    Environment.Exit(401);
                                }
                                else
                                {
                                    wrong_price_5_s = true;
                                    wrong_price_time_5_s = DateTime.Now;
                                }
                                wait_5_s = true;
                            }
                            else
                            {
                                wrong_price_5_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("Sr1 May24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_6_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_6_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_6_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_6_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_6_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_6_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-sr1May Making wrong Price from Buying side {0}:{1}", final_price_6_b, e.Fill.MatchPrice);
                                    Environment.Exit(402);
                                }
                                else
                                {
                                    wrong_price_6_b = true;
                                    wrong_price_time_6_b = DateTime.Now;
                                }
                                wait_6_b = true;
                            }
                            else
                            {
                                wrong_price_6_b = false;
                            }
                        }
                        else
                        {
                            fill_6_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_6_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_6_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_6_s)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_6_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_6_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-sr1may Making wrong Price from selling side {0}:{1}", final_price_6_s, e.Fill.MatchPrice);
                                    Environment.Exit(403);
                                }
                                else
                                {
                                    wrong_price_6_s = true;
                                    wrong_price_time_6_s = DateTime.Now;
                                }
                                wait_6_s = true;
                            }
                            else
                            {
                                wrong_price_6_s = false;

                            }
                        }

                    }

                    else if (Convert.ToString(e.Fill.Instrument).Contains("ZQ Jul24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_i_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_i_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_i_b )< Convert.ToDecimal(e.Fill.MatchPrice - 1) )&& e.Fill.Quantity == rel_i_b)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_i_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_i_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-ZQ jul Making wrong Price from buying side {0}:{1}", final_price_i_b, e.Fill.MatchPrice);
                                    Environment.Exit('a');
                                }
                                else
                                {
                                    wrong_price_i_b = true;
                                    wrong_price_time_i_b = DateTime.Now;
                                }
                                wait_i_b = true;
                            }
                            else
                            {
                                wrong_price_i_b = false;

                            }
                        }
                        else
                        {
                            fill_i_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_i_s )> Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_i_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_i_s)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_i_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_i_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3 jun-zq jul Making wrong Price from selling side {0}:{1}", final_price_i_s, e.Fill.MatchPrice);
                                    Environment.Exit('b');
                                }
                                else
                                {
                                    wrong_price_i_s = true;
                                    wrong_price_time_i_s = DateTime.Now;
                                }
                                wait_i_s = true;
                            }
                            else
                            {
                                wrong_price_i_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("ZQ Aug24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_ii_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_ii_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_ii_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1) )&& e.Fill.Quantity == rel_ii_b)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_ii_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_ii_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-zq aug Making wrong Price from buying side {0}:{1}", final_price_ii_b, e.Fill.MatchPrice);
                                    Environment.Exit('c');
                                }
                                else
                                {
                                    wrong_price_ii_b = true;
                                    wrong_price_time_ii_b = DateTime.Now;
                                }
                                wait_ii_b = true;

                            }
                            else
                            {
                                wrong_price_ii_b = false;

                            }
                        }
                        else
                        {
                            fill_ii_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_ii_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1 )|| Convert.ToDecimal(final_price_ii_s )< Convert.ToDecimal(e.Fill.MatchPrice - 1) )&& e.Fill.Quantity == rel_ii_s)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_ii_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_ii_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3jun-ZQaug Making wrong Price from selling side {0}:{1}", final_price_ii_s, e.Fill.MatchPrice);
                                    Environment.Exit('d');
                                }
                                else
                                {
                                    wrong_price_ii_s = true;
                                    wrong_price_time_ii_s = DateTime.Now;
                                }
                                wait_ii_s = true;
                            }
                            else
                            {
                                wrong_price_ii_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("ZQ Jan24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_iii_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_iii_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_iii_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_iii_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_iii_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_iii_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-zqJan Making wrong Price from Buying side {0}:{1}", final_price_iii_b, e.Fill.MatchPrice);
                                    Environment.Exit('e');
                                }
                                else
                                {
                                    wrong_price_iii_b = true;
                                    wrong_price_time_iii_b = DateTime.Now;
                                }
                                wait_iii_b = true;
                            }
                            else
                            {
                                wrong_price_iii_b = false;

                            }
                        }
                        else
                        {
                            fill_iii_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_iii_s )> Convert.ToDecimal(e.Fill.MatchPrice + 1 )|| Convert.ToDecimal(final_price_iii_s )< Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_iii_s)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_iii_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_iii_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-ZQJan Making wrong Price from selling side {0}:{1}", final_price_iii_s, e.Fill.MatchPrice);
                                    Environment.Exit('f');
                                }
                                else
                                {
                                    wrong_price_iii_s = true;
                                    wrong_price_time_iii_s = DateTime.Now;
                                }
                                wait_iii_s = true;
                            }
                            else
                            {
                                wrong_price_iii_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("ZQ Feb24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_iv_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_iv_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1 )|| Convert.ToDecimal(final_price_iv_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_iv_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_iv_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_iv_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-ZQFeb Making wrong Price from Buying side {0}:{1}", final_price_iv_b, e.Fill.MatchPrice);
                                    Environment.Exit('g');
                                }
                                else
                                {
                                    wrong_price_iv_b = true;
                                    wrong_price_time_iv_b = DateTime.Now;
                                }
                                wait_iv_b = true;
                            }
                            else
                            {
                                wrong_price_iv_b = false;
                            }
                        }
                        else
                        {
                            fill_iv_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_iv_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_iv_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_iv_s)

                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_iv_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_iv_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Dec-ZQFeb Making wrong Price from selling side  {0}:{1}", final_price_iii_s, e.Fill.MatchPrice);
                                    Environment.Exit('h');
                                }
                                else
                                {
                                    wrong_price_iv_s = true;
                                    wrong_price_time_iv_s = DateTime.Now;
                                }
                                wait_iv_s = true;
                            }
                            else
                            {
                                wrong_price_iv_s = false;

                            }
                        }
                    }



                    else if (Convert.ToString(e.Fill.Instrument).Contains("ZQ Apr24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_v_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_v_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_v_b) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_v_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_v_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_v_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-zqapr Making wrong Price from Buying side{0}:{1}", final_price_v_b, e.Fill.MatchPrice);
                                    Environment.Exit(404);
                                }
                                else
                                {
                                    wrong_price_v_b = true;
                                    wrong_price_time_v_b = DateTime.Now;
                                }
                                wait_v_b = true;
                            }
                            else
                            {
                                wrong_price_v_b = false;

                            }
                        }
                        else
                        {
                            fill_v_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_v_s )> Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_v_s )< Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_v_s)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_v_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_v_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3Mar-ZQapr Making wrong Price from selling side{0}:{1}", final_price_v_s, e.Fill.MatchPrice);
                                    Environment.Exit(405);
                                }
                                else
                                {
                                    wrong_price_v_s = true;
                                    wrong_price_time_v_s = DateTime.Now;
                                }
                                wait_v_s = true;
                            }
                            else
                            {
                                wrong_price_v_s = false;

                            }
                        }

                    }
                    else if (Convert.ToString(e.Fill.Instrument).Contains("ZQ May24 .net"))
                    {
                        if (Convert.ToString(e.Fill.BuySell).Contains("Buy"))
                        {
                            fill_vi_b += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_vi_b) > Convert.ToDecimal(e.Fill.MatchPrice + 1) || Convert.ToDecimal(final_price_vi_b )< Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_vi_b)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_vi_b;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_vi_b && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-zq may Making wrong Price from Buying side{0}:{1}", final_price_vi_b, e.Fill.MatchPrice);
                                    Environment.Exit(406);
                                }
                                else
                                {
                                    wrong_price_vi_b = true;
                                    wrong_price_time_vi_b = DateTime.Now;
                                }
                                wait_vi_b = true;
                            }
                            else
                            {
                                wrong_price_vi_b = false;
                            }
                        }
                        else
                        {
                            fill_vi_s += Convert.ToDecimal(e.Fill.Quantity);
                            if ((Convert.ToDecimal(final_price_vi_s) > Convert.ToDecimal(e.Fill.MatchPrice + 1 )|| Convert.ToDecimal(final_price_vi_s) < Convert.ToDecimal(e.Fill.MatchPrice - 1)) && e.Fill.Quantity == rel_vi_s)
                            {
                                TimeSpan difference = DateTime.Now - wrong_price_time_vi_s;
                                TimeSpan threshold = TimeSpan.FromSeconds(1);


                                if (wrong_price_vi_s && difference < threshold)
                                {
                                    Log.Information(DateTime.Now.ToString());
                                    button19.PerformClick();
                                    Log.Information("Code stopped due to SR3mar-zq may Making wrong Price from selling side {0}:{1}", final_price_vi_s, e.Fill.MatchPrice);
                                    Environment.Exit(407);
                                }
                                else
                                {
                                    wrong_price_vi_s = true;
                                    wrong_price_time_vi_s = DateTime.Now;
                                }
                                wait_vi_s = true;
                            }
                            else
                            {
                                wrong_price_vi_s = false;

                            }
                        }

                    }
                        if (e.Fill.SiteOrderKey == m_childorderKey_b_1)
                    {
                        partial_fill_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_b_2)
                    {
                        partial_fill_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_b_1)
                    {
                        partial_fill_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_b_2)
                    {
                        partial_fill_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_s_1)
                    {
                        partial_fill_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_s_2)
                    {
                        partial_fill_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_s_1)
                    {
                        partial_fill_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_s_2)
                    {
                        partial_fill_s_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_1_b_1)
                    {
                        partial_fill_1_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_1_b_2)
                    {
                        partial_fill_1_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_1_b_1)
                    {
                        partial_fill_1_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_1_b_2)
                    {
                        partial_fill_1_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_1_s_1)
                    {
                        partial_fill_1_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_1_s_2)
                    {
                        partial_fill_1_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_1_s_1)
                    {
                        partial_fill_1_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_1_s_2)
                    {
                        partial_fill_1_s_2 += e.Fill.Quantity;
                    }

                    if (e.Fill.SiteOrderKey == m_childorderKey_3_b_1)
                    {
                        partial_fill_3_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_3_b_2)
                    {
                        partial_fill_3_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_3_b_1)
                    {
                        partial_fill_3_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_3_b_2)
                    {
                        partial_fill_3_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_3_s_1)
                    {
                        partial_fill_3_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_3_s_2)
                    {
                        partial_fill_3_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_3_s_1)
                    {
                        partial_fill_3_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_3_s_2)
                    {
                        partial_fill_3_s_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_4_b_1)
                    {
                        partial_fill_4_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_4_b_2)
                    {
                        partial_fill_4_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_4_b_1)
                    {
                        partial_fill_4_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_4_b_2)
                    {
                        partial_fill_4_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_4_s_1)
                    {
                        partial_fill_4_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_4_s_2)
                    {
                        partial_fill_4_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_4_s_1)
                    {
                        partial_fill_4_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_4_s_2)
                    {
                        partial_fill_4_s_2 += e.Fill.Quantity;
                    }

                    if (e.Fill.SiteOrderKey == m_childorderKey_5_b_1)
                    {
                        partial_fill_5_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_5_b_2)
                    {
                        partial_fill_5_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_5_b_1)
                    {
                        partial_fill_5_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_5_b_2)
                    {
                        partial_fill_5_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_5_s_1)
                    {
                        partial_fill_5_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_5_s_2)
                    {
                        partial_fill_5_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_5_s_1)
                    {
                        partial_fill_5_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_5_s_2)
                    {
                        partial_fill_5_s_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_6_b_1)
                    {
                        partial_fill_6_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_6_b_2)
                    {
                        partial_fill_6_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_6_b_1)
                    {
                        partial_fill_6_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_6_b_2)
                    {
                        partial_fill_6_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_6_s_1)
                    {
                        partial_fill_6_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_6_s_2)
                    {
                        partial_fill_6_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_6_s_1)
                    {
                        partial_fill_6_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_6_s_2)
                    {
                        partial_fill_6_s_2 += e.Fill.Quantity;
                    }




                    if (e.Fill.SiteOrderKey == m_childorderKey_i_b_1)
                    {
                        partial_fill_i_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_i_b_2)
                    {
                        partial_fill_i_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_i_b_1)
                    {
                        partial_fill_i_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_i_b_2)
                    {
                        partial_fill_i_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_i_s_1)
                    {
                        partial_fill_i_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_i_s_2)
                    {
                        partial_fill_i_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_i_s_1)
                    {
                        partial_fill_i_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_i_s_2)
                    {
                        partial_fill_i_s_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_ii_b_1)
                    {
                        partial_fill_ii_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_ii_b_2)
                    {
                        partial_fill_ii_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_ii_b_1)
                    {
                        partial_fill_ii_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_ii_b_2)
                    {
                        partial_fill_ii_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_ii_s_1)
                    {
                        partial_fill_ii_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_ii_s_2)
                    {
                        partial_fill_ii_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_ii_s_1)
                    {
                        partial_fill_ii_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_ii_s_2)
                    {
                        partial_fill_ii_s_2 += e.Fill.Quantity;
                    }

                    if (e.Fill.SiteOrderKey == m_childorderKey_iii_b_1)
                    {
                        partial_fill_iii_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_iii_b_2)
                    {
                        partial_fill_iii_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iii_b_1)
                    {
                        partial_fill_iii_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iii_b_2)
                    {
                        partial_fill_iii_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_iii_s_1)
                    {
                        partial_fill_iii_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_iii_s_2)
                    {
                        partial_fill_iii_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iii_s_1)
                    {
                        partial_fill_iii_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iii_s_2)
                    {
                        partial_fill_iii_s_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_iv_b_1)
                    {
                        partial_fill_iv_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_iv_b_2)
                    {
                        partial_fill_iv_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iv_b_1)
                    {
                        partial_fill_iv_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iv_b_2)
                    {
                        partial_fill_iv_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_iv_s_1)
                    {
                        partial_fill_iv_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_iv_s_2)
                    {
                        partial_fill_iv_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iv_s_1)
                    {
                        partial_fill_iv_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_iv_s_2)
                    {
                        partial_fill_iv_s_2 += e.Fill.Quantity;
                    }

                    if (e.Fill.SiteOrderKey == m_childorderKey_v_b_1)
                    {
                        partial_fill_v_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_v_b_2)
                    {
                        partial_fill_v_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_v_b_1)
                    {
                        partial_fill_v_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_v_b_2)
                    {
                        partial_fill_v_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_v_s_1)
                    {
                        partial_fill_v_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_v_s_2)
                    {
                        partial_fill_v_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_v_s_1)
                    {
                        partial_fill_v_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_v_s_2)
                    {
                        partial_fill_v_s_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_vi_b_1)
                    {
                        partial_fill_vi_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_vi_b_2)
                    {
                        partial_fill_vi_b_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_vi_b_1)
                    {
                        partial_fill_vi_b_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_vi_b_2)
                    {
                        partial_fill_vi_b_2 += e.Fill.Quantity;
                    }



                    if (e.Fill.SiteOrderKey == m_childorderKey_vi_s_1)
                    {
                        partial_fill_vi_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_childorderKey_vi_s_2)
                    {
                        partial_fill_vi_s_2 += e.Fill.Quantity;
                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_vi_s_1)
                    {
                        partial_fill_vi_s_1 += e.Fill.Quantity;

                    }
                    if (e.Fill.SiteOrderKey == m_hedgeorderKey_vi_s_2)
                    {
                        partial_fill_vi_s_2 += e.Fill.Quantity;
                    }

                    for (int i = 0; i < dataGridView1.RowCount; i++)
                    {
                        if (e.Fill.SiteOrderKey == Convert.ToString(dataGridView1.Rows[i].Cells[4].Value))
                        {

                            /*   richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}", e.Fill.Quantity, dataGridView1.Rows[i].Cells[2].Value.ToString()));*/

                            decimal temp = Convert.ToDecimal(dataGridView1.Rows[i].Cells[2].Value.ToString()) - e.Fill.Quantity;
                            dataGridView1.Rows[i].Cells[2].Value = temp;
                            break;
                        }
                    }
                    for (int i = 0; i < dataGridView3.RowCount; i++)
                    {
                        if (e.Fill.SiteOrderKey == Convert.ToString(dataGridView3.Rows[i].Cells[4].Value))
                        {

                            /*   richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}", e.Fill.Quantity, dataGridView3.Rows[i].Cells[2].Value.ToString()));*/

                            decimal temp = Convert.ToDecimal(dataGridView3.Rows[i].Cells[2].Value.ToString()) - e.Fill.Quantity;
                            dataGridView3.Rows[i].Cells[2].Value = temp;
                            checker = true;
                            break;
                        }
                    }
                    if (checker == false && !Convert.ToString(e.Fill.Instrument).Contains("ASE"))
                    {
                        if (e.Fill.SiteOrderKey == m_childorderKey_b_1)
                        {
                            /*  richTextBox1.AppendText("\nhvi");*/
                            decimal z = rel_1_b * 5 - partial_fill_b_1;
                            /* richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_b_2)
                        {
                            decimal z = rel_1_b * 3 - partial_fill_b_2;
                            /*  richTextBox1.AppendText(String.Format("\nhmmm2 {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_1_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_1_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_1_b_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_2_b * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_1_b_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_2_b * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_1_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_2_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_1_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_2_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_3_b_1)
                        {
                            /*  richTextBox1.AppendText("\nhiiiii");*/
                            decimal z = rel_3_b * 5 - partial_fill_3_b_1;
                            /* richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_3_b_2)
                        {
                            decimal z = rel_3_b * 3 - partial_fill_3_b_2;
                            /*  richTextBox1.AppendText(String.Format("\nhmmm2 {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_3_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_3_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_3_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_3_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_4_b_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_4_b * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_4_b_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_4_b * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_4_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_4_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_4_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_4_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_5_b_1)
                        {
                            /*  richTextBox1.AppendText("\nhiiiii");*/
                            decimal z = rel_5_b * 5 - partial_fill_5_b_1;
                            /* richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_5_b_2)
                        {
                            decimal z = rel_5_b * 3 - partial_fill_5_b_2;
                            /*  richTextBox1.AppendText(String.Format("\nhmmm2 {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_5_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_5_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_5_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_5_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_6_b_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_6_b * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_6_b_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_6_b * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_6_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_6_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_6_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_6_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }

                        else if (e.Fill.SiteOrderKey == m_childorderKey_i_b_1)
                        {
                            /*  richTextBox1.AppendText("\nhiiiii");*/
                            decimal z = rel_i_b * 5 - partial_fill_i_b_1;
                            /* richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_i_b_2)
                        {
                            decimal z = rel_i_b * 3 - partial_fill_i_b_2;
                            /*  richTextBox1.AppendText(String.Format("\nhmmm2 {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_i_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_i_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_i_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_i_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_ii_b_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_ii_b * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_ii_b_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_ii_b * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_ii_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_ii_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_ii_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_ii_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iii_b_1)
                        {
                            /*  richTextBox1.AppendText("\nhiiiii");*/
                            decimal z = rel_iii_b * 5 - partial_fill_iii_b_1;
                            /* richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iii_b_2)
                        {
                            decimal z = rel_iii_b * 3 - partial_fill_iii_b_2;
                            /*  richTextBox1.AppendText(String.Format("\nhmmm2 {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iii_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_iii_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iii_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_iii_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iv_b_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_iv_b * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iv_b_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_iv_b * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iv_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_iv_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_iv_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_iv_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_v_b_1)
                        {
                            /*  richTextBox1.AppendText("\nhvii");*/
                            decimal z = rel_v_b * 5 - partial_fill_v_b_1;
                            /* richTextBox1.AppendText(String.Format("\nhmmm {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_v_b_2)
                        {
                            decimal z = rel_v_b * 3 - partial_fill_v_b_2;
                            /*  richTextBox1.AppendText(String.Format("\nhmmm2 {0} with {1}: {2}:{3}:{4}", e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey));*/

                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, z, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_v_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_v_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_v_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_v_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_vi_b_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_vi_b * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_vi_b_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_vi_b * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_vi_s_1)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_vi_s * 5 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);

                        }
                        else if (e.Fill.SiteOrderKey == m_childorderKey_vi_s_2)
                        {
                            dataGridView3.Rows.Add(e.Fill.Instrument, e.Fill.BuySell, rel_vi_s * 3 - e.Fill.Quantity, e.Fill.MatchPrice, e.Fill.SiteOrderKey);
                        }
                    }
                    checker = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(521);
            }
        }

       

        void m_instrumentTradeSubscription_OrderDeleted(object sender, OrderDeletedEventArgs e)
        {
            try
            {
                Log.Information("\nOrderDeleted [{0}]", e.OldOrder.SiteOrderKey);
                if (e.OldOrder.SiteOrderKey == m_orderKey_b)
                {
                    /* richTextBox1.AppendText(String.Format("\nhere"));*/
                    pause_1_b = false;
                    qoute_stuck_side_b_2 = "";
                    qoute_stuck_price_b_2 = 0;
                    new_reload_1_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_b_old)
                {
                    /* richTextBox1.AppendText(String.Format("\nthere"));*/

                    if (qoute_stuck_side_b_2 == "")
                    {
                        qoute_stuck_side_b_1 = "";
                        qoute_stuck_price_b_1 = 0;
                        /* richTextBox1.AppendText(String.Format("\nthere*2"));*/
                    }
                    else
                    {
                        qoute_stuck_price_b_1 = qoute_stuck_price_b_2;
                        qoute_stuck_side_b_1 = qoute_stuck_side_b_2;
                        qoute_stuck_price_b_2 = 0;
                        qoute_stuck_side_b_2 = "";
                        m_orderKey_b_old = m_orderKey_b;
                        new_reload_1_b = true;
                        /* richTextBox1.AppendText(String.Format("\nthere*3"));*/

                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_s)
                {
                    pause_1_s = false;
                    qoute_stuck_side_s_2 = "";
                    qoute_stuck_price_s_2 = 0;
                    new_reload_1_s = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_s_old)
                {
                    if (qoute_stuck_side_s_2 == "")
                    {
                        qoute_stuck_side_s_1 = "";
                        qoute_stuck_price_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_s_1 = qoute_stuck_price_s_2;
                        qoute_stuck_side_s_1 = qoute_stuck_side_s_2;
                        qoute_stuck_price_s_2 = 0;
                        qoute_stuck_side_s_2 = "";
                        m_orderKey_s_old = m_orderKey_s;
                        new_reload_1_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_1_b)
                {
                    pause_2_b = false;
                    qoute_stuck_side_1_b_2 = "";
                    qoute_stuck_price_1_b_2 = 0;
                    new_reload_2_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_1_b_old)
                {
                    if (qoute_stuck_side_1_b_2 == "")
                    {
                        qoute_stuck_side_1_b_1 = "";
                        qoute_stuck_price_1_b_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_1_b_1 = qoute_stuck_price_1_b_2;
                        qoute_stuck_side_1_b_1 = qoute_stuck_side_1_b_2;
                        qoute_stuck_price_1_b_2 = 0;
                        qoute_stuck_side_1_b_2 = "";
                        m_orderKey_1_b_old = m_orderKey_1_b;
                        new_reload_2_b = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_1_s)
                {
                    pause_2_s = false;
                    qoute_stuck_side_1_s_2 = "";
                    qoute_stuck_price_1_s_2 = 0;
                    new_reload_2_s = true;


                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_1_s_old)
                {
                    if (qoute_stuck_side_1_s_2 == "")
                    {
                        qoute_stuck_side_1_s_1 = "";
                        qoute_stuck_price_1_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_1_s_1 = qoute_stuck_price_1_s_2;
                        qoute_stuck_side_1_s_1 = qoute_stuck_side_1_s_2;
                        qoute_stuck_price_1_s_2 = 0;
                        qoute_stuck_side_1_s_2 = "";
                        m_orderKey_1_s_old = m_orderKey_1_s;
                        new_reload_2_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_3_b)
                {

                    pause_3_b = false;
                    qoute_stuck_side_3_b_2 = "";
                    qoute_stuck_price_3_b_2 = 0;
                    new_reload_3_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_3_b_old)
                {


                    if (qoute_stuck_side_3_b_2 == "")
                    {
                        qoute_stuck_side_3_b_1 = "";
                        qoute_stuck_price_3_b_1 = 0;

                    }
                    else
                    {
                        qoute_stuck_price_3_b_1 = qoute_stuck_price_3_b_2;
                        qoute_stuck_side_3_b_1 = qoute_stuck_side_3_b_2;
                        qoute_stuck_price_3_b_2 = 0;
                        qoute_stuck_side_3_b_2 = "";
                        m_orderKey_3_b_old = m_orderKey_3_b;
                        new_reload_3_b = true;


                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_3_s)
                {
                    pause_3_s = false;
                    qoute_stuck_side_3_s_2 = "";
                    qoute_stuck_price_3_s_2 = 0;
                    new_reload_3_s = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_3_s_old)
                {
                    if (qoute_stuck_side_3_s_2 == "")
                    {
                        qoute_stuck_side_3_s_1 = "";
                        qoute_stuck_price_3_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_3_s_1 = qoute_stuck_price_3_s_2;
                        qoute_stuck_side_3_s_1 = qoute_stuck_side_3_s_2;
                        qoute_stuck_price_3_s_2 = 0;
                        qoute_stuck_side_3_s_2 = "";
                        m_orderKey_3_s_old = m_orderKey_3_s;
                        new_reload_3_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_4_b)
                {
                    pause_4_b = false;
                    qoute_stuck_side_4_b_2 = "";
                    qoute_stuck_price_4_b_2 = 0;
                    new_reload_4_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_4_b_old)
                {
                    if (qoute_stuck_side_4_b_2 == "")
                    {
                        qoute_stuck_side_4_b_1 = "";
                        qoute_stuck_price_4_b_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_4_b_1 = qoute_stuck_price_4_b_2;
                        qoute_stuck_side_4_b_1 = qoute_stuck_side_4_b_2;
                        qoute_stuck_price_4_b_2 = 0;
                        qoute_stuck_side_4_b_2 = "";
                        m_orderKey_4_b_old = m_orderKey_4_b;
                        new_reload_4_b = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_4_s)
                {
                    pause_4_s = false;
                    qoute_stuck_side_4_s_2 = "";
                    qoute_stuck_price_4_s_2 = 0;
                    new_reload_4_s = true;


                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_4_s_old)
                {
                    if (qoute_stuck_side_4_s_2 == "")
                    {
                        qoute_stuck_side_4_s_1 = "";
                        qoute_stuck_price_4_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_4_s_1 = qoute_stuck_price_4_s_2;
                        qoute_stuck_side_4_s_1 = qoute_stuck_side_4_s_2;
                        qoute_stuck_price_4_s_2 = 0;
                        qoute_stuck_side_4_s_2 = "";
                        m_orderKey_4_s_old = m_orderKey_4_s;
                        new_reload_4_s = true;
                    }
                }

                if (e.OldOrder.SiteOrderKey == m_orderKey_5_b)
                {

                    pause_5_b = false;
                    qoute_stuck_side_5_b_2 = "";
                    qoute_stuck_price_5_b_2 = 0;
                    new_reload_5_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_5_b_old)
                {


                    if (qoute_stuck_side_5_b_2 == "")
                    {
                        qoute_stuck_side_5_b_1 = "";
                        qoute_stuck_price_5_b_1 = 0;

                    }
                    else
                    {
                        qoute_stuck_price_5_b_1 = qoute_stuck_price_5_b_2;
                        qoute_stuck_side_5_b_1 = qoute_stuck_side_5_b_2;
                        qoute_stuck_price_5_b_2 = 0;
                        qoute_stuck_side_5_b_2 = "";
                        m_orderKey_5_b_old = m_orderKey_5_b;
                        new_reload_5_b = true;


                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_5_s)
                {
                    pause_5_s = false;
                    qoute_stuck_side_5_s_2 = "";
                    qoute_stuck_price_5_s_2 = 0;
                    new_reload_5_s = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_5_s_old)
                {
                    if (qoute_stuck_side_5_s_2 == "")
                    {
                        qoute_stuck_side_5_s_1 = "";
                        qoute_stuck_price_5_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_5_s_1 = qoute_stuck_price_5_s_2;
                        qoute_stuck_side_5_s_1 = qoute_stuck_side_5_s_2;
                        qoute_stuck_price_5_s_2 = 0;
                        qoute_stuck_side_5_s_2 = "";
                        m_orderKey_5_s_old = m_orderKey_5_s;
                        new_reload_5_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_6_b)
                {
                    pause_6_b = false;
                    qoute_stuck_side_6_b_2 = "";
                    qoute_stuck_price_6_b_2 = 0;
                    new_reload_6_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_6_b_old)
                {
                    if (qoute_stuck_side_6_b_2 == "")
                    {
                        qoute_stuck_side_6_b_1 = "";
                        qoute_stuck_price_6_b_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_6_b_1 = qoute_stuck_price_6_b_2;
                        qoute_stuck_side_6_b_1 = qoute_stuck_side_6_b_2;
                        qoute_stuck_price_6_b_2 = 0;
                        qoute_stuck_side_6_b_2 = "";
                        m_orderKey_6_b_old = m_orderKey_6_b;
                        new_reload_6_b = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_6_s)
                {
                    pause_6_s = false;
                    qoute_stuck_side_6_s_2 = "";
                    qoute_stuck_price_6_s_2 = 0;
                    new_reload_6_s = true;


                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_6_s_old)
                {
                    if (qoute_stuck_side_6_s_2 == "")
                    {
                        qoute_stuck_side_6_s_1 = "";
                        qoute_stuck_price_6_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_6_s_1 = qoute_stuck_price_6_s_2;
                        qoute_stuck_side_6_s_1 = qoute_stuck_side_6_s_2;
                        qoute_stuck_price_6_s_2 = 0;
                        qoute_stuck_side_6_s_2 = "";
                        m_orderKey_6_s_old = m_orderKey_6_s;
                        new_reload_6_s = true;
                    }
                }


                if (e.OldOrder.SiteOrderKey == m_orderKey_i_b)
                {
                    /* richTextBox1.AppendText(String.Format("\nhere"));*/
                    pause_i_b = false;
                    qoute_stuck_side_i_b_2 = "";
                    qoute_stuck_price_i_b_2 = 0;
                    new_reload_i_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_i_b_old)
                {
                    /* richTextBox1.AppendText(String.Format("\nthere"));*/

                    if (qoute_stuck_side_i_b_2 == "")
                    {
                        qoute_stuck_side_i_b_1 = "";
                        qoute_stuck_price_i_b_1 = 0;
                        /* richTextBox1.AppendText(String.Format("\nthere*2"));*/
                    }
                    else
                    {
                        qoute_stuck_price_i_b_1 = qoute_stuck_price_i_b_2;
                        qoute_stuck_side_i_b_1 = qoute_stuck_side_i_b_2;
                        qoute_stuck_price_i_b_2 = 0;
                        qoute_stuck_side_i_b_2 = "";
                        m_orderKey_i_b_old = m_orderKey_i_b;
                        new_reload_i_b = true;
                        /* richTextBox1.AppendText(String.Format("\nthere*3"));*/

                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_i_s)
                {
                    pause_i_s = false;
                    qoute_stuck_side_i_s_2 = "";
                    qoute_stuck_price_i_s_2 = 0;
                    new_reload_i_s = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_i_s_old)
                {
                    if (qoute_stuck_side_i_s_2 == "")
                    {
                        qoute_stuck_side_i_s_1 = "";
                        qoute_stuck_price_i_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_i_s_1 = qoute_stuck_price_i_s_2;
                        qoute_stuck_side_i_s_1 = qoute_stuck_side_i_s_2;
                        qoute_stuck_price_i_s_2 = 0;
                        qoute_stuck_side_i_s_2 = "";
                        m_orderKey_i_s_old = m_orderKey_i_s;
                        new_reload_i_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_ii_b)
                {
                    pause_ii_b = false;
                    qoute_stuck_side_ii_b_2 = "";
                    qoute_stuck_price_ii_b_2 = 0;
                    new_reload_ii_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_ii_b_old)
                {
                    if (qoute_stuck_side_ii_b_2 == "")
                    {
                        qoute_stuck_side_ii_b_1 = "";
                        qoute_stuck_price_ii_b_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_ii_b_1 = qoute_stuck_price_ii_b_2;
                        qoute_stuck_side_ii_b_1 = qoute_stuck_side_ii_b_2;
                        qoute_stuck_price_ii_b_2 = 0;
                        qoute_stuck_side_ii_b_2 = "";
                        m_orderKey_ii_b_old = m_orderKey_ii_b;
                        new_reload_ii_b = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_ii_s)
                {
                    pause_ii_s = false;
                    qoute_stuck_side_ii_s_2 = "";
                    qoute_stuck_price_ii_s_2 = 0;
                    new_reload_ii_s = true;


                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_ii_s_old)
                {
                    if (qoute_stuck_side_ii_s_2 == "")
                    {
                        qoute_stuck_side_ii_s_1 = "";
                        qoute_stuck_price_ii_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_ii_s_1 = qoute_stuck_price_ii_s_2;
                        qoute_stuck_side_ii_s_1 = qoute_stuck_side_ii_s_2;
                        qoute_stuck_price_ii_s_2 = 0;
                        qoute_stuck_side_ii_s_2 = "";
                        m_orderKey_ii_s_old = m_orderKey_ii_s;
                        new_reload_ii_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iii_b)
                {

                    pause_iii_b = false;
                    qoute_stuck_side_iii_b_2 = "";
                    qoute_stuck_price_iii_b_2 = 0;
                    new_reload_iii_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iii_b_old)
                {


                    if (qoute_stuck_side_iii_b_2 == "")
                    {
                        qoute_stuck_side_iii_b_1 = "";
                        qoute_stuck_price_iii_b_1 = 0;

                    }
                    else
                    {
                        qoute_stuck_price_iii_b_1 = qoute_stuck_price_iii_b_2;
                        qoute_stuck_side_iii_b_1 = qoute_stuck_side_iii_b_2;
                        qoute_stuck_price_iii_b_2 = 0;
                        qoute_stuck_side_iii_b_2 = "";
                        m_orderKey_iii_b_old = m_orderKey_iii_b;
                        new_reload_iii_b = true;


                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iii_s)
                {
                    pause_iii_s = false;
                    qoute_stuck_side_iii_s_2 = "";
                    qoute_stuck_price_iii_s_2 = 0;
                    new_reload_iii_s = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iii_s_old)
                {
                    if (qoute_stuck_side_iii_s_2 == "")
                    {
                        qoute_stuck_side_iii_s_1 = "";
                        qoute_stuck_price_iii_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_iii_s_1 = qoute_stuck_price_iii_s_2;
                        qoute_stuck_side_iii_s_1 = qoute_stuck_side_iii_s_2;
                        qoute_stuck_price_iii_s_2 = 0;
                        qoute_stuck_side_iii_s_2 = "";
                        m_orderKey_iii_s_old = m_orderKey_iii_s;
                        new_reload_iii_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iv_b)
                {
                    pause_iv_b = false;
                    qoute_stuck_side_iv_b_2 = "";
                    qoute_stuck_price_iv_b_2 = 0;
                    new_reload_iv_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iv_b_old)
                {
                    if (qoute_stuck_side_iv_b_2 == "")
                    {
                        qoute_stuck_side_iv_b_1 = "";
                        qoute_stuck_price_iv_b_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_iv_b_1 = qoute_stuck_price_iv_b_2;
                        qoute_stuck_side_iv_b_1 = qoute_stuck_side_iv_b_2;
                        qoute_stuck_price_iv_b_2 = 0;
                        qoute_stuck_side_iv_b_2 = "";
                        m_orderKey_iv_b_old = m_orderKey_iv_b;
                        new_reload_iv_b = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iv_s)
                {
                    pause_iv_s = false;
                    qoute_stuck_side_iv_s_2 = "";
                    qoute_stuck_price_iv_s_2 = 0;
                    new_reload_iv_s = true;


                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_iv_s_old)
                {
                    if (qoute_stuck_side_iv_s_2 == "")
                    {
                        qoute_stuck_side_iv_s_1 = "";
                        qoute_stuck_price_iv_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_iv_s_1 = qoute_stuck_price_iv_s_2;
                        qoute_stuck_side_iv_s_1 = qoute_stuck_side_iv_s_2;
                        qoute_stuck_price_iv_s_2 = 0;
                        qoute_stuck_side_iv_s_2 = "";
                        m_orderKey_iv_s_old = m_orderKey_iv_s;
                        new_reload_iv_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_v_b)
                {

                    pause_v_b = false;
                    qoute_stuck_side_v_b_2 = "";
                    qoute_stuck_price_v_b_2 = 0;
                    new_reload_v_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_v_b_old)
                {


                    if (qoute_stuck_side_v_b_2 == "")
                    {
                        qoute_stuck_side_v_b_1 = "";
                        qoute_stuck_price_v_b_1 = 0;

                    }
                    else
                    {
                        qoute_stuck_price_v_b_1 = qoute_stuck_price_v_b_2;
                        qoute_stuck_side_v_b_1 = qoute_stuck_side_v_b_2;
                        qoute_stuck_price_v_b_2 = 0;
                        qoute_stuck_side_v_b_2 = "";
                        m_orderKey_v_b_old = m_orderKey_v_b;
                        new_reload_v_b = true;


                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_v_s)
                {
                    pause_v_s = false;
                    qoute_stuck_side_v_s_2 = "";
                    qoute_stuck_price_v_s_2 = 0;
                    new_reload_v_s = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_v_s_old)
                {
                    if (qoute_stuck_side_v_s_2 == "")
                    {
                        qoute_stuck_side_v_s_1 = "";
                        qoute_stuck_price_v_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_v_s_1 = qoute_stuck_price_v_s_2;
                        qoute_stuck_side_v_s_1 = qoute_stuck_side_v_s_2;
                        qoute_stuck_price_v_s_2 = 0;
                        qoute_stuck_side_v_s_2 = "";
                        m_orderKey_v_s_old = m_orderKey_v_s;
                        new_reload_v_s = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_vi_b)
                {
                    pause_vi_b = false;
                    qoute_stuck_side_vi_b_2 = "";
                    qoute_stuck_price_vi_b_2 = 0;
                    new_reload_vi_b = true;
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_vi_b_old)
                {
                    if (qoute_stuck_side_vi_b_2 == "")
                    {
                        qoute_stuck_side_vi_b_1 = "";
                        qoute_stuck_price_vi_b_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_vi_b_1 = qoute_stuck_price_vi_b_2;
                        qoute_stuck_side_vi_b_1 = qoute_stuck_side_vi_b_2;
                        qoute_stuck_price_vi_b_2 = 0;
                        qoute_stuck_side_vi_b_2 = "";
                        m_orderKey_vi_b_old = m_orderKey_vi_b;
                        new_reload_vi_b = true;
                    }
                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_vi_s)
                {
                    pause_vi_s = false;
                    qoute_stuck_side_vi_s_2 = "";
                    qoute_stuck_price_vi_s_2 = 0;
                    new_reload_vi_s = true;


                }
                if (e.OldOrder.SiteOrderKey == m_orderKey_vi_s_old)
                {
                    if (qoute_stuck_side_vi_s_2 == "")
                    {
                        qoute_stuck_side_vi_s_1 = "";
                        qoute_stuck_price_vi_s_1 = 0;
                    }
                    else
                    {
                        qoute_stuck_price_vi_s_1 = qoute_stuck_price_vi_s_2;
                        qoute_stuck_side_vi_s_1 = qoute_stuck_side_vi_s_2;
                        qoute_stuck_price_vi_s_2 = 0;
                        qoute_stuck_side_vi_s_2 = "";
                        m_orderKey_vi_s_old = m_orderKey_vi_s;
                        new_reload_vi_s = true;
                    }
                }

                richTextBox1.AppendText(String.Format("\nOrderDeleted for {0}:{1} ", e.OldOrder.Instrument, e.OldOrder.SiteOrderKey));
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(522);
            }
        }
        void m_instrumentTradeSubscription_OrderAdded(object sender, OrderAddedEventArgs e)
        {
            /* richTextBox1.AppendText(String.Format("\n Gadbad check [{0}] {1}: {2},idhar {3}",m_orderKey_b,m_orderKey_1_b,m_orderKey_1_s,m_orderKey_s));
 */
            try
            {
                Log.Information("\nOrderAdded [{0}] {1}: {2}", e.Order.SiteOrderKey, e.Order.BuySell, e.Order.ToString());
                richTextBox1.AppendText(String.Format("\nOrderAdded [{0}] {1}: {2},idhar ", e.Order.SiteOrderKey, e.Order.BuySell, e.Order.ToString()));
                if (e.Order.ToString().Contains("parent:" + m_orderKey_b) == true && m_orderKey_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_b_1 == "" && !order_b_a1 || order_b_a2))
                    {
                        m_childorderKey_b_1 = e.Order.SiteOrderKey;
                        /*  richTextBox1.AppendText("hnjii");*/

                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_b_2 == "" && !order_b_a2 || order_b_a1))
                    {
                        m_childorderKey_b_2 = e.Order.SiteOrderKey;
                        /*  UpdateSpread(instrument_1, e.Order.Instrument);*/
                        /*richTextBox1.AppendText("hnjii*2");*/


                    }
                    else
                    {
                        richTextBox1.AppendText(String.Format("\nOrderAdded as hedge  [{0}] :{1} {2}:{3} yeh {4} {5} :{6}", m_childorderKey_b_1, m_childorderKey_b_2, qoute_stuck_side_b_1, qoute_stuck_side_b_2, m_orderKey_b, order_b_a1, order_b_a2, order_b_a1n, order_b_a2n));

                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }

                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_s) == true && m_orderKey_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_s_2 == "" && !order_s_a2 || order_s_a1))
                    {
                        m_childorderKey_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_s_1 == "" && !order_s_a1 || order_s_a2))
                    {
                        m_childorderKey_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_1_b) == true && m_orderKey_1_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_1_b_1 == "" && !order_1_b_a1 || order_1_b_a2))
                    {
                        m_childorderKey_1_b_1 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_1_b_2 == "" && !order_1_b_a2 || order_1_b_a1))
                    {
                        m_childorderKey_1_b_2 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_1_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_1_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_1_s) == true && m_orderKey_1_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_1_s_2 == "" && !order_1_s_a2 || order_1_s_a1))
                    {
                        m_childorderKey_1_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_1_s_1 == "" && !order_1_s_a1 || order_1_s_a2))
                    {
                        m_childorderKey_1_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_1_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_1_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_3_b) == true && m_orderKey_3_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_3_b_1 == "" && !order_3_b_a1 || order_3_b_a2))
                    {
                        m_childorderKey_3_b_1 = e.Order.SiteOrderKey;
                        /* richTextBox1.AppendText("hnjii");
     */
                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_3_b_2 == "" && !order_3_b_a2 || order_3_b_a1))
                    {
                        m_childorderKey_3_b_2 = e.Order.SiteOrderKey;
                        /*  UpdateSpread(instrument_1, e.Order.Instrument);*/
                        /*  richTextBox1.AppendText("hnjii*2");*/


                    }
                    else
                    {


                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_3_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_3_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }

                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_3_s) == true && m_orderKey_3_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_3_s_2 == "" && !order_3_s_a2 || order_3_s_a1))
                    {
                        m_childorderKey_3_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_3_s_1 == "" && !order_3_s_a1 || order_3_s_a2))
                    {
                        m_childorderKey_3_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_3_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_3_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_4_b) == true && m_orderKey_4_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_4_b_1 == "" && !order_4_b_a1 || order_4_b_a2))
                    {
                        m_childorderKey_4_b_1 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_4_b_2 == "" && !order_4_b_a2 || order_4_b_a1))
                    {
                        m_childorderKey_4_b_2 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_4_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_4_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_4_s) == true && m_orderKey_4_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_4_s_2 == "" && !order_4_s_a2 || order_4_s_a1))
                    {
                        m_childorderKey_4_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_4_s_1 == "" && !order_4_s_a1 || order_4_s_a2))
                    {
                        m_childorderKey_4_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_4_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_4_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_5_b) == true && m_orderKey_5_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_5_b_1 == "" && !order_5_b_a1 || order_5_b_a2))
                    {
                        m_childorderKey_5_b_1 = e.Order.SiteOrderKey;
                        /* richTextBox1.AppendText("hnjii");
     */
                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_5_b_2 == "" && !order_5_b_a2 || order_5_b_a1))
                    {
                        m_childorderKey_5_b_2 = e.Order.SiteOrderKey;
                        /*  UpdateSpread(instrument_1, e.Order.Instrument);*/
                        /*  richTextBox1.AppendText("hnjii*2");*/


                    }
                    else
                    {


                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_5_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_5_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }

                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_5_s) == true && m_orderKey_5_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_5_s_2 == "" && !order_5_s_a2 || order_5_s_a1))
                    {
                        m_childorderKey_5_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_5_s_1 == "" && !order_5_s_a1 || order_5_s_a2))
                    {
                        m_childorderKey_5_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_5_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_5_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_6_b) == true && m_orderKey_6_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_6_b_1 == "" && !order_6_b_a1 || order_6_b_a2))
                    {
                        m_childorderKey_6_b_1 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_6_b_2 == "" && !order_6_b_a2 || order_6_b_a1))
                    {
                        m_childorderKey_6_b_2 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_6_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_6_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_6_s) == true && m_orderKey_6_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_6_s_2 == "" && !order_6_s_a2 || order_6_s_a1))
                    {
                        m_childorderKey_6_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_6_s_1 == "" && !order_6_s_a1 || order_6_s_a2))
                    {
                        m_childorderKey_6_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_6_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_6_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_i_b) == true && m_orderKey_i_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_i_b_1 == "" && !order_i_b_a1 || order_i_b_a2))
                    {
                        m_childorderKey_i_b_1 = e.Order.SiteOrderKey;
                        /*  richTextBox1.AppendText("hnjii");*/

                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_i_b_2 == "" && !order_i_b_a2 || order_i_b_a1))
                    {
                        m_childorderKey_i_b_2 = e.Order.SiteOrderKey;
                        /*  UpdateSpread(instrument_1, e.Order.Instrument);*/
                        richTextBox1.AppendText("hnjii*2");


                    }
                    else
                    {
                        richTextBox1.AppendText(String.Format("\nOrderAdded as hedge  [{0}] :{1} {2}:{3} yeh {4} {5} :{6}", m_childorderKey_i_b_1, m_childorderKey_i_b_2, qoute_stuck_side_i_b_1, qoute_stuck_side_i_b_2, m_orderKey_i_b, order_i_b_a1, order_i_b_a2, order_i_b_a1n, order_i_b_a2n));

                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_i_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_i_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }

                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_i_s) == true && m_orderKey_i_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_i_s_2 == "" && !order_i_s_a2 || order_i_s_a1))
                    {
                        m_childorderKey_i_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_i_s_1 == "" && !order_i_s_a1 || order_i_s_a2))
                    {
                        m_childorderKey_i_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_i_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_i_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_ii_b) == true && m_orderKey_ii_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_ii_b_1 == "" && !order_ii_b_a1 || order_ii_b_a2))
                    {
                        m_childorderKey_ii_b_1 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_ii_b_2 == "" && !order_ii_b_a2 || order_ii_b_a1))
                    {
                        m_childorderKey_ii_b_2 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_ii_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_ii_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_ii_s) == true && m_orderKey_ii_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_ii_s_2 == "" && !order_ii_s_a2 || order_ii_s_a1))
                    {
                        m_childorderKey_ii_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_ii_s_1 == "" && !order_ii_s_a1 || order_ii_s_a2))
                    {
                        m_childorderKey_ii_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_ii_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_ii_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_iii_b) == true && m_orderKey_iii_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_iii_b_1 == "" && !order_iii_b_a1 || order_iii_b_a2))
                    {
                        m_childorderKey_iii_b_1 = e.Order.SiteOrderKey;
                        /* richTextBox1.AppendText("hnjii");
     */
                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_iii_b_2 == "" && !order_iii_b_a2 || order_iii_b_a1))
                    {
                        m_childorderKey_iii_b_2 = e.Order.SiteOrderKey;
                        /*  UpdateSpread(instrument_1, e.Order.Instrument);*/
                        /*  richTextBox1.AppendText("hnjii*2");*/


                    }
                    else
                    {


                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_iii_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_iii_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }

                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_iii_s) == true && m_orderKey_iii_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_iii_s_2 == "" && !order_iii_s_a2 || order_iii_s_a1))
                    {
                        m_childorderKey_iii_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_iii_s_1 == "" && !order_iii_s_a1 || order_iii_s_a2))
                    {
                        m_childorderKey_iii_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_iii_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_iii_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_iv_b) == true && m_orderKey_iv_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_iv_b_1 == "" && !order_iv_b_a1 || order_iv_b_a2))
                    {
                        m_childorderKey_iv_b_1 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_iv_b_2 == "" && !order_iv_b_a2 || order_iv_b_a1))
                    {
                        m_childorderKey_iv_b_2 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_iv_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_iv_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_iv_s) == true && m_orderKey_iv_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_iv_s_2 == "" && !order_iv_s_a2 || order_iv_s_a1))
                    {
                        m_childorderKey_iv_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_iv_s_1 == "" && !order_iv_s_a1 || order_iv_s_a2))
                    {
                        m_childorderKey_iv_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_iv_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_iv_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_v_b) == true && m_orderKey_v_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_v_b_1 == "" && !order_v_b_a1 || order_v_b_a2))
                    {
                        m_childorderKey_v_b_1 = e.Order.SiteOrderKey;
                        /* richTextBox1.AppendText("hnjii");
     */
                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_v_b_2 == "" && !order_v_b_a2 || order_v_b_a1))
                    {
                        m_childorderKey_v_b_2 = e.Order.SiteOrderKey;
                        /*  UpdateSpread(instrument_1, e.Order.Instrument);*/
                        /*  richTextBox1.AppendText("hnjii*2");*/


                    }
                    else
                    {


                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_v_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_v_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }

                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_v_s) == true && m_orderKey_v_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_v_s_2 == "" && !order_v_s_a2 || order_v_s_a1))
                    {
                        m_childorderKey_v_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_v_s_1 == "" && !order_v_s_a1 || order_v_s_a2))
                    {
                        m_childorderKey_v_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_v_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_v_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_vi_b) == true && m_orderKey_vi_b != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_vi_b_1 == "" && !order_vi_b_a1 || order_vi_b_a2))
                    {
                        m_childorderKey_vi_b_1 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_vi_b_2 == "" && !order_vi_b_a2 || order_vi_b_a1))
                    {
                        m_childorderKey_vi_b_2 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_vi_b_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_vi_b_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
                if (e.Order.ToString().Contains("parent:" + m_orderKey_vi_s) == true && m_orderKey_vi_s != "")
                {

                    if (e.Order.BuySell == BuySell.Buy && (m_childorderKey_vi_s_2 == "" && !order_vi_s_a2 || order_vi_s_a1))
                    {
                        m_childorderKey_vi_s_2 = e.Order.SiteOrderKey;


                    }
                    else if (e.Order.BuySell == BuySell.Sell && (m_childorderKey_vi_s_1 == "" && !order_vi_s_a1 || order_vi_s_a2))
                    {
                        m_childorderKey_vi_s_1 = e.Order.SiteOrderKey;
                    }
                    else
                    {
                        if (e.Order.BuySell == BuySell.Buy)
                        {
                            m_hedgeorderKey_vi_s_2 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                        else if (e.Order.BuySell == BuySell.Sell)
                        {
                            m_hedgeorderKey_vi_s_1 = e.Order.SiteOrderKey;
                            dataGridView1.Rows.Add(e.Order.Instrument, e.Order.BuySell, e.Order.OrderQuantity, e.Order.LimitPrice, e.Order.SiteOrderKey);

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(523);
            }
        }

        void m_instrumentTradeSubscription_OrderUpdated(object sender, OrderUpdatedEventArgs e)
        {
            try
            {
                Log.Information("\nOrderUpdated [{0}] with price={1}", e.NewOrder.SiteOrderKey, e.NewOrder.LimitPrice);
                /*richTextBox1.AppendText(String.Format("\nOrderUpdated [{0}]  with price={1}", e.NewOrder.SiteOrderKey, e.NewOrder.LimitPrice));*/
                order_updated_details = Convert.ToString(e.NewOrder.OrderQuantity) + "+" + Convert.ToString(e.NewOrder.LimitPrice) + "+" + Convert.ToString(e.NewOrder.BuySell) + "+" + e.NewOrder.Instrument + "+" + e.NewOrder.SiteOrderKey;
                order_updated_details_i = Convert.ToString(e.NewOrder.OrderQuantity) + "+" + Convert.ToString(e.NewOrder.LimitPrice) + "+" + Convert.ToString(e.NewOrder.BuySell) + "+" + e.NewOrder.Instrument + "+" + e.NewOrder.SiteOrderKey;
                /*  richTextBox1.AppendText(String.Format("\nOrderUpdated [{0}]  ",order_updated_details));*/
                for (int i = 0; i < dataGridView1.RowCount; i++)
                {
                    if (e.NewOrder.SiteOrderKey == Convert.ToString(dataGridView1.Rows[i].Cells[4].Value))
                    {
                        dataGridView1.Rows[i].Cells[2].Value = e.NewOrder.OrderQuantity;
                        dataGridView1.Rows[i].Cells[3].Value = e.NewOrder.LimitPrice;

                    }
                }
                for (int i = 0; i < dataGridView3.RowCount; i++)
                {
                    if (e.NewOrder.SiteOrderKey == Convert.ToString(dataGridView3.Rows[i].Cells[4].Value))
                    {

                        dataGridView3.Rows[i].Cells[3].Value = e.NewOrder.LimitPrice;

                    }
                }

                if (m_childorderKey_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_b_1 && !order_b_a1 && !order_b_a2)
                {
                    m_hedgeorderKey_b_1 = m_childorderKey_b_1;

                    m_childorderKey_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                    
                }
                if (m_childorderKey_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_b_2 && !order_b_a1 && !order_b_a2)
                {
                    m_hedgeorderKey_b_2 = m_childorderKey_b_1;

                    m_childorderKey_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_s_2 && !order_s_a1 && !order_s_a2)
                {
                    m_hedgeorderKey_s_2 = m_childorderKey_s_2;
                    m_childorderKey_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_s_1 && !order_s_a1 && !order_s_a2)
                {
                    m_hedgeorderKey_s_1 = m_childorderKey_s_1;

                    m_childorderKey_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_1_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_1_b_1 && !order_1_b_a1 && !order_1_b_a2)
                {
                    m_hedgeorderKey_1_b_1 = m_childorderKey_1_b_1;

                    m_childorderKey_1_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_1_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_1_b_2 && !order_1_b_a1 && !order_1_b_a2)
                {
                    m_hedgeorderKey_1_b_2 = m_childorderKey_1_b_2;

                    m_childorderKey_1_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_1_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_1_s_2 && !order_1_s_a1 && !order_1_s_a2)
                {
                    m_hedgeorderKey_1_s_2 = m_childorderKey_1_s_2;

                    m_childorderKey_1_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_1_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_1_s_1 && !order_1_s_a1 && !order_1_s_a2)
                {
                    m_hedgeorderKey_1_s_1 = m_childorderKey_1_s_1;

                    m_childorderKey_1_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_3_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_3_b_1 && !order_3_b_a1 && !order_3_b_a2)
                {
                    m_hedgeorderKey_3_b_1 = m_childorderKey_3_b_1;

                    m_childorderKey_3_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_3_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_3_b_2 && !order_3_b_a1 && !order_3_b_a2)
                {
                    m_hedgeorderKey_3_b_2 = m_childorderKey_3_b_2;

                    m_childorderKey_3_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_3_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_3_s_2 && !order_3_s_a1 && !order_3_s_a2)
                {
                    m_hedgeorderKey_3_s_2 = m_childorderKey_3_s_2;

                    m_childorderKey_3_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_3_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_3_s_1 && !order_3_s_a1 && !order_3_s_a2)
                {
                    m_hedgeorderKey_3_s_1 = m_childorderKey_3_s_1;

                    m_childorderKey_3_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_4_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_4_b_1 && !order_4_b_a1 && !order_4_b_a2)
                {
                    m_hedgeorderKey_4_b_1 = m_childorderKey_4_b_1;

                    m_childorderKey_4_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_4_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_4_b_2 && !order_4_b_a1 && !order_4_b_a2)
                {
                    m_hedgeorderKey_4_b_2 = m_childorderKey_4_b_2;

                    m_childorderKey_4_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_4_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_4_s_2 && !order_4_s_a1 && !order_4_s_a2)
                {
                    m_hedgeorderKey_4_s_2 = m_childorderKey_4_s_2;

                    m_childorderKey_4_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_4_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_4_s_1 && !order_4_s_a1 && !order_4_s_a2)
                {
                    m_hedgeorderKey_4_s_1 = m_childorderKey_4_s_1;

                    m_childorderKey_4_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }

                if (m_childorderKey_5_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_5_b_1 && !order_5_b_a1 && !order_5_b_a2)
                {
                    m_hedgeorderKey_5_b_1 = m_childorderKey_5_b_1;

                    m_childorderKey_5_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_5_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_5_b_2 && !order_5_b_a1 && !order_5_b_a2)
                {
                    m_hedgeorderKey_5_b_2 = m_childorderKey_5_b_2;

                    m_childorderKey_5_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_5_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_5_s_2 && !order_5_s_a1 && !order_5_s_a2)
                {
                    m_hedgeorderKey_5_s_2 = m_childorderKey_5_s_2;

                    m_childorderKey_5_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_5_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_5_s_1 && !order_5_s_a1 && !order_5_s_a2)
                {
                    m_hedgeorderKey_5_s_1 = m_childorderKey_5_s_1;

                    m_childorderKey_5_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_6_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_6_b_1 && !order_6_b_a1 && !order_6_b_a2)
                {
                    m_hedgeorderKey_6_b_1 = m_childorderKey_6_b_1;

                    m_childorderKey_6_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_6_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_6_b_2 && !order_6_b_a1 && !order_6_b_a2)
                {
                    m_hedgeorderKey_6_b_2 = m_childorderKey_6_b_2;

                    m_childorderKey_6_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_6_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_6_s_2 && !order_6_s_a1 && !order_6_s_a2)
                {
                    m_hedgeorderKey_6_s_2 = m_childorderKey_6_s_2;

                    m_childorderKey_6_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_6_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_6_s_1 && !order_6_s_a1 && !order_6_s_a2)
                {
                    m_hedgeorderKey_6_s_1 = m_childorderKey_6_s_1;

                    m_childorderKey_6_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }



                if (m_childorderKey_i_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_i_b_1 && !order_i_b_a1 && !order_i_b_a2)
                {
                    m_hedgeorderKey_i_b_1 = m_childorderKey_i_b_1;

                    m_childorderKey_i_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_i_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_i_b_2 && !order_i_b_a1 && !order_i_b_a2)
                {
                    m_hedgeorderKey_i_b_2 = m_childorderKey_i_b_2;

                    m_childorderKey_i_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_i_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_i_s_2 && !order_i_s_a1 && !order_i_s_a2)
                {
                    m_hedgeorderKey_i_s_2 = m_childorderKey_i_s_2;

                    m_childorderKey_i_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_i_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_i_s_1 && !order_i_s_a1 && !order_i_s_a2)
                {
                    m_hedgeorderKey_i_s_1 = m_childorderKey_i_s_1;

                    m_childorderKey_i_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_ii_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_ii_b_1 && !order_ii_b_a1 && !order_ii_b_a2)
                {
                    m_hedgeorderKey_ii_b_1 = m_childorderKey_ii_b_1;

                    m_childorderKey_ii_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_ii_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_ii_b_2 && !order_ii_b_a1 && !order_ii_b_a2)
                {
                    m_hedgeorderKey_ii_b_2 = m_childorderKey_ii_b_2;

                    m_childorderKey_ii_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_ii_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_ii_s_2 && !order_ii_s_a1 && !order_ii_s_a2)
                {
                    m_hedgeorderKey_ii_s_2 = m_childorderKey_ii_s_2;

                    m_childorderKey_ii_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_ii_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_ii_s_1 && !order_ii_s_a1 && !order_ii_s_a2)
                {
                    m_hedgeorderKey_ii_s_1 = m_childorderKey_ii_s_1;

                    m_childorderKey_ii_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iii_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iii_b_1 && !order_iii_b_a1 && !order_iii_b_a2)
                {
                    m_hedgeorderKey_iii_b_1 = m_childorderKey_iii_b_1;

                    m_childorderKey_iii_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iii_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iii_b_2 && !order_iii_b_a1 && !order_iii_b_a2)
                {
                    m_hedgeorderKey_iii_b_2 = m_childorderKey_iii_b_2;

                    m_childorderKey_iii_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iii_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iii_s_2 && !order_iii_s_a1 && !order_iii_s_a2)
                {
                    m_hedgeorderKey_iii_s_2 = m_childorderKey_iii_s_2;

                    m_childorderKey_iii_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iii_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iii_s_1 && !order_iii_s_a1 && !order_iii_s_a2)
                {
                    m_hedgeorderKey_iii_s_1 = m_childorderKey_iii_s_1;

                    m_childorderKey_iii_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iv_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iv_b_1 && !order_iv_b_a1 && !order_iv_b_a2)
                {
                    m_hedgeorderKey_iv_b_1 = m_childorderKey_iv_b_1;

                    m_childorderKey_iv_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iv_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iv_b_2 && !order_iv_b_a1 && !order_iv_b_a2)
                {
                    m_hedgeorderKey_iv_b_2 = m_childorderKey_iv_b_2;

                    m_childorderKey_iv_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iv_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iv_s_2 && !order_iv_s_a1 && !order_iv_s_a2)
                {
                    m_hedgeorderKey_iv_s_2 = m_childorderKey_iv_s_2;

                    m_childorderKey_iv_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_iv_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_iv_s_1 && !order_iv_s_a1 && !order_iv_s_a2)
                {
                    m_hedgeorderKey_iv_s_1 = m_childorderKey_iv_s_1;

                    m_childorderKey_iv_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_v_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_v_b_1 && !order_v_b_a1 && !order_v_b_a2)
                {
                    m_hedgeorderKey_v_b_1 = m_childorderKey_v_b_1;

                    m_childorderKey_v_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_v_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_v_b_2 && !order_v_b_a1 && !order_v_b_a2)
                {
                    m_hedgeorderKey_v_b_2 = m_childorderKey_v_b_2;

                    m_childorderKey_v_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_v_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_v_s_2 && !order_v_s_a1 && !order_v_s_a2)
                {
                    m_hedgeorderKey_v_s_2 = m_childorderKey_v_s_2;

                    m_childorderKey_v_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_v_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_v_s_1 && !order_v_s_a1 && !order_v_s_a2)
                {
                    m_hedgeorderKey_v_s_1 = m_childorderKey_v_s_1;

                    m_childorderKey_v_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_vi_b_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_vi_b_1 && !order_vi_b_a1 && !order_vi_b_a2)
                {
                    m_hedgeorderKey_vi_b_1 = m_childorderKey_vi_b_1;

                    m_childorderKey_vi_b_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_vi_b_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_vi_b_2 && !order_vi_b_a1 && !order_vi_b_a2)
                {
                    m_hedgeorderKey_vi_b_2 = m_childorderKey_vi_b_2;

                    m_childorderKey_vi_b_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_vi_s_1 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_vi_s_2 && !order_vi_s_a1 && !order_vi_s_a2)
                {
                    m_hedgeorderKey_vi_s_2 = m_childorderKey_vi_s_2;

                    m_childorderKey_vi_s_2 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
                if (m_childorderKey_vi_s_2 == "" && e.NewOrder.SiteOrderKey == m_childorderKey_vi_s_1 && !order_vi_s_a1 && !order_vi_s_a2)
                {
                    m_hedgeorderKey_vi_s_1 = m_childorderKey_vi_s_1;

                    m_childorderKey_vi_s_1 = "";
                    dataGridView1.Rows.Add(e.NewOrder.Instrument, e.NewOrder.BuySell, e.NewOrder.OrderQuantity, e.NewOrder.LimitPrice, e.NewOrder.SiteOrderKey);
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                button19.PerformClick();
                Environment.Exit(524);
            }
        }


        public void Dispose()
        {
            if (!m_isDisposed)
            {
                // Unattached callbacks and dispose of all subscriptions
                if (m_instrLookupRequest != null)
                {
                    m_instrLookupRequest.OnData -= m_instrLookupRequest_OnData;
                    m_instrLookupRequest.Dispose();
                    m_instrLookupRequest = null;
                }if (m_instrLookupRequest_1 != null)
                {
                    m_instrLookupRequest_1.OnData -= m_instrLookupRequest_OnData_1;
                    m_instrLookupRequest_1.Dispose();
                    m_instrLookupRequest_1 = null;
                }if (m_instrLookupRequest_2 != null)
                {
                    m_instrLookupRequest_2.OnData -= m_instrLookupRequest_OnData_2;
                    m_instrLookupRequest_2.Dispose();
                    m_instrLookupRequest_2 = null;
                }if (m_instrLookupRequest_3 != null)
                {
                    m_instrLookupRequest_3.OnData -= m_instrLookupRequest_OnData_3;
                    m_instrLookupRequest_3.Dispose();
                    m_instrLookupRequest_3 = null;
                }if (m_instrLookupRequest_4 != null)
                {
                    m_instrLookupRequest_4.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_4.Dispose();
                    m_instrLookupRequest_4 = null;
                }if (m_instrLookupRequest_5 != null)
                {
                    m_instrLookupRequest_5.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_5.Dispose();
                    m_instrLookupRequest_5 = null;
                }if (m_instrLookupRequest_6 != null)
                {
                    m_instrLookupRequest_6.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_6.Dispose();
                    m_instrLookupRequest_6 = null;
                }if (m_instrLookupRequest_7 != null)
                {
                    m_instrLookupRequest_7.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_7.Dispose();
                    m_instrLookupRequest_7 = null;
                }if (m_instrLookupRequest_8 != null)
                {
                    m_instrLookupRequest_8.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_8.Dispose();
                    m_instrLookupRequest_8 = null;
                }
                if (m_instrLookupRequest_9 != null)
                {
                    m_instrLookupRequest_9.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_9.Dispose();
                    m_instrLookupRequest_9 = null;
                }
                if (m_instrLookupRequest_10 != null)
                {
                    m_instrLookupRequest_10.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_10.Dispose();
                    m_instrLookupRequest_10 = null;
                }
                if (m_instrLookupRequest_11 != null)
                {
                    m_instrLookupRequest_11.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_11.Dispose();
                    m_instrLookupRequest_11 = null;
                }
                if (m_instrLookupRequest_12 != null)
                {
                    m_instrLookupRequest_12.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_12.Dispose();
                    m_instrLookupRequest_12 = null;
                }
                if (m_instrLookupRequest_13 != null)
                {
                    m_instrLookupRequest_13.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_13.Dispose();
                    m_instrLookupRequest_13 = null;
                }
                if (m_instrLookupRequest_14 != null)
                {
                    m_instrLookupRequest_14.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_14.Dispose();
                    m_instrLookupRequest_14 = null;
                }
                if (m_instrLookupRequest_15 != null)
                {
                    m_instrLookupRequest_15.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_15.Dispose();
                    m_instrLookupRequest_15 = null;
                }
                if (m_instrLookupRequest_16 != null)
                {
                    m_instrLookupRequest_16.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_16.Dispose();
                    m_instrLookupRequest_16 = null;
                }
                if(m_instrLookupRequest_17 != null)
                {
                    m_instrLookupRequest_17.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_17.Dispose();
                    m_instrLookupRequest_17 = null;
                }
                if(m_instrLookupRequest_18 != null)
                {
                    m_instrLookupRequest_18.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_18.Dispose();
                    m_instrLookupRequest_18 = null;
                }
                if(m_instrLookupRequest_19 != null)
                {
                    m_instrLookupRequest_19.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_19.Dispose();
                    m_instrLookupRequest_19 = null;
                }
                if (m_instrLookupRequest_20 != null)
                {
                    m_instrLookupRequest_20.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_20.Dispose();
                    m_instrLookupRequest_20 = null;
                }
                if (m_instrLookupRequest_21 != null)
                {
                    m_instrLookupRequest_21.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_21.Dispose();
                    m_instrLookupRequest_21 = null;
                }
                if (m_instrLookupRequest_22 != null)
                {
                    m_instrLookupRequest_22.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_22.Dispose();
                    m_instrLookupRequest_22 = null;
                }
                if (m_instrLookupRequest_23 != null)
                {
                    m_instrLookupRequest_23.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_23.Dispose();
                    m_instrLookupRequest_23 = null;
                }
                if (m_instrLookupRequest_24 != null)
                {
                    m_instrLookupRequest_24.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_24.Dispose();
                    m_instrLookupRequest_24 = null;
                }
                if (m_instrLookupRequest_25 != null)
                {
                    m_instrLookupRequest_25.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_25.Dispose();
                    m_instrLookupRequest_25 = null;
                }
                if (m_instrLookupRequest_26 != null)
                {
                    m_instrLookupRequest_26.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_26.Dispose();
                    m_instrLookupRequest_26 = null;
                }
                if (m_instrLookupRequest_27 != null)
                {
                    m_instrLookupRequest_27.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_27.Dispose();
                    m_instrLookupRequest_27 = null;
                }
                if (m_instrLookupRequest_28 != null)
                {
                    m_instrLookupRequest_28.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_28.Dispose();
                    m_instrLookupRequest_28 = null;
                }
                if (m_instrLookupRequest_29 != null)
                {
                    m_instrLookupRequest_29.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_29.Dispose();
                    m_instrLookupRequest_29 = null;
                }
                if (m_instrLookupRequest_30 != null)
                {
                    m_instrLookupRequest_30.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_30.Dispose();
                    m_instrLookupRequest_30 = null;
                }
                if (m_instrLookupRequest_31 != null)
                {
                    m_instrLookupRequest_31.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_31.Dispose();
                    m_instrLookupRequest_31 = null;
                }
                if (m_instrLookupRequest_32 != null)
                {
                    m_instrLookupRequest_32.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_32.Dispose();
                    m_instrLookupRequest_32 = null;
                }
                 if (m_instrLookupRequest_33 != null)
                {
                    m_instrLookupRequest_33.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_33.Dispose();
                    m_instrLookupRequest_33 = null;
                }
                if (m_instrLookupRequest_34 != null)
                {
                    m_instrLookupRequest_34.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_34.Dispose();
                    m_instrLookupRequest_34 = null;
                }
                if (m_instrLookupRequest_35 != null)
                {
                    m_instrLookupRequest_35.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_35.Dispose();
                    m_instrLookupRequest_35 = null;
                }
                if (m_instrLookupRequest_36 != null)
                {
                    m_instrLookupRequest_36.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_36.Dispose();
                    m_instrLookupRequest_36 = null;
                }
                if (m_instrLookupRequest_37 != null)
                {
                    m_instrLookupRequest_38.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_38.Dispose();
                    m_instrLookupRequest_38 = null;
                }
                if (m_instrLookupRequest_39 != null)
                {
                    m_instrLookupRequest_39.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_39.Dispose();
                    m_instrLookupRequest_39 = null;
                }
                if (m_instrLookupRequest_40 != null)
                {
                    m_instrLookupRequest_40.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_40.Dispose();
                    m_instrLookupRequest_40 = null;
                }
                if (m_instrLookupRequest_41 != null)
                {
                    m_instrLookupRequest_41.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_41.Dispose();
                    m_instrLookupRequest_41 = null;
                }
                if (m_instrLookupRequest_42 != null)
                {
                    m_instrLookupRequest_42.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_42.Dispose();
                    m_instrLookupRequest_42 = null;
                }
                if (m_instrLookupRequest_43 != null)
                {
                    m_instrLookupRequest_43.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_43.Dispose();
                    m_instrLookupRequest_43 = null;
                }
                if (m_instrLookupRequest_44 != null)
                {
                    m_instrLookupRequest_44.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_44.Dispose();
                    m_instrLookupRequest_44 = null;
                }
                if (m_instrLookupRequest_45 != null)
                {
                    m_instrLookupRequest_45.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_45.Dispose();
                    m_instrLookupRequest_45 = null;
                }
                if (m_instrLookupRequest_46 != null)
                {
                    m_instrLookupRequest_46.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_46.Dispose();
                    m_instrLookupRequest_46 = null;
                }
                if (m_instrLookupRequest_46 != null)
                {
                    m_instrLookupRequest_46.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_46.Dispose();
                    m_instrLookupRequest_46 = null;
                }
                if (m_instrLookupRequest_47 != null)
                {
                    m_instrLookupRequest_47.OnData -= m_instrLookupRequest_OnData_4;
                    m_instrLookupRequest_47.Dispose();
                    m_instrLookupRequest_47 = null;
                }
                
                if (m_priceSubsciption != null)
                {
                    m_priceSubsciption.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption.Dispose();
                    m_priceSubsciption = null;
                }if (m_priceSubsciption_i != null)
                {
                    m_priceSubsciption_i.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_i.Dispose();
                    m_priceSubsciption_i = null;
                }if (m_priceSubsciption_jul24_aug24 != null)
                {
                    m_priceSubsciption_jul24_aug24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_jul24_aug24.Dispose();
                    m_priceSubsciption_jul24_aug24 = null;
                }if (m_priceSubsciption_jul24 != null)
                {
                    m_priceSubsciption_jul24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_jul24.Dispose();
                    m_priceSubsciption_jul24 = null;
                }if (m_priceSubsciption_aug24 != null)
                {
                    m_priceSubsciption_aug24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_aug24.Dispose();
                    m_priceSubsciption_aug24 = null;
                }
                
                if (m_priceSubsciption_jan24_feb24 != null)
                {
                    m_priceSubsciption_jan24_feb24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_jan24_feb24.Dispose();
                    m_priceSubsciption_jan24_feb24 = null;
                }if (m_priceSubsciption_jan24 != null)
                {
                    m_priceSubsciption_jan24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_jan24.Dispose();
                    m_priceSubsciption_jan24 = null;
                }if (m_priceSubsciption_feb24 != null)
                {
                    m_priceSubsciption_feb24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_feb24.Dispose();
                    m_priceSubsciption_feb24 = null;
                }if (m_priceSubsciption_apr24_may24 != null)
                {
                    m_priceSubsciption_apr24_may24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_apr24_may24.Dispose();
                    m_priceSubsciption_apr24_may24 = null;
                }if (m_priceSubsciption_apr24 != null)
                {
                    m_priceSubsciption_apr24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_apr24.Dispose();
                    m_priceSubsciption_apr24 = null;
                }if (m_priceSubsciption_may24 != null)
                {
                    m_priceSubsciption_may24.FieldsUpdated -= m_priceSubscription_FieldsUpdated;
                    m_priceSubsciption_may24.Dispose();
                    m_priceSubsciption_may24 = null;
                }
                
                if (m_instrumentTradeSubscription != null)
                {
                    m_instrumentTradeSubscription.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription.Dispose();
                    m_instrumentTradeSubscription = null;
                }
                if (m_instrumentTradeSubscription_1 != null)
                {
                    m_instrumentTradeSubscription_1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_1.Dispose();
                    m_instrumentTradeSubscription_1 = null;
                }
                if (m_instrumentTradeSubscription_1_a1 != null)
                {
                    m_instrumentTradeSubscription_1_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_1_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_1_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_1_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_1_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_1_a1.Dispose();
                    m_instrumentTradeSubscription_1_a1 = null;
                }
                if (m_instrumentTradeSubscription_1_a2 != null)
                {
                    m_instrumentTradeSubscription_1_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_1_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_1_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_1_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_1_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_1_a2.Dispose();
                    m_instrumentTradeSubscription_1_a2 = null;
                }

                if (m_instrumentTradeSubscription_2 != null)
                {
                    m_instrumentTradeSubscription_2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_2.Dispose();
                    m_instrumentTradeSubscription_2 = null;
                }
                if (m_instrumentTradeSubscription_2_a1 != null)
                {
                    m_instrumentTradeSubscription_2_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_2_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_2_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_2_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_2_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_2_a1.Dispose();
                    m_instrumentTradeSubscription_2_a1 = null;
                }
                if (m_instrumentTradeSubscription_2_a2 != null)
                {
                    m_instrumentTradeSubscription_2_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_2_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_2_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_2_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_2_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_2_a2.Dispose();
                    m_instrumentTradeSubscription_2_a2 = null;
                }
                if (m_instrumentTradeSubscription_3 != null)
                {
                    m_instrumentTradeSubscription_3.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_3.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_3.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_3.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_3.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_3.Dispose();
                    m_instrumentTradeSubscription_3 = null;
                }
                if (m_instrumentTradeSubscription_3_a1 != null)
                {
                    m_instrumentTradeSubscription_3_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_3_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_3_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_3_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_3_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_3_a1.Dispose();
                    m_instrumentTradeSubscription_3_a1 = null;
                }
                if (m_instrumentTradeSubscription_3_a2 != null)
                {
                    m_instrumentTradeSubscription_3_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_3_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_3_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_3_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_3_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_3_a2.Dispose();
                    m_instrumentTradeSubscription_3_a2 = null;
                }
                if (m_instrumentTradeSubscription_4 != null)
                {
                    m_instrumentTradeSubscription_4.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_4.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_4.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_4.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_4.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_4.Dispose();
                    m_instrumentTradeSubscription_4 = null;
                }
                if (m_instrumentTradeSubscription_4_a1 != null)
                {
                    m_instrumentTradeSubscription_4_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_4_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_4_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_4_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_4_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_4_a1.Dispose();
                    m_instrumentTradeSubscription_4_a1 = null;
                }
                if (m_instrumentTradeSubscription_4_a2 != null)
                {
                    m_instrumentTradeSubscription_4_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                    m_instrumentTradeSubscription_4_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                    m_instrumentTradeSubscription_4_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                    m_instrumentTradeSubscription_4_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                    m_instrumentTradeSubscription_4_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                    m_instrumentTradeSubscription_4_a2.Dispose();
                    m_instrumentTradeSubscription_4_a2 = null;
                    if (m_instrumentTradeSubscription_5 != null)
                    {
                        m_instrumentTradeSubscription_5.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_5.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_5.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_5.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_5.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_5.Dispose();
                        m_instrumentTradeSubscription_5 = null;
                    }
                    if (m_instrumentTradeSubscription_5_a1 != null)
                    {
                        m_instrumentTradeSubscription_5_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_5_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_5_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_5_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_5_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_5_a1.Dispose();
                        m_instrumentTradeSubscription_5_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_5_a2 != null)
                    {
                        m_instrumentTradeSubscription_5_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_5_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_5_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_5_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_5_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_5_a2.Dispose();
                        m_instrumentTradeSubscription_5_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_6 != null)
                    {
                        m_instrumentTradeSubscription_6.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_6.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_6.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_6.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_6.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_6.Dispose();
                        m_instrumentTradeSubscription_6 = null;
                    }
                    if (m_instrumentTradeSubscription_6_a1 != null)
                    {
                        m_instrumentTradeSubscription_6_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_6_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_6_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_6_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_6_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_6_a1.Dispose();
                        m_instrumentTradeSubscription_6_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_6_a2 != null)
                    {
                        m_instrumentTradeSubscription_6_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_6_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_6_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_6_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_6_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_6_a2.Dispose();
                        m_instrumentTradeSubscription_6_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_i != null)
                    {
                        m_instrumentTradeSubscription_i.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_i.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_i.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_i.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_i.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_i.Dispose();
                        m_instrumentTradeSubscription_i = null;
                    }
                    if (m_instrumentTradeSubscription_i_a1 != null)
                    {
                        m_instrumentTradeSubscription_i_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_i_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_i_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_i_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_i_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_i_a1.Dispose();
                        m_instrumentTradeSubscription_i_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_i_a2 != null)
                    {
                        m_instrumentTradeSubscription_i_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_i_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_i_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_i_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_i_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_i_a2.Dispose();
                        m_instrumentTradeSubscription_i_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_ii != null)
                    {
                        m_instrumentTradeSubscription_ii.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_ii.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_ii.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_ii.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_ii.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_ii.Dispose();
                        m_instrumentTradeSubscription_ii = null;
                    }
                    if (m_instrumentTradeSubscription_ii_a1 != null)
                    {
                        m_instrumentTradeSubscription_ii_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_ii_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_ii_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_ii_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_ii_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_ii_a1.Dispose();
                        m_instrumentTradeSubscription_ii_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_ii_a2 != null)
                    {
                        m_instrumentTradeSubscription_ii_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_ii_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_ii_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_ii_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_ii_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_ii_a2.Dispose();
                        m_instrumentTradeSubscription_ii_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_iii != null)
                    {
                        m_instrumentTradeSubscription_iii.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_iii.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_iii.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_iii.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_iii.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_iii.Dispose();
                        m_instrumentTradeSubscription_iii = null;
                    }
                    if (m_instrumentTradeSubscription_iii_a1 != null)
                    {
                        m_instrumentTradeSubscription_iii_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_iii_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_iii_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_iii_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_iii_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_iii_a1.Dispose();
                        m_instrumentTradeSubscription_iii_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_iii_a2 != null)
                    {
                        m_instrumentTradeSubscription_iii_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_iii_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_iii_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_iii_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_iii_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_iii_a2.Dispose();
                        m_instrumentTradeSubscription_iii_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_iv != null)
                    {
                        m_instrumentTradeSubscription_iv.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_iv.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_iv.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_iv.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_iv.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_iv.Dispose();
                        m_instrumentTradeSubscription_iv = null;
                    }
                    if (m_instrumentTradeSubscription_iv_a1 != null)
                    {
                        m_instrumentTradeSubscription_iv_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_iv_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_iv_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_iv_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_iv_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_iv_a1.Dispose();
                        m_instrumentTradeSubscription_iv_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_iv_a2 != null)
                    {
                        m_instrumentTradeSubscription_iv_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_iv_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_iv_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_iv_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_iv_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_iv_a2.Dispose();
                        m_instrumentTradeSubscription_iv_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_v != null)
                    {
                        m_instrumentTradeSubscription_v.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_v.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_v.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_v.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_v.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_v.Dispose();
                        m_instrumentTradeSubscription_v = null;
                    }
                    if (m_instrumentTradeSubscription_v_a1 != null)
                    {
                        m_instrumentTradeSubscription_v_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_v_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_v_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_v_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_v_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_v_a1.Dispose();
                        m_instrumentTradeSubscription_v_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_v_a2 != null)
                    {
                        m_instrumentTradeSubscription_v_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_v_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_v_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_v_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_v_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_v_a2.Dispose();
                        m_instrumentTradeSubscription_v_a2 = null;
                    }
                    if (m_instrumentTradeSubscription_vi != null)
                    {
                        m_instrumentTradeSubscription_vi.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_vi.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_vi.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_vi.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_vi.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_vi.Dispose();
                        m_instrumentTradeSubscription_vi = null;
                    }
                    if (m_instrumentTradeSubscription_vi_a1 != null)
                    {
                        m_instrumentTradeSubscription_vi_a1.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_vi_a1.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_vi_a1.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_vi_a1.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_vi_a1.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_vi_a1.Dispose();
                        m_instrumentTradeSubscription_vi_a1 = null;
                    }
                    if (m_instrumentTradeSubscription_vi_a2 != null)
                    {
                        m_instrumentTradeSubscription_vi_a2.OrderUpdated -= m_instrumentTradeSubscription_OrderUpdated;
                        m_instrumentTradeSubscription_vi_a2.OrderAdded -= m_instrumentTradeSubscription_OrderAdded;
                        m_instrumentTradeSubscription_vi_a2.OrderDeleted -= m_instrumentTradeSubscription_OrderDeleted;
                        m_instrumentTradeSubscription_vi_a2.OrderFilled -= m_instrumentTradeSubscription_OrderFilled;
                        m_instrumentTradeSubscription_vi_a2.OrderRejected -= m_instrumentTradeSubscription_OrderRejected;
                        m_instrumentTradeSubscription_vi_a2.Dispose();
                        m_instrumentTradeSubscription_vi_a2 = null;
                    }
                }
                m_isDisposed = true;
            }


            TTAPI.Shutdown();
        }

        public void TTAPI_ShutdownCompleted(object sender, EventArgs e)
        {
            Log.Information("TTAPI Shutdown completed");
        }
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            if (!m_isDisposed)
            {
                e.Cancel = true;
                Dispose();
            }
            else
            {
                base.OnFormClosing(e);
            }
        }





        /*private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked)
            {
                allowed_1 = true;
            }
            else{
                allowed_1 = false;
            }
        }*/



        //buying  Sep-jul

        private void button1_Click(object sender, EventArgs e)
        {
            try {
                button5.PerformClick();
                user_price_b = Price.FromDecimal(instrument, Convert.ToDecimal(textBox2.Text));
                /*  user_price_2 = Price.FromString(instrument, textBox5.Text);*//**/
                allowed_1 = true;
                buying_1 = true;

                ratio_1 = Convert.ToDecimal(textBox3.Text);


                rel_1_b = Convert.ToDecimal(textBox8.Text);
                qt1_b = Convert.ToDecimal(textBox7.Text);
                if (checkBox1.Checked)
                {
                    buying_i = true;
                    rel_i_b = Convert.ToDecimal(textBox8.Text);
                    qti_b = Convert.ToDecimal(textBox7.Text);
                    richTextBox1.AppendText(String.Format("\n buying button clicked for SR3 Jun24/ZQ Jul24 .net."));
                    pause_i_b = false;
                    qoute_stuck_side_i_b_1 = "";
                    qoute_stuck_side_i_b_2 = "";
                    qoute_stuck_price_i_b_1 = 0;
                    qoute_stuck_price_i_b_2 = 0;
                    partial_fill_i_b_1 = 0;
                    partial_fill_i_b_2 = 0;
                    m_childorderKey_i_b_1 = "";
                    m_childorderKey_i_b_2 = "";
                    m_orderKey_i_b = "";
                    m_orderKey_i_b_old = "";
                    fill_i_b = 0;
                    ratio_i = Convert.ToDecimal(textBox17.Text);
                }



                richTextBox1.AppendText(String.Format("\n buying button clicked for SR3 Jun24/Sr1 Jul24 .net."));
                pause_1_b = false;

                qoute_stuck_side_b_1 = "";
                qoute_stuck_side_b_2 = "";
                qoute_stuck_price_b_1 = 0;
                qoute_stuck_price_b_2 = 0;
                partial_fill_b_1 = 0;
                partial_fill_b_2 = 0;
                m_childorderKey_b_1 = "";
                m_childorderKey_b_2 = "";
                m_orderKey_b = "";
                m_orderKey_b_old = "";
                fill_1_b = 0;
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                
                Environment.Exit(525);
            }
        }
        private void button5_Click_1(object sender, EventArgs e)
        {
            try
            {
                buying_1 = false;
                qouted_price_received_b = false;
                richTextBox1.AppendText("\nCancel buy for SR3 Jun24/Sr1 Jul24 .net CLICKED");

                if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_1_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_1_a2.SendOrder(op);

                }
                m_orderKey_b = "";
                dataGridView2.Rows[12].Cells[5].Value = "-";
                dataGridView2.Rows[12].Cells[2].Value = "-";
                dataGridView2.Rows[12].Cells[3].Value = "-";
                dataGridView2.Rows[12].Cells[4].Value = "-";
                dataGridView2.Rows[12].Cells[6].Value = "-";
                fill_1_b = 0;
                qoute_stuck_side_b_1 = "";
                qoute_stuck_side_b_2 = "";
                qoute_stuck_price_b_1 = 0;
                qoute_stuck_price_b_2 = 0;
                m_childorderKey_b_1 = "";
                m_childorderKey_b_2 = "";
                partial_fill_b_1 = 0;
                partial_fill_b_2 = 0;

                m_orderKey_b_old = "";
                m_hedgeorderKey_b_1 = "";
                m_hedgeorderKey_b_2 = "";
                qt1_b = 0;
                rel_1_b = 0;
                new_reload_1_b = false;
                change_b = false;


                if (checkBox1.Checked)
                {
                    buying_i = false;
                    qouted_price_received_i_b = false;
                    richTextBox1.AppendText("\nCancel buy for SR3 Jun24/ZQ Jul24 .net CLICKED");

                    if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_i.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_i_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_i_a2.SendOrder(op);

                    }
                    m_orderKey_i_b = "";
                    dataGridView2.Rows[14].Cells[5].Value = "-";
                    dataGridView2.Rows[14].Cells[2].Value = "-";
                    dataGridView2.Rows[14].Cells[3].Value = "-";
                    dataGridView2.Rows[14].Cells[4].Value = "-";
                    dataGridView2.Rows[14].Cells[6].Value = "-";
                    fill_i_b = 0;
                    qoute_stuck_side_i_b_1 = "";
                    qoute_stuck_side_i_b_2 = "";
                    qoute_stuck_price_i_b_1 = 0;
                    qoute_stuck_price_i_b_2 = 0;
                    m_childorderKey_i_b_1 = "";
                    m_childorderKey_i_b_2 = "";
                    partial_fill_i_b_1 = 0;
                    partial_fill_i_b_2 = 0;

                    m_orderKey_i_b_old = "";
                    m_hedgeorderKey_i_b_1 = "";
                    m_hedgeorderKey_i_b_2 = "";
                    qti_b = 0;
                    rel_i_b = 0;
                    new_reload_i_b = false;
                    change_i_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(526);
            }
        }
        private void button10_Click(object sender, EventArgs e)
        {
            //pause wala
            try
            {
                richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Jun24/Sr1 Jul24 .net");
                if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_1.SendOrder(op);
                    pause_1_b = true;
                }
                if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_1_a1.SendOrder(op);
                    pause_1_b = true;
                }
                if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_1_a2.SendOrder(op);
                    pause_1_b = true;
                }

                m_childorderKey_b_1 = "";
                m_childorderKey_b_2 = "";
                if (checkBox1.Checked)
                {
                    richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Jun24/ZQ Jul24 .net");
                    if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_i.SendOrder(op);
                        pause_i_b = true;
                    }
                    if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_i_a1.SendOrder(op);
                        pause_i_b = true;
                    }
                    if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_i_a2.SendOrder(op);
                        pause_i_b = true;
                    }

                    m_childorderKey_i_b_1 = "";
                    m_childorderKey_i_b_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(527);
            }
        }
        private void button2_Click(object sender, EventArgs e)
        {
            //unpause wala
            try {
                richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Jun24/Sr1 Jul24 .net");
                if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_1.SendOrder(op);
                } if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_1_a1.SendOrder(op);
                } if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_1_a2.SendOrder(op);
                }
                pause_1_b = false;
                if (checkBox1.Checked)
                {
                    richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Jun24/zq Jul24 .net");
                    if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_i.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_i_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_i_a2.SendOrder(op);
                    }
                    pause_i_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(528);
            }
        }


        //selling  Sep-jul   

        private void button7_Click_1(object sender, EventArgs e)
        {
            try
            {
                button6.PerformClick();
                user_price_s = Price.FromDecimal(instrument, Convert.ToDecimal(textBox2.Text));
                /*user_price_2 = Price.FromString(instrument, textBox5.Text);*/
                allowed_1 = true;
                selling_1 = true;
                ratio_1 = Convert.ToDecimal(textBox3.Text);

                qt1_s = Convert.ToDecimal(textBox7.Text);
                rel_1_s = Convert.ToDecimal(textBox8.Text);
                richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Jun24/Sr1 Jul24 .net."));
                pause_1_s = false;
                qoute_stuck_side_s_1 = "";
                qoute_stuck_side_s_2 = "";
                qoute_stuck_price_s_1 = 0;
                qoute_stuck_price_s_2 = 0;
                partial_fill_s_1 = 0;
                partial_fill_s_2 = 0;
                m_childorderKey_s_1 = "";
                m_childorderKey_s_2 = "";
                m_orderKey_s = "";
                m_orderKey_s_old = "";
                fill_1_s = 0;
                /* new_reload_1_s = true;
                 richTextBox1.AppendText(String.Format("\n {0}.",new_reload_1_s));

                 qoute_stuck_side_s_1 = "SR3 Jun23 is";
                 qoute_stuck_price_s_1 = Convert.ToDecimal(myDictionary["sep_bid"]);*/
                if (checkBox1.Checked)
                {

                    selling_i = true;

                    qti_s = Convert.ToDecimal(textBox7.Text);
                    rel_i_s = Convert.ToDecimal(textBox8.Text);
                    richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Jun24/ZQ Jul24 .net."));
                    pause_i_s = false;
                    qoute_stuck_side_i_s_1 = "";
                    qoute_stuck_side_i_s_2 = "";
                    qoute_stuck_price_i_s_1 = 0;
                    qoute_stuck_price_i_s_2 = 0;
                    partial_fill_i_s_1 = 0;
                    partial_fill_i_s_2 = 0;
                    m_childorderKey_i_s_1 = "";
                    m_childorderKey_i_s_2 = "";
                    m_orderKey_i_s = "";
                    m_orderKey_i_s_old = "";
                    fill_i_s = 0;
                    ratio_i = Convert.ToDecimal(textBox17.Text);
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(529);
            }
        }

        private void button6_Click_1(object sender, EventArgs e)
        {
            try
            {
                selling_1 = false;
                qouted_price_received_s = false;
                richTextBox1.AppendText("\nCancel sell for SR3 Jun24/Sr1 Jul24 .net  CLICKED");

                if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_1_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_1_a2.SendOrder(op);

                }
                qoute_stuck_side_s_1 = "";
                qoute_stuck_side_s_2 = "";
                qoute_stuck_price_s_1 = 0;
                qoute_stuck_price_s_2 = 0;
                m_orderKey_s = "";
                dataGridView2.Rows[13].Cells[5].Value = "-";
                dataGridView2.Rows[13].Cells[2].Value = "-";
                dataGridView2.Rows[13].Cells[3].Value = "-";
                dataGridView2.Rows[13].Cells[4].Value = "-";
                dataGridView2.Rows[13].Cells[6].Value = "-";
                fill_1_s = 0;

                m_childorderKey_s_1 = "";
                m_childorderKey_s_2 = "";
                partial_fill_s_1 = 0;
                partial_fill_s_2 = 0;

                m_orderKey_s_old = "";
                m_hedgeorderKey_s_1 = "";
                m_hedgeorderKey_s_2 = "";
                qt1_s = 0;
                rel_1_s = 0;
                new_reload_1_s = false;
                change_s = false;
                if (checkBox1.Checked)
                {
                    selling_i = false;
                    qouted_price_received_i_s = false;
                    richTextBox1.AppendText("\nCancel sell for SR3 Jun24/ZQ Jul24 .net  CLICKED");

                    if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_i.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_i_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_i_a2.SendOrder(op);

                    }
                    qoute_stuck_side_i_s_1 = "";
                    qoute_stuck_side_i_s_2 = "";
                    qoute_stuck_price_i_s_1 = 0;
                    qoute_stuck_price_i_s_2 = 0;
                    m_orderKey_i_s = "";
                    dataGridView2.Rows[15].Cells[5].Value = "-";
                    dataGridView2.Rows[15].Cells[2].Value = "-";
                    dataGridView2.Rows[15].Cells[3].Value = "-";
                    dataGridView2.Rows[15].Cells[4].Value = "-";
                    dataGridView2.Rows[15].Cells[6].Value = "-";
                    fill_i_s = 0;

                    m_childorderKey_i_s_1 = "";
                    m_childorderKey_i_s_2 = "";
                    partial_fill_i_s_1 = 0;
                    partial_fill_i_s_2 = 0;

                    m_orderKey_i_s_old = "";
                    m_hedgeorderKey_i_s_1 = "";
                    m_hedgeorderKey_i_s_2 = "";
                    qti_s = 0;
                    rel_i_s = 0;
                    new_reload_i_s = false;
                    change_i_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(530);
            }
        }
        private void button12_Click(object sender, EventArgs e)
        {
            //pause
            try
            {
                richTextBox1.AppendText("\nPause SELL Button clicked for SR3 Jun24/Sr1 Jul24 .net");
                if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_1.SendOrder(op);
                    pause_1_s = true;
                }
                if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_1_a1.SendOrder(op);
                    pause_1_s = true;
                }
                if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_1_a2.SendOrder(op);
                    pause_1_s = true;
                }
                m_childorderKey_s_1 = "";
                m_childorderKey_s_2 = "";
                if (checkBox1.Checked)
                {
                    richTextBox1.AppendText("\nPause SELL Button clicked for SR3 Jun24/ZQ Jul24 .net");
                    if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_i.SendOrder(op);
                        pause_i_s = true;
                    }
                    if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_i_a1.SendOrder(op);
                        pause_i_s = true;
                    }
                    if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_i_a2.SendOrder(op);
                        pause_i_s = true;
                    }
                    m_childorderKey_i_s_1 = "";
                    m_childorderKey_i_s_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(531);
            }
        }

        private void button11_Click(object sender, EventArgs e)
        {
            try {
                //play
                richTextBox1.AppendText("\nUNPause SELL Button clicked for SR3 Jun24/Sr1 Jul24 .net");
                if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_1.SendOrder(op);
                } if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_1_a1.SendOrder(op);
                } if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_1_a2.SendOrder(op);
                }
                pause_1_s = false;
                if (checkBox1.Checked)
                {
                    richTextBox1.AppendText("\nUNPause SELL Button clicked for SR3 Jun24/ZQ Jul24 .net");
                    if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_i.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_i_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_i_a2.SendOrder(op);
                    }
                    pause_i_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(532);
            }
        }

       



        //buying  sep-nov

        private void button8_Click_1(object sender, EventArgs e)
        {
            try { 
            button4.PerformClick();
            decimal x = Decimal.Parse(textBox5.Text);
            x /= 100;
            user_price_2_b = Price.FromString(instrument, x.ToString());
          
            allowed_2 = true;
            buying_2 = true;
            
            ratio_2 = Convert.ToDecimal(textBox4.Text);
            qt2_b = Convert.ToDecimal(textBox6.Text);
            rel_2_b = Convert.ToDecimal(textBox9.Text);
            richTextBox1.AppendText(String.Format("\n buying button clicked for sr3-sr1 Jun-aug."));
            pause_2_b = false;
            qoute_stuck_side_1_b_1 = "";
            qoute_stuck_side_1_b_2 = "";
            qoute_stuck_price_1_b_1 = 0;
            qoute_stuck_price_1_b_2 = 0;
            partial_fill_1_b_1 = 0;
            partial_fill_1_b_2 = 0;
            m_childorderKey_1_b_1 = "";
            m_childorderKey_1_b_2 = "";
            m_orderKey_1_b = "";
            m_orderKey_1_b_old = "";
            fill_2_b = 0;
            if (checkBox2.Checked)
            {
                buying_ii = true;
              
                qtii_b = Convert.ToDecimal(textBox6.Text);
                rel_ii_b = Convert.ToDecimal(textBox9.Text);
                richTextBox1.AppendText(String.Format("\n buying button clicked for sr3-zq Jun-aug."));
                pause_ii_b = false;
                qoute_stuck_side_ii_b_1 = "";
                qoute_stuck_side_ii_b_2 = "";
                qoute_stuck_price_ii_b_1 = 0;
                qoute_stuck_price_ii_b_2 = 0;
                partial_fill_ii_b_1 = 0;
                partial_fill_ii_b_2 = 0;
                m_childorderKey_ii_b_1 = "";
                m_childorderKey_ii_b_2 = "";
                m_orderKey_ii_b = "";
                m_orderKey_ii_b_old = "";
                fill_ii_b = 0;
                ratio_ii = Convert.ToDecimal(textBox18.Text);

            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(533);
            }
        }
        private void button4_Click(object sender, EventArgs e)
        {
            try {
                buying_2 = false;
                qouted_price_received_2_b = false;
                richTextBox1.AppendText("\nCancel buy for SR3 Jun24/Sr1 Aug24 .net CLICKED");

                if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_2.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_2_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_2_a2.SendOrder(op);

                }
                fill_2_b = 0;
                qoute_stuck_side_1_b_1 = "";
                qoute_stuck_side_b_2 = "";
                qoute_stuck_price_1_b_1 = 0;
                qoute_stuck_price_1_b_2 = 0;
                m_orderKey_1_b = "";
                dataGridView2.Rows[16].Cells[5].Value = "-";
                dataGridView2.Rows[16].Cells[2].Value = "-";
                dataGridView2.Rows[16].Cells[3].Value = "-";
                dataGridView2.Rows[16].Cells[4].Value = "-";
                dataGridView2.Rows[16].Cells[6].Value = "-";

                m_childorderKey_1_b_1 = "";
                m_childorderKey_1_b_2 = "";
                partial_fill_1_b_1 = 0;
                partial_fill_1_b_2 = 0;

                m_orderKey_1_b_old = "";
                m_hedgeorderKey_1_b_1 = "";
                m_hedgeorderKey_1_b_2 = "";
                qt2_b = 0;
                rel_2_b = 0;
                new_reload_2_b = false;
                change_2_b = false;
                if (checkBox2.Checked)
                {
                    buying_ii = false;
                    qouted_price_received_ii_b = false;
                    richTextBox1.AppendText("\nCancel buy for SR3 Jun24/zq Aug24 .net CLICKED");

                    if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_ii.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_ii_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_ii_a2.SendOrder(op);

                    }
                    fill_ii_b = 0;
                    qoute_stuck_side_ii_b_1 = "";
                    qoute_stuck_side_ii_b_2 = "";
                    qoute_stuck_price_ii_b_1 = 0;
                    qoute_stuck_price_ii_b_2 = 0;
                    m_orderKey_ii_b = "";
                    dataGridView2.Rows[18].Cells[5].Value = "-";
                    dataGridView2.Rows[18].Cells[2].Value = "-";
                    dataGridView2.Rows[18].Cells[3].Value = "-";
                    dataGridView2.Rows[18].Cells[4].Value = "-";
                    dataGridView2.Rows[18].Cells[6].Value = "-";

                    m_childorderKey_ii_b_1 = "";
                    m_childorderKey_ii_b_2 = "";
                    partial_fill_ii_b_1 = 0;
                    partial_fill_ii_b_2 = 0;

                    m_orderKey_ii_b_old = "";
                    m_hedgeorderKey_ii_b_1 = "";
                    m_hedgeorderKey_ii_b_2 = "";
                    qtii_b = 0;
                    rel_ii_b = 0;
                    new_reload_ii_b = false;
                    change_ii_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(534);
            }
        }
        private void button14_Click(object sender, EventArgs e)
        {
            //pause wala
            try { 
            richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Jun24/Sr1 Aug24 .net");
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2.SendOrder(op);
                pause_2_b = true;
            } if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
                pause_2_b = true;
            } if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
                pause_2_b = true;
            }
            m_childorderKey_1_b_1 = "";
            m_childorderKey_1_b_2 = "";
            if (checkBox2.Checked)
            {
                richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Jun24/ZQ Aug24 .net");
                if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_ii.SendOrder(op);
                    pause_ii_b = true;
                }
                if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_ii_a1.SendOrder(op);
                    pause_ii_b = true;
                }
                if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_ii_a2.SendOrder(op);
                    pause_ii_b = true;
                }
                m_childorderKey_ii_b_1 = "";
                m_childorderKey_ii_b_2 = "";
            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(535);
            }
        }
        private void button13_Click(object sender, EventArgs e)
        {
            //unpause wala
            try
            {
                richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Jun24/Sr1 Aug24 .net");
                if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_2.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_2_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_2_a2.SendOrder(op);
                }
                pause_2_b = false;
                if (checkBox2.Checked)
                {
                    richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Jun24/Zq Aug24 .net");
                    if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_ii.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_ii_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_ii_a2.SendOrder(op);
                    }
                    pause_ii_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(536);
            }
        }

        //selling sep-nov
        private void button9_Click_1(object sender, EventArgs e)
        {
            try { 
            button3.PerformClick();
            decimal x = Decimal.Parse(textBox5.Text);
            x = x / 100;

            user_price_2_s = Price.FromString(instrument,x.ToString());
           
            allowed_2 = true;
            selling_2 = true;
            
            ratio_2 = Convert.ToDecimal(textBox4.Text);
            qt2_s = Convert.ToDecimal(textBox6.Text);
            rel_2_s = Convert.ToDecimal(textBox9.Text);
            richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Jun24/Sr1 Aug24 .net {0} {1}.", user_price_2_s,x));
            pause_2_s = false;
            qoute_stuck_side_1_s_1 = "";
            qoute_stuck_side_1_s_2 = "";
            qoute_stuck_price_1_s_1 = 0;
            qoute_stuck_price_1_s_2 = 0;
            partial_fill_1_s_1 = 0;
            partial_fill_1_s_2 = 0;
            m_childorderKey_1_s_1 = "";
            m_childorderKey_1_s_2 = "";
            m_orderKey_1_s = "";
            m_orderKey_1_s_old = "";
            fill_2_s = 0;

              
                if (checkBox2.Checked)
            {
                richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Jun24/zq Aug24 .net ."));
                selling_ii = true;
              
                qtii_s = Convert.ToDecimal(textBox6.Text);
                rel_ii_s = Convert.ToDecimal(textBox9.Text);
               
                pause_ii_s = false;
                qoute_stuck_side_ii_s_1 = "";
                qoute_stuck_side_ii_s_2 = "";
                qoute_stuck_price_ii_s_1 = 0;
                qoute_stuck_price_ii_s_2 = 0;
                partial_fill_ii_s_1 = 0;
                partial_fill_ii_s_2 = 0;
                m_childorderKey_ii_s_1 = "";
                m_childorderKey_ii_s_2 = "";
                m_orderKey_ii_s = "";
                m_orderKey_ii_s_old = "";
                fill_ii_s = 0;
                ratio_ii = Convert.ToDecimal(textBox18.Text);
                   
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());
                Environment.Exit(537);

            }
        }
        private void button3_Click(object sender, EventArgs e)
        {
            try { 
            selling_2 = false;
            qouted_price_received_2_s = false;
            richTextBox1.AppendText("\nCancel sell for SR3 Jun24/Sr1 Aug24 .net CLICKED");

            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);

            }
            qoute_stuck_side_1_s_1 = "";
            qoute_stuck_side_1_s_2 = "";
            qoute_stuck_price_1_s_1 = 0;
            qoute_stuck_price_1_s_2 = 0;
            m_orderKey_1_s = "";
            
            dataGridView2.Rows[17].Cells[5].Value = "-";
            dataGridView2.Rows[17].Cells[2].Value = "-";
            dataGridView2.Rows[17].Cells[3].Value = "-";
            dataGridView2.Rows[17].Cells[4].Value = "-";
            dataGridView2.Rows[17].Cells[6].Value = "-";
            fill_2_s = 0;
           
            m_childorderKey_1_s_1 = "";
            m_childorderKey_1_s_2 = "";
            partial_fill_1_s_1 = 0;
            partial_fill_1_s_2 = 0;
                m_orderKey_1_s_old = "";
                m_hedgeorderKey_1_s_1 = "";
                m_hedgeorderKey_1_s_2 = "";
                qt2_s = 0;
                rel_2_s = 0;
                new_reload_1_s = false;
                change_2_s = false;
                if (checkBox2.Checked){
                selling_ii = false;
                qouted_price_received_ii_s = false;
                richTextBox1.AppendText("\nCancel sell for SR3 Jun24/ZQ Aug24 .net CLICKED");

                if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_ii.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_ii_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_ii_a2.SendOrder(op);

                }
                qoute_stuck_side_ii_s_1 = "";
                qoute_stuck_side_ii_s_2 = "";
                qoute_stuck_price_ii_s_1 = 0;
                qoute_stuck_price_ii_s_2 = 0;
                m_orderKey_ii_s = "";

                dataGridView2.Rows[19].Cells[5].Value = "-";
                dataGridView2.Rows[19].Cells[2].Value = "-";
                dataGridView2.Rows[19].Cells[3].Value = "-";
                dataGridView2.Rows[19].Cells[4].Value = "-";
                dataGridView2.Rows[19].Cells[6].Value = "-";
                fill_ii_s = 0;
                partial_fill_ii_s_1 = 0;
                partial_fill_ii_s_2 = 0;
                m_childorderKey_ii_s_1 = "";
                m_childorderKey_ii_s_2 = "";
                    m_orderKey_ii_s_old = "";
                    m_hedgeorderKey_ii_s_1 = "";
                    m_hedgeorderKey_ii_s_2 = "";
                    qtii_s = 0;
                    rel_ii_s = 0;
                    new_reload_ii_s = false;
                    change_ii_s = false;

                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(538);
            }
        }
        private void button16_Click(object sender, EventArgs e)
        {
            //pause
            try { 
            richTextBox1.AppendText("\nPause sell Button clicked for SR3 Jun24/Sr1 Aug24 .net");
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2.SendOrder(op);
                pause_2_s = true;
            } if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
                pause_2_s = true;
            } if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
                pause_2_s = true;
            }
            m_childorderKey_1_s_1 = "";
            m_childorderKey_1_s_2 = "";
            if (checkBox2.Checked)
            {
                richTextBox1.AppendText("\nPause sell Button clicked for SR3 Jun24/ZQ Aug24 .net");
                if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_ii.SendOrder(op);
                    pause_ii_s = true;
                }
                if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_ii_a1.SendOrder(op);
                    pause_ii_s = true;
                }
                if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_ii_a2.SendOrder(op);
                    pause_ii_s = true;
                }
                m_childorderKey_ii_s_1 = "";
                m_childorderKey_ii_s_2 = "";
            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(539);
            }
        }
        private void button15_Click(object sender, EventArgs e)
        {
            //unpause
            try { 
            richTextBox1.AppendText("\nUNPause sell Button clicked for SR3 Jun24/Sr1 Aug24 .net");
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2.SendOrder(op);
            }if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
            }if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
            }
            pause_2_s = false;
            if (checkBox2.Checked)
            {
                richTextBox1.AppendText("\nUNPause sell Button clicked for SR3 Jun24/Zq Aug24 .net");
                if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_ii.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_ii_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_ii_a2.SendOrder(op);
                }
                pause_ii_s = false;
            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(540);
            }
        }
        //dec-jan

        private void button32_Click(object sender, EventArgs e)
        {
            try { 
            button31.PerformClick();
            user_price_3_b = Price.FromDecimal(instrument, Convert.ToDecimal(textBox14.Text));
            allowed_3 = true;
            buying_3 = true;
            ratio_3 = Convert.ToDecimal(textBox13.Text);
            rel_3_b = Convert.ToDecimal(textBox15.Text);
            qt3_b = Convert.ToDecimal(textBox16.Text);

            richTextBox1.AppendText(String.Format("\n buying button clicked for SR3 Dec23/Sr1 Jan24 .net."));
            pause_3_b = false;
            qoute_stuck_side_3_b_1 = "";
            qoute_stuck_side_3_b_2 = "";
            qoute_stuck_price_3_b_1 = 0;
            qoute_stuck_price_3_b_2 = 0;
            partial_fill_3_b_1 = 0;
            partial_fill_3_b_2 = 0;
            m_childorderKey_3_b_1 = "";
            m_childorderKey_3_b_2 = "";
            m_orderKey_3_b = "";
            m_orderKey_3_b_old = "";
            fill_3_b = 0;
            if (checkBox3.Checked)
            {
                buying_iii = true;
               
                rel_iii_b = Convert.ToDecimal(textBox15.Text);
                qtiii_b = Convert.ToDecimal(textBox16.Text);

                richTextBox1.AppendText(String.Format("\n buying button clicked for SR3 Dec23/ZQ Jan24 .net."));
                pause_iii_b = false;
                qoute_stuck_side_iii_b_1 = "";
                qoute_stuck_side_iii_b_2 = "";
                qoute_stuck_price_iii_b_1 = 0;
                qoute_stuck_price_iii_b_2 = 0;
                partial_fill_iii_b_1 = 0;
                partial_fill_iii_b_2 = 0;
                m_childorderKey_iii_b_1 = "";
                m_childorderKey_iii_b_2 = "";
                m_orderKey_iii_b = "";
                m_orderKey_iii_b_old = "";
                fill_iii_b = 0;
                ratio_iii=Convert.ToDecimal(textBox19.Text);

            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(541);
            }
        }
        private void button31_Click(object sender, EventArgs e)
        {
            try { 
            buying_3 = false;
            qouted_price_received_3_b = false;
            richTextBox1.AppendText("\nCancel buy for SR3 Dec23/Sr1 Jan24 .net CLICKED");

            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);

            }
            m_orderKey_3_b = "";
            dataGridView2.Rows[20].Cells[5].Value = "-";
            dataGridView2.Rows[20].Cells[2].Value = "-";
            dataGridView2.Rows[20].Cells[3].Value = "-";
            dataGridView2.Rows[20].Cells[4].Value = "-";
            dataGridView2.Rows[20].Cells[6].Value = "-";
            fill_3_b = 0;
            qoute_stuck_side_3_b_1 = "";
            qoute_stuck_side_3_b_2 = "";
            qoute_stuck_price_3_b_1 = 0;
            qoute_stuck_price_3_b_2 = 0;
            m_childorderKey_3_b_1 = "";
            m_childorderKey_3_b_2 = "";
            partial_fill_3_b_1 = 0;
                partial_fill_3_b_2 = 0;
                m_orderKey_3_b_old = "";
                m_hedgeorderKey_3_b_1 = "";
                m_hedgeorderKey_3_b_2 = "";
                qt3_b = 0;
                rel_3_b = 0;
                new_reload_3_b = false;
                change_3_b = false;
                if (checkBox3.Checked)
            {
                buying_iii = false;
                qouted_price_received_iii_b = false;
                richTextBox1.AppendText("\nCancel buy for SR3 Dec23/ZQ Jan24 .net CLICKED");

                if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iii.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iii_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iii_a2.SendOrder(op);

                }
                m_orderKey_iii_b = "";
                dataGridView2.Rows[22].Cells[5].Value = "-";
                dataGridView2.Rows[22].Cells[2].Value = "-";
                dataGridView2.Rows[22].Cells[3].Value = "-";
                dataGridView2.Rows[22].Cells[4].Value = "-";
                dataGridView2.Rows[22].Cells[6].Value = "-";
                fill_iii_b = 0;
                qoute_stuck_side_iii_b_1 = "";
                qoute_stuck_side_iii_b_2 = "";
                qoute_stuck_price_iii_b_1 = 0;
                qoute_stuck_price_iii_b_2 = 0;
                m_childorderKey_iii_b_1 = "";
                m_childorderKey_iii_b_2 = "";
                partial_fill_iii_b_1 = 0;
                partial_fill_iii_b_2 = 0;

                    m_orderKey_iii_b_old = "";
                    m_hedgeorderKey_iii_b_1 = "";
                    m_hedgeorderKey_iii_b_2 = "";
                    qtiii_b = 0;
                    rel_iii_b = 0;
                    new_reload_iii_b = false;
                    change_iii_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(542);
            }
        }
        private void button36_Click(object sender, EventArgs e)
        {
            //pause wala
            try { 
            richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Dec23/Sr1 Jan24 .net");
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3.SendOrder(op);
                pause_3_b = true;
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
                pause_3_b = true;
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
                pause_3_b = true;
            }

            m_childorderKey_3_b_1 = "";
            m_childorderKey_3_b_2 = "";
            if (checkBox3.Checked)
            {
                richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Dec23/ZQ Jan24 .net");
                if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iii.SendOrder(op);
                    pause_iii_b = true;
                }
                if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iii_a1.SendOrder(op);
                    pause_iii_b = true;
                }
                if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iii_a2.SendOrder(op);
                    pause_iii_b = true;
                }

                m_childorderKey_iii_b_1 = "";
                m_childorderKey_iii_b_2 = "";
            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(543);
            }
        }

        private void button35_Click(object sender, EventArgs e)
        {
            try { 
            richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Dec23/Sr1 Jan24 .net");
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
            }
            pause_3_b = false;
            if(checkBox3.Checked)
            {
                richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Dec23/ZQ Jan24 .net");
                if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_iii.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_iii_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_iii_a2.SendOrder(op);
                }
                pause_iii_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(544);
            }
        }
        //selling dec-jan
        private void button30_Click(object sender, EventArgs e)
        {
            try { 
            button29.PerformClick();
            user_price_3_s = Price.FromDecimal(instrument, Convert.ToDecimal(textBox14.Text));
            allowed_3 = true;
            selling_3 = true;
            ratio_3 = Convert.ToDecimal(textBox13.Text);
            qt3_s = Convert.ToDecimal(textBox16.Text);
            rel_3_s = Convert.ToDecimal(textBox15.Text);
            richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Dec23/Sr1 Jan24.net."));
            pause_3_s = false;
            qoute_stuck_side_3_s_1 = "";
            qoute_stuck_side_3_s_2 = "";
            qoute_stuck_price_3_s_1 = 0;
            qoute_stuck_price_3_s_2 = 0;
            partial_fill_3_s_1 = 0;
            partial_fill_3_s_2 = 0;
            m_childorderKey_3_s_1 = "";
            m_childorderKey_3_s_2 = "";
            m_orderKey_3_s = "";
            m_orderKey_3_s_old = "";
            fill_3_s = 0;
            if (checkBox3.Checked)
            {
                selling_iii = true;
               
                qtiii_s = Convert.ToDecimal(textBox16.Text);
                rel_iii_s = Convert.ToDecimal(textBox15.Text);
                richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Dec23/ZQ Jan24.net."));
                pause_iii_s = false;
                qoute_stuck_side_iii_s_1 = "";
                qoute_stuck_side_iii_s_2 = "";
                qoute_stuck_price_iii_s_1 = 0;
                qoute_stuck_price_iii_s_2 = 0;
                partial_fill_iii_s_1 = 0;
                partial_fill_iii_s_2 = 0;
                m_childorderKey_iii_s_1 = "";
                m_childorderKey_iii_s_2 = "";
                m_orderKey_iii_s = "";
                m_orderKey_iii_s_old = "";
                fill_iii_s = 0;
                ratio_iii = Convert.ToDecimal(textBox19.Text);
            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(545);
            }
        }

        private void button29_Click(object sender, EventArgs e)
        {
            try { 
            selling_3 = false;
            qouted_price_received_3_s = false;
            richTextBox1.AppendText("\nCancel sell for SR3 Dec23/Sr1 Jan24 .net  CLICKED");

            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);

            }
            qoute_stuck_side_3_s_1 = "";
            qoute_stuck_side_3_s_2 = "";
            qoute_stuck_price_3_s_1 = 0;
            qoute_stuck_price_3_s_2 = 0;
            m_orderKey_3_s = "";
            dataGridView2.Rows[21].Cells[5].Value = "-";
            dataGridView2.Rows[21].Cells[2].Value = "-";
            dataGridView2.Rows[21].Cells[3].Value = "-";
            dataGridView2.Rows[21].Cells[4].Value = "-";
            dataGridView2.Rows[21].Cells[6].Value = "-";
            fill_3_s = 0;
            partial_fill_3_s_1 = 0;
            partial_fill_3_s_2 = 0;
            m_childorderKey_3_s_1 = "";
            m_childorderKey_3_s_2 = "";
                m_orderKey_3_s_old = "";
                m_hedgeorderKey_3_s_1 = "";
                m_hedgeorderKey_3_s_2 = "";
                qt3_s = 0;
                rel_3_s = 0;
                new_reload_3_s = false;
                change_3_s = false;
                if (checkBox3.Checked)
            {
                selling_iii = false;
                qouted_price_received_iii_s = false;
                richTextBox1.AppendText("\nCancel sell for SR3 Dec23/ZQ Jan24 .net  CLICKED");

                if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iii.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iii_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iii_a2.SendOrder(op);

                }
                qoute_stuck_side_iii_s_1 = "";
                qoute_stuck_side_iii_s_2 = "";
                qoute_stuck_price_iii_s_1 = 0;
                qoute_stuck_price_iii_s_2 = 0;
                m_orderKey_iii_s = "";
                dataGridView2.Rows[23].Cells[5].Value = "-";
                dataGridView2.Rows[23].Cells[2].Value = "-";
                dataGridView2.Rows[23].Cells[3].Value = "-";
                dataGridView2.Rows[23].Cells[4].Value = "-";
                dataGridView2.Rows[23].Cells[6].Value = "-";
                fill_iii_s = 0;

                m_childorderKey_iii_s_1 = "";
                m_childorderKey_iii_s_2 = "";
                partial_fill_iii_s_1 = 0;
                partial_fill_iii_s_2 = 0;
                    m_orderKey_iii_s_old = "";
                    m_hedgeorderKey_iii_s_1 = "";
                    m_hedgeorderKey_iii_s_2 = "";
                    qtiii_s = 0;
                    rel_iii_s = 0;
                    new_reload_iii_s = false;
                    change_iii_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(546);
            }
        }

        private void button34_Click(object sender, EventArgs e)
        {
            //pause
            try { 
            richTextBox1.AppendText("\nPause SELL Button clicked for SR3 Dec23/Sr1 Jan24 .net");
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3.SendOrder(op);
                pause_3_s = true;
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
                pause_3_s = true;
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
                pause_3_s = true;
            }
            m_childorderKey_3_s_1 = "";
            m_childorderKey_3_s_2 = "";
            if (checkBox3.Checked)
            {
                richTextBox1.AppendText("\nPause SELL Button clicked for SR3 Dec23/zq Jan24 .net");
                if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iii.SendOrder(op);
                    pause_iii_s = true;
                }
                if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iii_a1.SendOrder(op);
                    pause_iii_s = true;
                }
                if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iii_a2.SendOrder(op);
                    pause_iii_s = true;
                }
                m_childorderKey_iii_s_1 = "";
                m_childorderKey_iii_s_2 = "";
            }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(547);
            }
        }

        private void button33_Click(object sender, EventArgs e)
        {
            //unpause
            try
            {
                richTextBox1.AppendText("\nUNPause SELL Button clicked for SR3 Dec23/Sr1 Jan24 .net");
                if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_3.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_3_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_3_a2.SendOrder(op);
                }
                pause_3_s = false;
                if (checkBox3.Checked)
                {
                    richTextBox1.AppendText("\nUNPause SELL Button clicked for SR3 Dec23/ZQ Jan24 .net");
                    if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_iii.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_iii_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_iii_a2.SendOrder(op);
                    }
                    pause_iii_s = false;
                }
            } 
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(548);
            }
}
        //buying dec-feb
        private void button24_Click_1(object sender, EventArgs e)
        {
            try
            {

                button23.PerformClick();

                decimal x = Decimal.Parse(textBox10.Text);
                x /= 100;
                user_price_4_b = Price.FromString(instrument, x.ToString());

                allowed_4 = true;
                buying_4 = true;

                ratio_4 = Convert.ToDecimal(textBox1.Text);
                qt4_b = Convert.ToDecimal(textBox12.Text);
                rel_4_b = Convert.ToDecimal(textBox11.Text);
                richTextBox1.AppendText(String.Format("\n buying button clicked for sr3-sr1 dec-feb.{0}", rel_4_b));
                pause_4_b = false;
                qoute_stuck_side_4_b_1 = "";
                qoute_stuck_side_4_b_2 = "";
                qoute_stuck_price_4_b_1 = 0;
                qoute_stuck_price_4_b_2 = 0;
                partial_fill_4_b_1 = 0;
                partial_fill_4_b_2 = 0;
                m_childorderKey_4_b_1 = "";
                m_childorderKey_4_b_2 = "";
                m_orderKey_4_b = "";
                m_orderKey_4_b_old = "";
                fill_4_b = 0;
               
                if (checkBox4.Checked)
                {
                    buying_iv = true;


                    qtiv_b = Convert.ToDecimal(textBox12.Text);
                    rel_iv_b = Convert.ToDecimal(textBox11.Text);
                    richTextBox1.AppendText(String.Format("\n buying button clicked for sr3-zq dec-feb.{0}", rel_iv_b));
                    pause_iv_b = false;
                    qoute_stuck_side_iv_b_1 = "";
                    qoute_stuck_side_iv_b_2 = "";
                    qoute_stuck_price_iv_b_1 = 0;
                    qoute_stuck_price_iv_b_2 = 0;
                    partial_fill_iv_b_1 = 0;
                    partial_fill_iv_b_2 = 0;
                    m_childorderKey_iv_b_1 = "";
                    m_childorderKey_iv_b_2 = "";
                    m_orderKey_iv_b = "";
                    m_orderKey_iv_b_old = "";
                    fill_iv_b = 0;
                    ratio_iv = Convert.ToDecimal(textBox20.Text);
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(549);
            }
        }

        private void button23_Click_1(object sender, EventArgs e)
        {
            try { 
            buying_4 = false;
            qouted_price_received_4_b = false;
            richTextBox1.AppendText("\nCancel buy for SR3 Dec23/Sr1 Feb24.net CLICKED");

            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);

            }
            fill_4_b = 0;
            qoute_stuck_side_4_b_1 = "";
            qoute_stuck_side_4_b_2 = "";
            qoute_stuck_price_4_b_1 = 0;
            qoute_stuck_price_4_b_2 = 0;
            m_orderKey_4_b = "";
            dataGridView2.Rows[24].Cells[5].Value = "-";
            dataGridView2.Rows[24].Cells[2].Value = "-";
            dataGridView2.Rows[24].Cells[3].Value = "-";
            dataGridView2.Rows[24].Cells[4].Value = "-";
            dataGridView2.Rows[24].Cells[6].Value = "-";

            m_childorderKey_4_b_1 = "";
            m_childorderKey_4_b_2 = "";
            partial_fill_4_b_1 = 0;
            partial_fill_4_b_2 = 0;
            m_orderKey_4_b_old = "";
            m_hedgeorderKey_4_b_1 = "";
            m_hedgeorderKey_4_b_2 = "";
            qt4_b = 0;
            rel_4_b = 0;
            new_reload_4_b = false;
            change_4_b = false;
                if (checkBox4.Checked)
            {
                buying_iv = false;
                qouted_price_received_iv_b = false;
                richTextBox1.AppendText("\nCancel buy for SR3 Dec23/ZQ Feb24.net CLICKED");

                if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iv.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iv_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iv_a2.SendOrder(op);

                }
                fill_iv_b = 0;
                qoute_stuck_side_iv_b_1 = "";
                qoute_stuck_side_iv_b_2 = "";
                qoute_stuck_price_iv_b_1 = 0;
                qoute_stuck_price_iv_b_2 = 0;
                m_orderKey_iv_b = "";
                dataGridView2.Rows[26].Cells[5].Value = "-";
                dataGridView2.Rows[26].Cells[2].Value = "-";
                dataGridView2.Rows[26].Cells[3].Value = "-";
                dataGridView2.Rows[26].Cells[4].Value = "-";
                dataGridView2.Rows[26].Cells[6].Value = "-";

                m_childorderKey_iv_b_1 = "";
                m_childorderKey_iv_b_2 = "";
                partial_fill_iv_b_1 = 0;
                partial_fill_iv_b_2 = 0;
                    m_orderKey_iv_b_old = "";
                    m_hedgeorderKey_iv_b_1 = "";
                    m_hedgeorderKey_iv_b_2 = "";
                    qtiv_b = 0;
                    rel_iv_b = 0;
                    new_reload_iv_b = false;
                    change_iv_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(550);
            }
        }

        private void button22_Click_1(object sender, EventArgs e)
        {
            //pause wala
            try
            {
                richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Dec23/Sr1 Feb24 .net");
                if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_4.SendOrder(op);
                    pause_4_b = true;
                }
                if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_4_a1.SendOrder(op);
                    pause_4_b = true;
                }
                if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_4_a2.SendOrder(op);
                    pause_4_b = true;
                }
                m_childorderKey_4_b_1 = "";
                m_childorderKey_4_b_2 = "";
                if (checkBox4.Checked)
                {
                    richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Dec23/ZQ feb24 .net");
                    if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_iv.SendOrder(op);
                        pause_iv_b = true;
                    }
                    if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_iv_a1.SendOrder(op);
                        pause_iv_b = true;
                    }
                    if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_iv_a2.SendOrder(op);
                        pause_iv_b = true;
                    }
                    m_childorderKey_iv_b_1 = "";
                    m_childorderKey_iv_b_2 = "";
                }
            } 
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(551);
            }
}

        private void button21_Click_1(object sender, EventArgs e)
        {
            //unpause wala
            try { 
            richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Dec23/Sr1 Feb24 .net");
            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);
            }
            pause_4_b = false;
            if (checkBox4.Checked)
            {
                richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Dec23/ZQ Feb24 .net");
                if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_iv.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_iv_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_iv_a2.SendOrder(op);
                }
                pause_iv_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(552);
            }
        }
        //selling dec-feb
        private void button28_Click_1(object sender, EventArgs e)
        {
            try { 

            button27.PerformClick();
        decimal x = Decimal.Parse(textBox10.Text);
            x = x / 100;

            user_price_4_s = Price.FromString(instrument, x.ToString());

            allowed_4 = true;
            selling_4 = true;
            ratio_4 = Convert.ToDecimal(textBox1.Text);

            qt4_s = Convert.ToDecimal(textBox12.Text);
            rel_4_s = Convert.ToDecimal(textBox11.Text);
            richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Dec23/Sr1 Feb24 .net {0} {1}.", user_price_4_s, x));
            pause_4_s = false;
            qoute_stuck_side_4_s_1 = "";
            qoute_stuck_side_4_s_2 = "";
            qoute_stuck_price_4_s_1 = 0;
            qoute_stuck_price_4_s_2 = 0;
            partial_fill_4_s_1 = 0;
            partial_fill_4_s_2 = 0;
            m_childorderKey_4_s_1 = "";
            m_childorderKey_4_s_2 = "";
            m_orderKey_4_s = "";
            m_orderKey_4_s_old = "";
            fill_4_s = 0;
            if (checkBox4.Checked)
            {
                selling_iv = true;
               
                qtiv_s = Convert.ToDecimal(textBox12.Text);
                rel_iv_s = Convert.ToDecimal(textBox11.Text);
                richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Dec23/ZQ Feb24 .net ."));
                pause_iv_s = false;
                qoute_stuck_side_iv_s_1 = "";
                qoute_stuck_side_iv_s_2 = "";
                qoute_stuck_price_iv_s_1 = 0;
                qoute_stuck_price_iv_s_2 = 0;
                partial_fill_iv_s_1 = 0;
                partial_fill_iv_s_2 = 0;
                m_childorderKey_iv_s_1 = "";
                m_childorderKey_iv_s_2 = "";
                m_orderKey_iv_s = "";
                m_orderKey_iv_s_old = "";
                fill_iv_s = 0;
                ratio_iv = Convert.ToDecimal(textBox20.Text);

                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(552);
            }
        }

        private void button27_Click_1(object sender, EventArgs e)
        {
            try { 
            selling_4 = false;
            qouted_price_received_4_s = false;
            richTextBox1.AppendText("\nCancel sell for SR3 Dec23/Sr1 Feb24 .net CLICKED");

            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);

            }
            qoute_stuck_side_4_s_1 = "";
            qoute_stuck_side_4_s_2 = "";
            qoute_stuck_price_4_s_1 = 0;
            qoute_stuck_price_4_s_2 = 0;
            m_orderKey_4_s = "";

            dataGridView2.Rows[25].Cells[5].Value = "-";
            dataGridView2.Rows[25].Cells[2].Value = "-";
            dataGridView2.Rows[25].Cells[3].Value = "-";
            dataGridView2.Rows[25].Cells[4].Value = "-";
            dataGridView2.Rows[25].Cells[6].Value = "-";
            fill_4_s = 0;

            m_childorderKey_4_s_1 = "";
            m_childorderKey_4_s_2 = "";
            partial_fill_4_s_1 = 0;
            partial_fill_4_s_2 = 0;
                m_orderKey_4_s_old = "";
                m_hedgeorderKey_4_s_1 = "";
                m_hedgeorderKey_4_s_2 = "";
                qt4_s = 0;
                rel_4_s = 0;
                new_reload_4_s = false;
                change_4_s = false;
                if (checkBox4.Checked)
            {
                selling_iv = false;
                qouted_price_received_iv_s = false;
                richTextBox1.AppendText("\nCancel sell for SR3 Dec23/zq Feb24 .net CLICKED");

                if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iv.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iv_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_iv_a2.SendOrder(op);

                }
                qoute_stuck_side_iv_s_1 = "";
                qoute_stuck_side_iv_s_2 = "";
                qoute_stuck_price_iv_s_1 = 0;
                qoute_stuck_price_iv_s_2 = 0;
                m_orderKey_iv_s = "";

                dataGridView2.Rows[27].Cells[5].Value = "-";
                dataGridView2.Rows[27].Cells[2].Value = "-";
                dataGridView2.Rows[27].Cells[3].Value = "-";
                dataGridView2.Rows[27].Cells[4].Value = "-";
                dataGridView2.Rows[27].Cells[6].Value = "-";
                fill_iv_s = 0;

                m_childorderKey_iv_s_1 = "";
                m_childorderKey_iv_s_2 = "";
                partial_fill_iv_s_1 = 0;
                partial_fill_iv_s_2 = 0;
                    m_orderKey_iv_s_old = "";
                    m_hedgeorderKey_iv_s_1 = "";
                    m_hedgeorderKey_iv_s_2 = "";
                    qtiv_s = 0;
                    rel_iv_s = 0;
                    new_reload_iv_s = false;
                    change_iv_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(553);
            }
        }

        private void button26_Click_1(object sender, EventArgs e)
        {
            try { 
            //pause
            richTextBox1.AppendText("\nPause sell Button clicked for SR3 Dec23/Sr1 Feb24 .net");
            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4.SendOrder(op);
                pause_4_s = true;
            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);
                pause_4_s = true;
            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);
                pause_4_s = true;
            }
            m_childorderKey_4_s_1 = "";
            m_childorderKey_4_s_2 = "";
            if (checkBox4.Checked)
            {
                richTextBox1.AppendText("\nPause sell Button clicked for SR3 Dec23/ZQ Feb24 .net");
                if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iv.SendOrder(op);
                    pause_iv_s = true;
                }
                if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iv_a1.SendOrder(op);
                    pause_iv_s = true;
                }
                if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_iv_a2.SendOrder(op);
                    pause_iv_s = true;
                }
                m_childorderKey_iv_s_1 = "";
                m_childorderKey_iv_s_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(554);
            }
        }


        private void button25_Click_1(object sender, EventArgs e)
        {
            //unpause
            try
            {
                richTextBox1.AppendText("\nUNPause sell Button clicked for SR3 Dec23/Sr1 Feb24 .net");
                if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_4.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_4_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_4_a2.SendOrder(op);
                }
                pause_4_s = false;
                if (checkBox4.Checked)
                {
                    richTextBox1.AppendText("\nUNPause sell Button clicked for SR3 Dec23/ZQ Feb24 .net");
                    if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_iv.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_iv_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_iv_a2.SendOrder(op);
                    }
                    pause_iv_s = false;
                }
            } 
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(555);
            }
}
        //buying mar apr
        private void button40_Click(object sender, EventArgs e)
        {
            //buy
            try
            {
                button39.PerformClick();
                user_price_5_b = Price.FromDecimal(instrument, Convert.ToDecimal(textBox23.Text));
                allowed_5 = true;
                buying_5 = true;
                ratio_5 = Convert.ToDecimal(textBox22.Text);
                rel_5_b = Convert.ToDecimal(textBox24.Text);
                qt5_b = Convert.ToDecimal(textBox25.Text);

                richTextBox1.AppendText(String.Format("\n buying button clicked for SR3 Mar24/Sr1 apr24 .net."));
                pause_5_b = false;
                qoute_stuck_side_5_b_1 = "";
                qoute_stuck_side_5_b_2 = "";
                qoute_stuck_price_5_b_1 = 0;
                qoute_stuck_price_5_b_2 = 0;
                partial_fill_5_b_1 = 0;
                partial_fill_5_b_2 = 0;
                m_childorderKey_5_b_1 = "";
                m_childorderKey_5_b_2 = "";
                m_orderKey_5_b = "";
                m_orderKey_5_b_old = "";
                fill_5_b = 0;
               
                if (checkBox5.Checked)
                {
                    buying_v = true;

                    rel_v_b = Convert.ToDecimal(textBox24.Text);
                    qtv_b = Convert.ToDecimal(textBox25.Text);

                    richTextBox1.AppendText(String.Format("\n buying button clicked for SR3 Mar24/ZQ Apr24 .net."));
                    pause_v_b = false;
                    qoute_stuck_side_v_b_1 = "";
                    qoute_stuck_side_v_b_2 = "";
                    qoute_stuck_price_v_b_1 = 0;
                    qoute_stuck_price_v_b_2 = 0;
                    partial_fill_v_b_1 = 0;
                    partial_fill_v_b_2 = 0;
                    m_childorderKey_v_b_1 = "";
                    m_childorderKey_v_b_2 = "";
                    m_orderKey_v_b = "";
                    m_orderKey_v_b_old = "";
                    fill_v_b = 0;
                    ratio_v = Convert.ToDecimal(textBox21.Text);

                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(559);
            }

        }

        private void button39_Click(object sender, EventArgs e)
        {
            //delete

            try
            {
                buying_5 = false;
                qouted_price_received_5_b = false;
                richTextBox1.AppendText("\nCancel buy for SR3 Mar24/Sr1 Apr24 .net CLICKED");

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);

                }
                m_orderKey_5_b = "";
                dataGridView2.Rows[28].Cells[5].Value = "-";
                dataGridView2.Rows[28].Cells[2].Value = "-";
                dataGridView2.Rows[28].Cells[3].Value = "-";
                dataGridView2.Rows[28].Cells[4].Value = "-";
                dataGridView2.Rows[28].Cells[6].Value = "-";
                fill_5_b = 0;
                qoute_stuck_side_5_b_1 = "";
                qoute_stuck_side_5_b_2 = "";
                qoute_stuck_price_5_b_1 = 0;
                qoute_stuck_price_5_b_2 = 0;
                m_childorderKey_5_b_1 = "";
                m_childorderKey_5_b_2 = "";
                partial_fill_5_b_1 = 0;
                partial_fill_5_b_2 = 0;

                m_orderKey_5_b_old = "";
                m_hedgeorderKey_5_b_1 = "";
                m_hedgeorderKey_5_b_2 = "";
                qt5_b = 0;
                rel_5_b = 0;
                new_reload_5_b = false;
                change_5_b = false;

                if (checkBox5.Checked)
                {
                    buying_v = false;
                    qouted_price_received_v_b = false;
                    richTextBox1.AppendText("\nCancel buy for SR3Mar24/ZQ Apr24 .net CLICKED");

                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);

                    }
                    m_orderKey_v_b = "";
                    dataGridView2.Rows[30].Cells[5].Value = "-";
                    dataGridView2.Rows[30].Cells[2].Value = "-";
                    dataGridView2.Rows[30].Cells[3].Value = "-";
                    dataGridView2.Rows[30].Cells[4].Value = "-";
                    dataGridView2.Rows[30].Cells[6].Value = "-";
                    fill_v_b = 0;
                    qoute_stuck_side_v_b_1 = "";
                    qoute_stuck_side_v_b_2 = "";
                    qoute_stuck_price_v_b_1 = 0;
                    qoute_stuck_price_v_b_2 = 0;
                    m_childorderKey_v_b_1 = "";
                    m_childorderKey_v_b_2 = "";
                    partial_fill_v_b_1 = 0;
                    partial_fill_v_b_2 = 0;
                    m_orderKey_v_b_old = "";
                    m_hedgeorderKey_v_b_1 = "";
                    m_hedgeorderKey_v_b_2 = "";
                    qtv_b = 0;
                    rel_v_b = 0;
                    new_reload_v_b = false;
                    change_v_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(560);
            }
        }

        private void button44_Click(object sender, EventArgs e)
        {
            //pause
            try
            {
                richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Mar24/Sr1 Apr24 .net");
                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                    pause_5_b = true;
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                    pause_5_b = true;
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                    pause_5_b = true;
                }

                m_childorderKey_5_b_1 = "";
                m_childorderKey_5_b_2 = "";
                if (checkBox5.Checked)
                {
                    richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Mar24/ZQ Apr24 .net");
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                        pause_v_b = true;
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                        pause_v_b = true;
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                        pause_v_b = true;
                    }

                    m_childorderKey_v_b_1 = "";
                    m_childorderKey_v_b_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(561);
            }
        }

        private void button43_Click(object sender, EventArgs e)
        {
            //play
            try
            {
                richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Mar24/Sr1 Apr24 .net");
                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                }
                pause_5_b = false;
                if (checkBox5.Checked)
                {
                    richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Mar24/ZQ Apr24 .net");
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                    }
                    pause_v_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(562);
            }
        }
        //selling mar apr
        private void button38_Click(object sender, EventArgs e)
        {
            //sell
            try
            {
                button37.PerformClick();
                user_price_5_s = Price.FromDecimal(instrument, Convert.ToDecimal(textBox23.Text));
                allowed_5 = true;
                selling_5 = true;
                ratio_5 = Convert.ToDecimal(textBox22.Text);
                qt5_s = Convert.ToDecimal(textBox25.Text);
                rel_5_s = Convert.ToDecimal(textBox24.Text);
                richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Mar24/Sr1 Apr24.net."));
                pause_5_s = false;
                qoute_stuck_side_5_s_1 = "";
                qoute_stuck_side_5_s_2 = "";
                qoute_stuck_price_5_s_1 = 0;
                qoute_stuck_price_5_s_2 = 0;
                partial_fill_5_s_1 = 0;
                partial_fill_5_s_2 = 0;
                m_childorderKey_5_s_1 = "";
                m_childorderKey_5_s_2 = "";
                m_orderKey_5_s = "";
                m_orderKey_5_s_old = "";
                fill_5_s = 0;
                if (checkBox5.Checked)
                {
                    selling_v = true;

                    qtv_s = Convert.ToDecimal(textBox25.Text);
                    rel_v_s = Convert.ToDecimal(textBox24.Text);
                    richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Mar24/ZQ Apr24.net."));
                    pause_v_s = false;
                    qoute_stuck_side_v_s_1 = "";
                    qoute_stuck_side_v_s_2 = "";
                    qoute_stuck_price_v_s_1 = 0;
                    qoute_stuck_price_v_s_2 = 0;
                    partial_fill_v_s_1 = 0;
                    partial_fill_v_s_2 = 0;
                    m_childorderKey_v_s_1 = "";
                    m_childorderKey_v_s_2 = "";
                    m_orderKey_v_s = "";
                    m_orderKey_v_s_old = "";
                    fill_v_s = 0;
                    ratio_v = Convert.ToDecimal(textBox21.Text);
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(563);
            }
        }

        private void button37_Click(object sender, EventArgs e)
        {
            //delete
            try
            {
                selling_5 = false;
                qouted_price_received_5_s = false;
                richTextBox1.AppendText("\nCancel sell for SR3 Mar24/Sr1 Apr24 .net  CLICKED");

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);

                }
                qoute_stuck_side_5_s_1 = "";
                qoute_stuck_side_5_s_2 = "";
                qoute_stuck_price_5_s_1 = 0;
                qoute_stuck_price_5_s_2 = 0;
                m_orderKey_5_s = "";
                dataGridView2.Rows[29].Cells[5].Value = "-";
                dataGridView2.Rows[29].Cells[2].Value = "-";
                dataGridView2.Rows[29].Cells[3].Value = "-";
                dataGridView2.Rows[29].Cells[4].Value = "-";
                dataGridView2.Rows[29].Cells[6].Value = "-";
                fill_5_s = 0;
                partial_fill_5_s_1 = 0;
                partial_fill_5_s_2 = 0;
                m_childorderKey_5_s_1 = "";
                m_childorderKey_5_s_2 = "";
                m_orderKey_5_s_old = "";
                m_hedgeorderKey_5_s_1 = "";
                m_hedgeorderKey_5_s_2 = "";
                qt5_s = 0;
                rel_5_s = 0;
                new_reload_5_s = false;
                change_5_s = false;
                if (checkBox5.Checked)
                {
                    selling_v = false;
                    qouted_price_received_v_s = false;
                    richTextBox1.AppendText("\nCancel sell for SR3 Mar24/ZQ Apr24 .net  CLICKED");

                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);

                    }
                    qoute_stuck_side_v_s_1 = "";
                    qoute_stuck_side_v_s_2 = "";
                    qoute_stuck_price_v_s_1 = 0;
                    qoute_stuck_price_v_s_2 = 0;
                    m_orderKey_v_s = "";
                    dataGridView2.Rows[31].Cells[5].Value = "-";
                    dataGridView2.Rows[31].Cells[2].Value = "-";
                    dataGridView2.Rows[31].Cells[3].Value = "-";
                    dataGridView2.Rows[31].Cells[4].Value = "-";
                    dataGridView2.Rows[31].Cells[6].Value = "-";
                    fill_v_s = 0;

                    m_childorderKey_v_s_1 = "";
                    m_childorderKey_v_s_2 = "";
                    partial_fill_v_s_1 = 0;
                    partial_fill_v_s_2 = 0;

                    m_orderKey_v_s_old = "";
                    m_hedgeorderKey_v_s_1 = "";
                    m_hedgeorderKey_v_s_2 = "";
                    qtv_s = 0;
                    rel_v_s = 0;
                    new_reload_v_s = false;
                    change_v_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(564);
            }
        }

        private void button42_Click(object sender, EventArgs e)
        {
            
            //pause
            try
            {
                richTextBox1.AppendText("\nPause SELL Button clicked for SR3 Mar24/Sr1 Apr24 .net");
                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                    pause_5_s = true;
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                    pause_5_s = true;
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                    pause_5_s = true;
                }
                m_childorderKey_5_s_1 = "";
                m_childorderKey_5_s_2 = "";
                if (checkBox5.Checked)
                {
                    richTextBox1.AppendText("\nPause SELL Button clicked for SR3 Mar24/ZQ Apr24 .net");
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                        pause_v_s = true;
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                        pause_v_s = true;
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                        pause_v_s = true;
                    }
                    m_childorderKey_v_s_1 = "";
                    m_childorderKey_v_s_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(565);
            }
        }

        private void button41_Click(object sender, EventArgs e)
        {
            //play
            try
            {
                richTextBox1.AppendText("\nUNPause SELL Button clicked for SR3 Mar24/Sr1 Apr24 .net");
                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                }
                pause_5_s = false;
                if (checkBox5.Checked)
                {
                    richTextBox1.AppendText("\nUNPause SELL Button clicked for SR3 Mar24/ZQ Apr24 .net");
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                    }
                    pause_v_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(566);
            }
        }
        //buying mar may
        private void button48_Click(object sender, EventArgs e)
        {
            //buy
            try
            {

                button47.PerformClick();

                decimal x = Decimal.Parse(textBox28.Text);
                x /= 100;
                user_price_6_b = Price.FromString(instrument, x.ToString());
               
                allowed_6 = true;
                buying_6 = true;

                ratio_6 = Convert.ToDecimal(textBox27.Text);
                qt6_b = Convert.ToDecimal(textBox30.Text);
                rel_6_b = Convert.ToDecimal(textBox29.Text);
                richTextBox1.AppendText(String.Format("\n buying button clicked for sr3-sr1 MAR-MAY.{0}", rel_6_b,user_price_6_b));
                pause_6_b = false;
                qoute_stuck_side_6_b_1 = "";
                qoute_stuck_side_6_b_2 = "";
                qoute_stuck_price_6_b_1 = 0;
                qoute_stuck_price_6_b_2 = 0;
                partial_fill_6_b_1 = 0;
                partial_fill_6_b_2 = 0;
                m_childorderKey_6_b_1 = "";
                m_childorderKey_6_b_2 = "";
                m_orderKey_6_b = "";
                m_orderKey_6_b_old = "";
                fill_6_b = 0;
                if (checkBox6.Checked)
                {
                    buying_vi = true;


                    qtvi_b = Convert.ToDecimal(textBox30.Text);
                    rel_vi_b = Convert.ToDecimal(textBox29.Text);
                    richTextBox1.AppendText(String.Format("\n buying button clicked for sr3-zq mar-may.{0}", rel_vi_b));
                    pause_vi_b = false;
                    qoute_stuck_side_vi_b_1 = "";
                    qoute_stuck_side_vi_b_2 = "";
                    qoute_stuck_price_vi_b_1 = 0;
                    qoute_stuck_price_vi_b_2 = 0;
                    partial_fill_vi_b_1 = 0;
                    partial_fill_vi_b_2 = 0;
                    m_childorderKey_vi_b_1 = "";
                    m_childorderKey_vi_b_2 = "";
                    m_orderKey_vi_b = "";
                    m_orderKey_vi_b_old = "";
                    fill_vi_b = 0;
                    ratio_vi = Convert.ToDecimal(textBox26.Text);
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(567);
            }
        }

        private void button47_Click(object sender, EventArgs e)
        {
            //delete
            try
            {
                buying_6 = false;
                qouted_price_received_6_b = false;
                richTextBox1.AppendText("\nCancel buy for SR3 Mar24/Sr1 May24.net CLICKED");

                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);

                }
                fill_6_b = 0;
                qoute_stuck_side_6_b_1 = "";
                qoute_stuck_side_6_b_2 = "";
                qoute_stuck_price_6_b_1 = 0;
                qoute_stuck_price_6_b_2 = 0;
                m_orderKey_6_b = "";
                dataGridView2.Rows[32].Cells[5].Value = "-";
                dataGridView2.Rows[32].Cells[2].Value = "-";
                dataGridView2.Rows[32].Cells[3].Value = "-";
                dataGridView2.Rows[32].Cells[4].Value = "-";
                dataGridView2.Rows[32].Cells[6].Value = "-";

                m_childorderKey_6_b_1 = "";
                m_childorderKey_6_b_2 = "";
                partial_fill_6_b_1 = 0;
                partial_fill_6_b_2 = 0;
                m_orderKey_6_b_old = "";
                m_hedgeorderKey_6_b_1 = "";
                m_hedgeorderKey_6_b_2 = "";
                qt6_b = 0;
                rel_6_b = 0;
                new_reload_6_b = false;
                change_6_b = false;
                if (checkBox6.Checked)
                {
                    buying_vi = false;
                    qouted_price_received_vi_b = false;
                    richTextBox1.AppendText("\nCancel buy for SR3 Mar24/ZQ May24 .net CLICKED");

                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);

                    }
                    fill_vi_b = 0;
                    qoute_stuck_side_vi_b_1 = "";
                    qoute_stuck_side_vi_b_2 = "";
                    qoute_stuck_price_vi_b_1 = 0;
                    qoute_stuck_price_vi_b_2 = 0;
                    m_orderKey_vi_b = "";
                    dataGridView2.Rows[22].Cells[5].Value = "-";
                    dataGridView2.Rows[22].Cells[2].Value = "-";
                    dataGridView2.Rows[22].Cells[3].Value = "-";
                    dataGridView2.Rows[22].Cells[4].Value = "-";
                    dataGridView2.Rows[22].Cells[6].Value = "-";

                    m_childorderKey_vi_b_1 = "";
                    m_childorderKey_vi_b_2 = "";
                    partial_fill_vi_b_1 = 0;
                    partial_fill_vi_b_2 = 0;

                    m_orderKey_vi_b_old = "";
                    m_hedgeorderKey_vi_b_1 = "";
                    m_hedgeorderKey_vi_b_2 = "";
                    qtvi_b = 0;
                    rel_vi_b = 0;
                    new_reload_vi_b = false;
                    change_vi_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(568);
            }
        }

        private void button52_Click(object sender, EventArgs e)
        {
            //pause
            try
            {
                richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Mar24/Sr1 May24 .net");
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                    pause_6_b = true;
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                    pause_6_b = true;
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                    pause_6_b = true;
                }
                m_childorderKey_6_b_1 = "";
                m_childorderKey_6_b_2 = "";
                if (checkBox6.Checked)
                {
                    richTextBox1.AppendText("\nPause BUY Button clicked for SR3 Mar24/zq May24 .net");
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                        pause_vi_b = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                        pause_vi_b = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                        pause_vi_b = true;
                    }
                    m_childorderKey_vi_b_1 = "";
                    m_childorderKey_vi_b_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(569);
            }
        }

        private void button51_Click(object sender, EventArgs e)
        {
            //play
            try
            {
                richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Mar24/Sr1 May24 .net");
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                }
                pause_6_b = false;
                if (checkBox6.Checked)
                {
                    richTextBox1.AppendText("\nUNPause BUY Button clicked for SR3 Mar24/zq May24 .net");
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                    }
                    pause_vi_b = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(570);
            }
        }
        //selling mar may
        private void button46_Click(object sender, EventArgs e)
        {
            try
            {

                button45.PerformClick();
                decimal x = Decimal.Parse(textBox28.Text);
                x = x / 100;

                user_price_6_s = Price.FromString(instrument, x.ToString());

                allowed_6 = true;
                selling_6 = true;
                ratio_6 = Convert.ToDecimal(textBox27.Text);

                qt6_s = Convert.ToDecimal(textBox30.Text);
                rel_6_s = Convert.ToDecimal(textBox29.Text);
                richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Mar24/Sr1 May24 .net {0} {1}.", user_price_6_s, x));
                pause_6_s = false;
                qoute_stuck_side_6_s_1 = "";
                qoute_stuck_side_6_s_2 = "";
                qoute_stuck_price_6_s_1 = 0;
                qoute_stuck_price_6_s_2 = 0;
                partial_fill_6_s_1 = 0;
                partial_fill_6_s_2 = 0;
                m_childorderKey_6_s_1 = "";
                m_childorderKey_6_s_2 = "";
                m_orderKey_6_s = "";
                m_orderKey_6_s_old = "";
                fill_6_s = 0;
                if (checkBox6.Checked)
                {
                    selling_vi = true;

                    qtvi_s = Convert.ToDecimal(textBox30.Text);
                    rel_vi_s = Convert.ToDecimal(textBox29.Text);
                    richTextBox1.AppendText(String.Format("\n selling button clicked for SR3 Mar24/ZQ May24 .net ."));
                    pause_vi_s = false;
                    qoute_stuck_side_vi_s_1 = "";
                    qoute_stuck_side_vi_s_2 = "";
                    qoute_stuck_price_vi_s_1 = 0;
                    qoute_stuck_price_vi_s_2 = 0;
                    partial_fill_vi_s_1 = 0;
                    partial_fill_vi_s_2 = 0;
                    m_childorderKey_vi_s_1 = "";
                    m_childorderKey_vi_s_2 = "";
                    m_orderKey_vi_s = "";
                    m_orderKey_vi_s_old = "";
                    fill_vi_s = 0;
                    ratio_vi = Convert.ToDecimal(textBox26.Text);

                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(571);
            }
            //sell
        }

        private void button45_Click(object sender, EventArgs e)
        {
            //delete
            try
            {
                selling_6 = false;
                qouted_price_received_6_s = false;
                richTextBox1.AppendText("\nCancel sell for SR3 Mar24/Sr1 May24 .net CLICKED");

                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);

                }
                qoute_stuck_side_6_s_1 = "";
                qoute_stuck_side_6_s_2 = "";
                qoute_stuck_price_6_s_1 = 0;
                qoute_stuck_price_6_s_2 = 0;
                m_orderKey_6_s = "";

                dataGridView2.Rows[33].Cells[5].Value = "-";
                dataGridView2.Rows[33].Cells[2].Value = "-";
                dataGridView2.Rows[33].Cells[3].Value = "-";
                dataGridView2.Rows[33].Cells[4].Value = "-";
                dataGridView2.Rows[33].Cells[6].Value = "-";
                fill_6_s = 0;

                m_childorderKey_6_s_1 = "";
                m_childorderKey_6_s_2 = "";
                partial_fill_6_s_1 = 0;
                partial_fill_6_s_2 = 0;

                m_orderKey_6_s_old = "";
                m_hedgeorderKey_6_s_1 = "";
                m_hedgeorderKey_6_s_2 = "";
                qt6_s = 0;
                rel_6_s = 0;
                new_reload_6_s = false;
                change_6_s = false;
                if (checkBox6.Checked)
                {
                    selling_vi = false;
                    qouted_price_received_vi_s = false;
                    richTextBox1.AppendText("\nCancel sell for SR3 Mar24/zq May24 .net CLICKED");

                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_s))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_s))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_s))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);

                    }
                    qoute_stuck_side_vi_s_1 = "";
                    qoute_stuck_side_vi_s_2 = "";
                    qoute_stuck_price_vi_s_1 = 0;
                    qoute_stuck_price_vi_s_2 = 0;
                    m_orderKey_vi_s = "";

                    dataGridView2.Rows[35].Cells[5].Value = "-";
                    dataGridView2.Rows[35].Cells[2].Value = "-";
                    dataGridView2.Rows[35].Cells[3].Value = "-";
                    dataGridView2.Rows[35].Cells[4].Value = "-";
                    dataGridView2.Rows[35].Cells[6].Value = "-";
                    fill_vi_s = 0;

                    m_childorderKey_vi_s_1 = "";
                    m_childorderKey_vi_s_2 = "";
                    partial_fill_vi_s_1 = 0;
                    partial_fill_vi_s_2 = 0;
                    m_orderKey_vi_s_old = "";
                    m_hedgeorderKey_vi_s_1 = "";
                    m_hedgeorderKey_vi_s_2 = "";
                    qtvi_s = 0;
                    rel_vi_s = 0;
                    new_reload_vi_s = false;
                    change_vi_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(572);
            }
        }

        private void button50_Click(object sender, EventArgs e)
        {
            //pause
            try
            {
                //pause
                richTextBox1.AppendText("\nPause sell Button clicked for SR3 Mar24/Sr1 May24 .net");
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                    pause_6_s = true;
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                    pause_6_s = true;
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                    pause_6_s = true;
                }
                m_childorderKey_6_s_1 = "";
                m_childorderKey_6_s_2 = "";
                if (checkBox6.Checked)
                {
                    richTextBox1.AppendText("\nPause sell Button clicked for SR3 Mar24/zq May24 .net");
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                        pause_vi_s = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                        pause_vi_s = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                        pause_vi_s = true;
                    }
                    m_childorderKey_vi_s_1 = "";
                    m_childorderKey_vi_s_2 = "";
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(573);
            }
        }

        private void button49_Click(object sender, EventArgs e)
        {
            //play
            try
            {
                richTextBox1.AppendText("\nUNPause sell Button clicked for SR3 Mar24/Sr1 May24 .net");
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                }
                pause_6_s = false;
                if (checkBox6.Checked)
                {
                    richTextBox1.AppendText("\nUNPause sell Button clicked for SR3 Mar24/zq May24 .net");
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                    }
                    pause_vi_s = false;
                }
            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(574);
            }
        }
        private void button17_Click(object sender, EventArgs e)
        {
            try { 
            //PAUSE ALL
            richTextBox1.AppendText("\nPause ALL Button clicked ");
            if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_1.SendOrder(op);
                pause_1_b = true;
            }
            if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_1_a1.SendOrder(op);
                pause_1_b = true;
            }
            if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_1_a2.SendOrder(op);
                pause_1_b = true;
            }
            if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_1.SendOrder(op);
                pause_1_s = true;
            }
            if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_1_a1.SendOrder(op);
                pause_1_s = true;
            }
            if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_1_a2.SendOrder(op);
                pause_1_s = true;
            }
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2.SendOrder(op);
                pause_2_b = true;
            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
                pause_2_b = true;
            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
                pause_2_b = true;
            }
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2.SendOrder(op);
                pause_2_s = true;
            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
                pause_2_s = true;
            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
                pause_2_s = true;
            }
            m_childorderKey_b_1 = "";
            m_childorderKey_b_2 = "";
            m_childorderKey_s_1 = "";
            m_childorderKey_s_2 = "";
            m_childorderKey_1_b_1 = "";
            m_childorderKey_1_b_2 = "";
            m_childorderKey_1_s_1 = "";
            m_childorderKey_1_s_2 = "";
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3.SendOrder(op);
                pause_3_b = true;
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
                pause_3_b = true;
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
                pause_3_b = true;
            }

            m_childorderKey_3_b_1 = "";
            m_childorderKey_3_b_2 = "";
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3.SendOrder(op);
                pause_3_s = true;
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
                pause_3_s = true;
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
                pause_3_s = true;
            }
            m_childorderKey_3_s_1 = "";
            m_childorderKey_3_s_2 = "";
            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4.SendOrder(op);
                pause_4_b = true;
            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);
                pause_4_b = true;
            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);
                pause_4_b = true;
            }
            m_childorderKey_4_b_1 = "";
            m_childorderKey_4_b_2 = "";
            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4.SendOrder(op);
                pause_4_s = true;
            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);
                pause_4_s = true;
            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);
                pause_4_s = true;
            }
            m_childorderKey_4_s_1 = "";
            m_childorderKey_4_s_2 = "";
            if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_i.SendOrder(op);
                pause_i_b = true;
            }
            if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_i_a1.SendOrder(op);
                pause_i_b = true;
            }
            if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_i_a2.SendOrder(op);
                pause_i_b = true;
            }

            m_childorderKey_i_b_1 = "";
            m_childorderKey_i_b_2 = "";
            if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_i.SendOrder(op);
                pause_i_s = true;
            }
            if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_i_a1.SendOrder(op);
                pause_i_s = true;
            }
            if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_i_a2.SendOrder(op);
                pause_i_s = true;
            }
            m_childorderKey_i_s_1 = "";
            m_childorderKey_i_s_2 = "";
            if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_ii.SendOrder(op);
                pause_ii_b = true;
            }
            if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_ii_a1.SendOrder(op);
                pause_ii_b = true;
            }
            if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_ii_a2.SendOrder(op);
                pause_ii_b = true;
            }
            m_childorderKey_ii_b_1 = "";
            m_childorderKey_ii_b_2 = "";
            if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_ii.SendOrder(op);
                pause_ii_s = true;
            }
            if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_ii_a1.SendOrder(op);
                pause_ii_s = true;
            }
            if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_ii_a2.SendOrder(op);
                pause_ii_s = true;
            }
            m_childorderKey_ii_s_1 = "";
            m_childorderKey_ii_s_2 = "";
            if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iii.SendOrder(op);
                pause_iii_b = true;
            }
            if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iii_a1.SendOrder(op);
                pause_iii_b = true;
            }
            if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iii_a2.SendOrder(op);
                pause_iii_b = true;
            }

            m_childorderKey_iii_b_1 = "";
            m_childorderKey_iii_b_2 = "";
            if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iii.SendOrder(op);
                pause_iii_s = true;
            }
            if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iii_a1.SendOrder(op);
                pause_iii_s = true;
            }
            if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iii_a2.SendOrder(op);
                pause_iii_s = true;
            }
            m_childorderKey_iii_s_1 = "";
            m_childorderKey_iii_s_2 = "";
            if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iv.SendOrder(op);
                pause_iv_b = true;
            }
            if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iv_a1.SendOrder(op);
                pause_iv_b = true;
            }
            if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iv_a2.SendOrder(op);
                pause_iv_b = true;
            }
            m_childorderKey_iv_b_1 = "";
            m_childorderKey_iv_b_2 = "";
            if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iv.SendOrder(op);
                pause_iv_s = true;
            }
            if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iv_a1.SendOrder(op);
                pause_iv_s = true;
            }
            if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Hold;
                m_instrumentTradeSubscription_iv_a2.SendOrder(op);
                pause_iv_s = true;
            }
            m_childorderKey_iv_s_1 = "";
            m_childorderKey_iv_s_2 = "";

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                    pause_5_b = true;
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                    pause_5_b = true;
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                    pause_5_b = true;
                }

                m_childorderKey_5_b_1 = "";
                m_childorderKey_5_b_2 = "";
                
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                        pause_v_b = true;
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                        pause_v_b = true;
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                        pause_v_b = true;
                    }

                    m_childorderKey_v_b_1 = "";
                    m_childorderKey_v_b_2 = "";

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                    pause_5_s = true;
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                    pause_5_s = true;
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                    pause_5_s = true;
                }
                m_childorderKey_5_s_1 = "";
                m_childorderKey_5_s_2 = "";
               
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                        pause_v_s = true;
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                        pause_v_s = true;
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                        pause_v_s = true;
                    }
                    m_childorderKey_v_s_1 = "";
                    m_childorderKey_v_s_2 = "";

                
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                    pause_6_b = true;
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                    pause_6_b = true;
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                    pause_6_b = true;
                }
                m_childorderKey_6_b_1 = "";
                m_childorderKey_6_b_2 = "";
               
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                        pause_vi_b = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                        pause_vi_b = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                        pause_vi_b = true;
                    }
                    m_childorderKey_vi_b_1 = "";
                    m_childorderKey_vi_b_2 = "";
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                    pause_6_s = true;
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                    pause_6_s = true;
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Hold;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                    pause_6_s = true;
                }
                m_childorderKey_6_s_1 = "";
                m_childorderKey_6_s_2 = "";
              
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                        pause_vi_s = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                        pause_vi_s = true;
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Hold;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                        pause_vi_s = true;
                    }
                    m_childorderKey_vi_s_1 = "";
                    m_childorderKey_vi_s_2 = "";
                }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(556);
            }
        }
        private void button18_Click_1(object sender, EventArgs e)
        {
            //UNPAUSE ALL
            try { 
            richTextBox1.AppendText("\nPLAY ALL Button clicked ");
            if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_1_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_1_a2.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_1_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_1_a2.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);
            }
            pause_1_b = false; pause_1_s = false;
            pause_2_b = false; pause_2_s = false;
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
            }
            pause_3_b = false;
            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);
            }
            pause_3_s = false;
            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);
            }
            pause_4_b = false;
            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);
            }
            pause_4_s = false;
            if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_i.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_i_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_i_a2.SendOrder(op);
            }
            pause_i_b = false;
            if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_i.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_i_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_i_a2.SendOrder(op);
            }
            pause_i_s = false;
            if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_ii.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_ii_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_ii_a2.SendOrder(op);
            }
            pause_ii_b = false;
            if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_ii.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_ii_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_ii_a2.SendOrder(op);
            }
            pause_ii_s = false;
            if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iii.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iii_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iii_a2.SendOrder(op);
            }
            pause_iii_b = false;
            if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iii.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iii_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iii_a2.SendOrder(op);
            }
            pause_iii_s = false;
            if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iv.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iv_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iv_a2.SendOrder(op);
            }
            pause_iv_b = false;
            if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iv.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iv_a1.SendOrder(op);
            }
            if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Resubmit;
                m_instrumentTradeSubscription_iv_a2.SendOrder(op);
            }
            pause_iv_s = false;


                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                }
                pause_5_b = false;
              
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                    }
                    pause_v_b = false;

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);
                }
                pause_5_s = false;
               
                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);
                    }
                    pause_v_s = false;
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                }
                pause_6_b = false;
              
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                    }
                    pause_vi_b = false;
                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);
                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Resubmit;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);
                }
                pause_6_s = false;
              
                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);
                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Resubmit;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);
                    }
                    pause_vi_s = false;
                }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(557);
            }
        }

        private void button19_Click(object sender, EventArgs e)
        {
            //delete all
            try { 
            richTextBox1.AppendText("\nCancel ALL  CLICKED");
            dataGridView1.Rows.Clear();

            buying_1 = false;
            qouted_price_received_b = false;
            if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_1_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_1_a2.SendOrder(op);

            }
            m_orderKey_b = "";

            selling_1 = false;
            qouted_price_received_s = false;
            if (m_instrumentTradeSubscription_1.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_1_a1.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a1.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_1_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_1_a2.Orders.ContainsKey(m_orderKey_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_1_a2.Orders[m_orderKey_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_1_a2.SendOrder(op);

            }
            m_orderKey_s = "";

            buying_2 = false;
            qouted_price_received_2_b = false;
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);

            }
            m_orderKey_1_b = "";


            selling_2 = false;
            qouted_price_received_2_s = false;
            if (m_instrumentTradeSubscription_2.Orders.ContainsKey(m_orderKey_1_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_2_a1.Orders.ContainsKey(m_orderKey_1_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_2_a1.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_2_a2.Orders.ContainsKey(m_orderKey_1_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_2_a2.Orders[m_orderKey_1_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_2_a2.SendOrder(op);

            }
            m_childorderKey_b_1 = "";
            m_childorderKey_b_2 = "";
            m_childorderKey_s_1 = "";
            m_childorderKey_s_2 = "";
            m_childorderKey_1_b_1 = "";
            m_childorderKey_1_b_2 = "";
            m_childorderKey_1_s_1 = "";
            m_childorderKey_1_s_2 = "";
            qoute_stuck_side_s_1 = "";
            qoute_stuck_side_s_2 = "";
            qoute_stuck_price_s_1 = 0;
            qoute_stuck_price_s_2 = 0;
            qoute_stuck_side_b_1 = "";
            qoute_stuck_side_b_2 = "";
            qoute_stuck_price_b_1 = 0;
            qoute_stuck_price_b_2 = 0;
            qoute_stuck_side_1_b_1 = "";
            qoute_stuck_side_b_2 = "";
            qoute_stuck_price_1_b_1 = 0;
            qoute_stuck_price_1_b_2 = 0;
            qoute_stuck_side_1_s_1 = "";
            qoute_stuck_side_1_s_2 = "";
            qoute_stuck_price_1_s_1 = 0;
            qoute_stuck_price_1_s_2 = 0;
            m_orderKey_1_s = "";
            dataGridView2.Rows[12].Cells[5].Value = "-";
            dataGridView2.Rows[12].Cells[2].Value = "-";
            dataGridView2.Rows[12].Cells[3].Value = "-";
            dataGridView2.Rows[12].Cells[4].Value = "-";
            dataGridView2.Rows[12].Cells[6].Value = "-";
            dataGridView2.Rows[13].Cells[5].Value = "-";
            dataGridView2.Rows[13].Cells[2].Value = "-";
            dataGridView2.Rows[13].Cells[3].Value = "-";
            dataGridView2.Rows[13].Cells[4].Value = "-";
            dataGridView2.Rows[13].Cells[6].Value = "-";
            dataGridView2.Rows[16].Cells[5].Value = "-";
            dataGridView2.Rows[16].Cells[2].Value = "-";
            dataGridView2.Rows[16].Cells[3].Value = "-";
            dataGridView2.Rows[16].Cells[4].Value = "-";
            dataGridView2.Rows[16].Cells[6].Value = "-";
            dataGridView2.Rows[17].Cells[5].Value = "-";
            dataGridView2.Rows[17].Cells[2].Value = "-";
            dataGridView2.Rows[17].Cells[3].Value = "-";
            dataGridView2.Rows[17].Cells[4].Value = "-";
            dataGridView2.Rows[17].Cells[6].Value = "-";
            pause_1_b = false;
            pause_1_s = false;
            pause_2_b = false;
            pause_2_s = false;
            fill_1_b = 0;
            fill_1_s = 0;
            fill_2_b = 0;
            fill_2_s = 0;



            buying_3 = false;
            qouted_price_received_3_b = false;

            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);

            }
            m_orderKey_3_b = "";
          
            fill_3_b = 0;
            qoute_stuck_side_3_b_1 = "";
            qoute_stuck_side_3_b_2 = "";
            qoute_stuck_price_3_b_1 = 0;
            qoute_stuck_price_3_b_2 = 0;
            m_childorderKey_3_b_1 = "";
            m_childorderKey_3_b_2 = "";

            selling_3 = false;
            qouted_price_received_3_s = false;


            if (m_instrumentTradeSubscription_3.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a1.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a1.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_3_a2.Orders.ContainsKey(m_orderKey_3_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_3_a2.Orders[m_orderKey_3_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_3_a2.SendOrder(op);

            }
            qoute_stuck_side_3_s_1 = "";
            qoute_stuck_side_3_s_2 = "";
            qoute_stuck_price_3_s_1 = 0;
            qoute_stuck_price_3_s_2 = 0;
            m_orderKey_3_s = "";
          
            fill_3_s = 0;

            m_childorderKey_3_s_1 = "";
            m_childorderKey_3_s_2 = "";

            buying_4 = false;
            qouted_price_received_4_b = false;


            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);

            }
            fill_4_b = 0;
            qoute_stuck_side_4_b_1 = "";
            qoute_stuck_side_4_b_2 = "";
            qoute_stuck_price_4_b_1 = 0;
            qoute_stuck_price_4_b_2 = 0;
            m_orderKey_4_b = "";
            dataGridView2.Rows[35].Cells[5].Value = "-";
            dataGridView2.Rows[35].Cells[2].Value = "-";
            dataGridView2.Rows[35].Cells[3].Value = "-";
            dataGridView2.Rows[35].Cells[4].Value = "-";
            dataGridView2.Rows[35].Cells[6].Value = "-";

            m_childorderKey_4_b_1 = "";
            m_childorderKey_4_b_2 = "";

            selling_4 = false;
            qouted_price_received_4_s = false;

            if (m_instrumentTradeSubscription_4.Orders.ContainsKey(m_orderKey_4_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_4.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a1.Orders.ContainsKey(m_orderKey_4_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a1.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_4_a2.Orders.ContainsKey(m_orderKey_4_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_4_a2.Orders[m_orderKey_4_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_4_a2.SendOrder(op);

            }
            qoute_stuck_side_4_s_1 = "";
            qoute_stuck_side_4_s_2 = "";
            qoute_stuck_price_4_s_1 = 0;
            qoute_stuck_price_4_s_2 = 0;
            m_orderKey_4_s = "";

            dataGridView2.Rows[33].Cells[5].Value = "-";
            dataGridView2.Rows[33].Cells[2].Value = "-";
            dataGridView2.Rows[33].Cells[3].Value = "-";
            dataGridView2.Rows[33].Cells[4].Value = "-";
            dataGridView2.Rows[33].Cells[6].Value = "-";
            fill_4_s = 0;

            m_childorderKey_4_s_1 = "";
            m_childorderKey_4_s_2 = "";
            buying_i = false;
            qouted_price_received_i_b = false;
           

            if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_i.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_i_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_i_a2.SendOrder(op);

            }
            m_orderKey_i_b = "";
            dataGridView2.Rows[14].Cells[5].Value = "-";
            dataGridView2.Rows[14].Cells[2].Value = "-";
            dataGridView2.Rows[14].Cells[3].Value = "-";
            dataGridView2.Rows[14].Cells[4].Value = "-";
            dataGridView2.Rows[14].Cells[6].Value = "-";
            fill_i_b = 0;
            qoute_stuck_side_i_b_1 = "";
            qoute_stuck_side_i_b_2 = "";
            qoute_stuck_price_i_b_1 = 0;
            qoute_stuck_price_i_b_2 = 0;
            m_childorderKey_i_b_1 = "";
            m_childorderKey_i_b_2 = "";
            selling_i = false;
            qouted_price_received_i_s = false;
           

            if (m_instrumentTradeSubscription_i.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_i.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_i_a1.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a1.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_i_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_i_a2.Orders.ContainsKey(m_orderKey_i_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_i_a2.Orders[m_orderKey_i_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_i_a2.SendOrder(op);

            }
            qoute_stuck_side_i_s_1 = "";
            qoute_stuck_side_i_s_2 = "";
            qoute_stuck_price_i_s_1 = 0;
            qoute_stuck_price_i_s_2 = 0;
            m_orderKey_i_s = "";
            dataGridView2.Rows[15].Cells[5].Value = "-";
            dataGridView2.Rows[15].Cells[2].Value = "-";
            dataGridView2.Rows[15].Cells[3].Value = "-";
            dataGridView2.Rows[15].Cells[4].Value = "-";
            dataGridView2.Rows[15].Cells[6].Value = "-";
            fill_i_s = 0;

            m_childorderKey_i_s_1 = "";
            m_childorderKey_i_s_2 = "";

            buying_ii = false;
            qouted_price_received_ii_b = false;
           

            if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_ii.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_ii_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_ii_a2.SendOrder(op);

            }
            fill_ii_b = 0;
            qoute_stuck_side_ii_b_1 = "";
            qoute_stuck_side_ii_b_2 = "";
            qoute_stuck_price_ii_b_1 = 0;
            qoute_stuck_price_ii_b_2 = 0;
            m_orderKey_ii_b = "";
            dataGridView2.Rows[34].Cells[5].Value = "-";
            dataGridView2.Rows[34].Cells[2].Value = "-";
            dataGridView2.Rows[34].Cells[3].Value = "-";
            dataGridView2.Rows[34].Cells[4].Value = "-";
            dataGridView2.Rows[34].Cells[6].Value = "-";

            m_childorderKey_ii_b_1 = "";
            m_childorderKey_ii_b_2 = "";

            selling_ii = false;
            qouted_price_received_ii_s = false;
          

            if (m_instrumentTradeSubscription_ii.Orders.ContainsKey(m_orderKey_ii_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_ii.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_ii.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_ii_a1.Orders.ContainsKey(m_orderKey_ii_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_ii_a1.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_ii_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_ii_a2.Orders.ContainsKey(m_orderKey_ii_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_ii_a2.Orders[m_orderKey_ii_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_ii_a2.SendOrder(op);

            }
            qoute_stuck_side_ii_s_1 = "";
            qoute_stuck_side_ii_s_2 = "";
            qoute_stuck_price_ii_s_1 = 0;
            qoute_stuck_price_ii_s_2 = 0;
            m_orderKey_ii_s = "";

            dataGridView2.Rows[25].Cells[5].Value = "-";
            dataGridView2.Rows[25].Cells[2].Value = "-";
            dataGridView2.Rows[25].Cells[3].Value = "-";
            dataGridView2.Rows[25].Cells[4].Value = "-";
            dataGridView2.Rows[25].Cells[6].Value = "-";
            fill_ii_s = 0;

            m_childorderKey_ii_s_1 = "";
            m_childorderKey_ii_s_2 = "";

            buying_iii = false;
            qouted_price_received_iii_b = false;
           

            if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iii.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iii_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_b))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iii_a2.SendOrder(op);

            }
            m_orderKey_iii_b = "";
            dataGridView2.Rows[18].Cells[5].Value = "-";
            dataGridView2.Rows[18].Cells[2].Value = "-";
            dataGridView2.Rows[18].Cells[3].Value = "-";
            dataGridView2.Rows[18].Cells[4].Value = "-";
            dataGridView2.Rows[18].Cells[6].Value = "-";
            fill_iii_b = 0;
            qoute_stuck_side_iii_b_1 = "";
            qoute_stuck_side_iii_b_2 = "";
            qoute_stuck_price_iii_b_1 = 0;
            qoute_stuck_price_iii_b_2 = 0;
            m_childorderKey_iii_b_1 = "";
            m_childorderKey_iii_b_2 = "";
            selling_iii = false;
            qouted_price_received_iii_s = false;
           

            if (m_instrumentTradeSubscription_iii.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iii.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iii_a1.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a1.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iii_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iii_a2.Orders.ContainsKey(m_orderKey_iii_s))
            {
                OrderProfile op = m_instrumentTradeSubscription_iii_a2.Orders[m_orderKey_iii_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iii_a2.SendOrder(op);

            }
            qoute_stuck_side_iii_s_1 = "";
            qoute_stuck_side_iii_s_2 = "";
            qoute_stuck_price_iii_s_1 = 0;
            qoute_stuck_price_iii_s_2 = 0;
            m_orderKey_iii_s = "";
            dataGridView2.Rows[19].Cells[5].Value = "-";
            dataGridView2.Rows[19].Cells[2].Value = "-";
            dataGridView2.Rows[19].Cells[3].Value = "-";
            dataGridView2.Rows[19].Cells[4].Value = "-";
            dataGridView2.Rows[19].Cells[6].Value = "-";
            fill_iii_s = 0;

            m_childorderKey_iii_s_1 = "";
            m_childorderKey_iii_s_2 = "";
            buying_iv = false;
            qouted_price_received_iv_b = false;
            if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iv.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iv_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_b))
            {

                OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_b].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iv_a2.SendOrder(op);

            }
            fill_iv_b = 0;
            qoute_stuck_side_iv_b_1 = "";
            qoute_stuck_side_iv_b_2 = "";
            qoute_stuck_price_iv_b_1 = 0;
            qoute_stuck_price_iv_b_2 = 0;
            m_orderKey_iv_b = "";
            dataGridView2.Rows[22].Cells[5].Value = "-";
            dataGridView2.Rows[22].Cells[2].Value = "-";
            dataGridView2.Rows[22].Cells[3].Value = "-";
            dataGridView2.Rows[22].Cells[4].Value = "-";
            dataGridView2.Rows[22].Cells[6].Value = "-";

            dataGridView2.Rows[21].Cells[5].Value = "-";
            dataGridView2.Rows[21].Cells[2].Value = "-";
            dataGridView2.Rows[21].Cells[3].Value = "-";
            dataGridView2.Rows[21].Cells[4].Value = "-";
            dataGridView2.Rows[21].Cells[6].Value = "-";
            dataGridView2.Rows[20].Cells[5].Value = "-";
            dataGridView2.Rows[20].Cells[2].Value = "-";
            dataGridView2.Rows[20].Cells[3].Value = "-";
            dataGridView2.Rows[20].Cells[4].Value = "-";
            dataGridView2.Rows[20].Cells[6].Value = "-";

            m_childorderKey_iv_b_1 = "";
            m_childorderKey_iv_b_2 = "";


            selling_iv = false;
            qouted_price_received_iv_s = false;
          

            if (m_instrumentTradeSubscription_iv.Orders.ContainsKey(m_orderKey_iv_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_iv.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iv.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iv_a1.Orders.ContainsKey(m_orderKey_iv_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_iv_a1.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iv_a1.SendOrder(op);

            }
            if (m_instrumentTradeSubscription_iv_a2.Orders.ContainsKey(m_orderKey_iv_s))
            {

                OrderProfile op = m_instrumentTradeSubscription_iv_a2.Orders[m_orderKey_iv_s].GetOrderProfile();
                op.Action = OrderAction.Delete;
                m_instrumentTradeSubscription_iv_a2.SendOrder(op);

            }
            qoute_stuck_side_iv_s_1 = "";
            qoute_stuck_side_iv_s_2 = "";
            qoute_stuck_price_iv_s_1 = 0;
            qoute_stuck_price_iv_s_2 = 0;
            m_orderKey_iv_s = "";

            dataGridView2.Rows[23].Cells[5].Value = "-";
            dataGridView2.Rows[23].Cells[2].Value = "-";
            dataGridView2.Rows[23].Cells[3].Value = "-";
            dataGridView2.Rows[23].Cells[4].Value = "-";
            dataGridView2.Rows[23].Cells[6].Value = "-";
            fill_iv_s = 0;

            m_childorderKey_iv_s_1 = "";
            m_childorderKey_iv_s_2 = "";
            partial_fill_4_s_1 = 0;
            partial_fill_4_s_2 = 0;
            partial_fill_iv_s_1 = 0;
            partial_fill_iv_s_2 = 0;
            partial_fill_4_b_1 = 0;
            partial_fill_4_b_2 = 0;
            partial_fill_iv_b_1 = 0;
            partial_fill_iv_b_2 = 0;
            partial_fill_iii_s_1 = 0;
            partial_fill_iii_s_2 = 0;
            partial_fill_3_s_1 = 0;
            partial_fill_3_s_2 = 0;
            partial_fill_iii_b_1 = 0;
            partial_fill_iii_b_2 = 0;
            partial_fill_3_b_1 = 0;
            partial_fill_3_b_2 = 0;
            partial_fill_1_s_1 = 0;
            partial_fill_1_s_2 = 0;
            partial_fill_ii_s_1 = 0;
            partial_fill_ii_s_2 = 0;
            partial_fill_1_b_1 = 0;
            partial_fill_1_b_2 = 0;
            partial_fill_ii_b_1 = 0;
            partial_fill_ii_b_2 = 0;
            partial_fill_i_s_1 = 0;
            partial_fill_i_s_2 = 0;
            partial_fill_s_1 = 0;
            partial_fill_s_2 = 0;
            partial_fill_i_b_1 = 0;
            partial_fill_i_b_2 = 0;
            partial_fill_b_1 = 0;
            partial_fill_b_2 = 0;

                buying_5 = false;
                qouted_price_received_5_b = false;
               

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_b))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);

                }
                m_orderKey_5_b = "";
                dataGridView2.Rows[26].Cells[5].Value = "-";
                dataGridView2.Rows[26].Cells[2].Value = "-";
                dataGridView2.Rows[26].Cells[3].Value = "-";
                dataGridView2.Rows[26].Cells[4].Value = "-";
                dataGridView2.Rows[26].Cells[6].Value = "-";
                fill_5_b = 0;
                qoute_stuck_side_5_b_1 = "";
                qoute_stuck_side_5_b_2 = "";
                qoute_stuck_price_5_b_1 = 0;
                qoute_stuck_price_5_b_2 = 0;
                m_childorderKey_5_b_1 = "";
                m_childorderKey_5_b_2 = "";
                partial_fill_5_b_1 = 0;
                partial_fill_5_b_2 = 0;
              
                    buying_v = false;
                    qouted_price_received_v_b = false;
                    

                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_b))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);

                    }
                    m_orderKey_v_b = "";
                    dataGridView2.Rows[28].Cells[5].Value = "-";
                    dataGridView2.Rows[28].Cells[2].Value = "-";
                    dataGridView2.Rows[28].Cells[3].Value = "-";
                    dataGridView2.Rows[28].Cells[4].Value = "-";
                    dataGridView2.Rows[28].Cells[6].Value = "-";
                    fill_v_b = 0;
                    qoute_stuck_side_v_b_1 = "";
                    qoute_stuck_side_v_b_2 = "";
                    qoute_stuck_price_v_b_1 = 0;
                    qoute_stuck_price_v_b_2 = 0;
                    m_childorderKey_v_b_1 = "";
                    m_childorderKey_v_b_2 = "";
                    partial_fill_v_b_1 = 0;
                    partial_fill_v_b_2 = 0;

                selling_5 = false;
                qouted_price_received_5_s = false;
             

                if (m_instrumentTradeSubscription_5.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a1.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a1.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_5_a2.Orders.ContainsKey(m_orderKey_5_s))
                {
                    OrderProfile op = m_instrumentTradeSubscription_5_a2.Orders[m_orderKey_5_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_5_a2.SendOrder(op);

                }
                qoute_stuck_side_5_s_1 = "";
                qoute_stuck_side_5_s_2 = "";
                qoute_stuck_price_5_s_1 = 0;
                qoute_stuck_price_5_s_2 = 0;
                m_orderKey_5_s = "";
                dataGridView2.Rows[27].Cells[5].Value = "-";
                dataGridView2.Rows[27].Cells[2].Value = "-";
                dataGridView2.Rows[27].Cells[3].Value = "-";
                dataGridView2.Rows[27].Cells[4].Value = "-";
                dataGridView2.Rows[27].Cells[6].Value = "-";
                fill_5_s = 0;
                partial_fill_5_s_1 = 0;
                partial_fill_5_s_2 = 0;
                m_childorderKey_5_s_1 = "";
                m_childorderKey_5_s_2 = "";
               
                    selling_v = false;
                    qouted_price_received_v_s = false;
               

                    if (m_instrumentTradeSubscription_v.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a1.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a1.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_v_a2.Orders.ContainsKey(m_orderKey_v_s))
                    {
                        OrderProfile op = m_instrumentTradeSubscription_v_a2.Orders[m_orderKey_v_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_v_a2.SendOrder(op);

                    }
                    qoute_stuck_side_v_s_1 = "";
                    qoute_stuck_side_v_s_2 = "";
                    qoute_stuck_price_v_s_1 = 0;
                    qoute_stuck_price_v_s_2 = 0;
                    m_orderKey_v_s = "";
                    dataGridView2.Rows[29].Cells[5].Value = "-";
                    dataGridView2.Rows[29].Cells[2].Value = "-";
                    dataGridView2.Rows[29].Cells[3].Value = "-";
                    dataGridView2.Rows[29].Cells[4].Value = "-";
                    dataGridView2.Rows[29].Cells[6].Value = "-";
                    fill_v_s = 0;

                    m_childorderKey_v_s_1 = "";
                    m_childorderKey_v_s_2 = "";
                    partial_fill_v_s_1 = 0;
                    partial_fill_v_s_2 = 0;

                buying_6 = false;
                qouted_price_received_6_b = false;
                

                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_b))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_b].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);

                }
                fill_6_b = 0;
                qoute_stuck_side_6_b_1 = "";
                qoute_stuck_side_6_b_2 = "";
                qoute_stuck_price_6_b_1 = 0;
                qoute_stuck_price_6_b_2 = 0;
                m_orderKey_6_b = "";
                dataGridView2.Rows[30].Cells[5].Value = "-";
                dataGridView2.Rows[30].Cells[2].Value = "-";
                dataGridView2.Rows[30].Cells[3].Value = "-";
                dataGridView2.Rows[30].Cells[4].Value = "-";
                dataGridView2.Rows[30].Cells[6].Value = "-";

                m_childorderKey_6_b_1 = "";
                m_childorderKey_6_b_2 = "";
                partial_fill_6_b_1 = 0;
                partial_fill_6_b_2 = 0;
               
                    buying_vi = false;
                    qouted_price_received_vi_b = false;
                   

                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_b))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_b].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);

                    }
                    fill_vi_b = 0;
                    qoute_stuck_side_vi_b_1 = "";
                    qoute_stuck_side_vi_b_2 = "";
                    qoute_stuck_price_vi_b_1 = 0;
                    qoute_stuck_price_vi_b_2 = 0;
                    m_orderKey_vi_b = "";
                    dataGridView2.Rows[32].Cells[5].Value = "-";
                    dataGridView2.Rows[32].Cells[2].Value = "-";
                    dataGridView2.Rows[32].Cells[3].Value = "-";
                    dataGridView2.Rows[32].Cells[4].Value = "-";
                    dataGridView2.Rows[32].Cells[6].Value = "-";

                    m_childorderKey_vi_b_1 = "";
                    m_childorderKey_vi_b_2 = "";
                    partial_fill_vi_b_1 = 0;
                    partial_fill_vi_b_2 = 0;
                selling_6 = false;
                qouted_price_received_6_s = false;
               

                if (m_instrumentTradeSubscription_6.Orders.ContainsKey(m_orderKey_6_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a1.Orders.ContainsKey(m_orderKey_6_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a1.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a1.SendOrder(op);

                }
                if (m_instrumentTradeSubscription_6_a2.Orders.ContainsKey(m_orderKey_6_s))
                {

                    OrderProfile op = m_instrumentTradeSubscription_6_a2.Orders[m_orderKey_6_s].GetOrderProfile();
                    op.Action = OrderAction.Delete;
                    m_instrumentTradeSubscription_6_a2.SendOrder(op);

                }
                qoute_stuck_side_6_s_1 = "";
                qoute_stuck_side_6_s_2 = "";
                qoute_stuck_price_6_s_1 = 0;
                qoute_stuck_price_6_s_2 = 0;
                m_orderKey_6_s = "";

                dataGridView2.Rows[31].Cells[5].Value = "-";
                dataGridView2.Rows[31].Cells[2].Value = "-";
                dataGridView2.Rows[31].Cells[3].Value = "-";
                dataGridView2.Rows[31].Cells[4].Value = "-";
                dataGridView2.Rows[31].Cells[6].Value = "-";
                fill_6_s = 0;

                m_childorderKey_6_s_1 = "";
                m_childorderKey_6_s_2 = "";
                partial_fill_6_s_1 = 0;
                partial_fill_6_s_2 = 0;

            
                    selling_vi = false;
                    qouted_price_received_vi_s = false;
                    

                    if (m_instrumentTradeSubscription_vi.Orders.ContainsKey(m_orderKey_vi_s))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a1.Orders.ContainsKey(m_orderKey_vi_s))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a1.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a1.SendOrder(op);

                    }
                    if (m_instrumentTradeSubscription_vi_a2.Orders.ContainsKey(m_orderKey_vi_s))
                    {

                        OrderProfile op = m_instrumentTradeSubscription_vi_a2.Orders[m_orderKey_vi_s].GetOrderProfile();
                        op.Action = OrderAction.Delete;
                        m_instrumentTradeSubscription_vi_a2.SendOrder(op);

                    }
                    qoute_stuck_side_vi_s_1 = "";
                    qoute_stuck_side_vi_s_2 = "";
                    qoute_stuck_price_vi_s_1 = 0;
                    qoute_stuck_price_vi_s_2 = 0;
                    m_orderKey_vi_s = "";

                    dataGridView2.Rows[24].Cells[5].Value = "-";
                    dataGridView2.Rows[24].Cells[2].Value = "-";
                    dataGridView2.Rows[24].Cells[3].Value = "-";
                    dataGridView2.Rows[24].Cells[4].Value = "-";
                    dataGridView2.Rows[24].Cells[6].Value = "-";
                    fill_vi_s = 0;

                    m_childorderKey_vi_s_1 = "";
                    m_childorderKey_vi_s_2 = "";
                    partial_fill_vi_s_1 = 0;
                    partial_fill_vi_s_2 = 0;

                m_orderKey_i_b_old = "";
                m_hedgeorderKey_i_b_1 = "";
                m_hedgeorderKey_i_b_2 = "";
                qti_b = 0;
                rel_i_b = 0;
                new_reload_i_b = false;
                change_i_b = false;
                m_orderKey_b_old = "";
                m_hedgeorderKey_b_1 = "";
                m_hedgeorderKey_b_2 = "";
                qt1_b = 0;
                rel_1_b = 0;
                new_reload_1_b = false;
                change_b = false;

                m_orderKey_s_old = "";
                m_hedgeorderKey_s_1 = "";
                m_hedgeorderKey_s_2 = "";
                qt1_s = 0;
                rel_1_s = 0;
                new_reload_1_s = false;
                change_s = false;
                m_orderKey_i_s_old = "";
                m_hedgeorderKey_i_s_1 = "";
                m_hedgeorderKey_i_s_2 = "";
                qti_s = 0;
                rel_i_s = 0;
                new_reload_i_s = false;
                change_i_s = false;
                m_orderKey_1_b_old = "";
                m_hedgeorderKey_1_b_1 = "";
                m_hedgeorderKey_1_b_2 = "";
                qt2_b = 0;
                rel_2_b = 0;
                new_reload_2_b = false;
                change_2_b = false;

                m_orderKey_ii_b_old = "";
                m_hedgeorderKey_ii_b_1 = "";
                m_hedgeorderKey_ii_b_2 = "";
                qtii_b = 0;
                rel_ii_b = 0;
                new_reload_ii_b = false;
                change_ii_b = false;

                m_orderKey_1_s_old = "";
                m_hedgeorderKey_1_s_1 = "";
                m_hedgeorderKey_1_s_2 = "";
                qt2_s = 0;
                rel_2_s = 0;
                new_reload_1_s = false;
                change_2_s = false;

                m_orderKey_ii_s_old = "";
                m_hedgeorderKey_ii_s_1 = "";
                m_hedgeorderKey_ii_s_2 = "";
                qtii_s = 0;
                rel_ii_s = 0;
                new_reload_ii_s = false;
                change_ii_s = false;

                m_orderKey_3_b_old = "";
                m_hedgeorderKey_3_b_1 = "";
                m_hedgeorderKey_3_b_2 = "";
                qt3_b = 0;
                rel_3_b = 0;
                new_reload_3_b = false;
                change_3_b = false;
                m_orderKey_iii_b_old = "";
                m_hedgeorderKey_iii_b_1 = "";
                m_hedgeorderKey_iii_b_2 = "";
                qtiii_b = 0;
                rel_iii_b = 0;
                new_reload_iii_b = false;
                change_iii_b = false;
                m_orderKey_3_s_old = "";
                m_hedgeorderKey_3_s_1 = "";
                m_hedgeorderKey_3_s_2 = "";
                qt3_s = 0;
                rel_3_s = 0;
                new_reload_3_s = false;
                change_3_s = false;
                m_orderKey_iii_s_old = "";
                m_hedgeorderKey_iii_s_1 = "";
                m_hedgeorderKey_iii_s_2 = "";
                qtiii_s = 0;
                rel_iii_s = 0;
                new_reload_iii_s = false;
                change_iii_s = false;
                m_orderKey_4_b_old = "";
                m_hedgeorderKey_4_b_1 = "";
                m_hedgeorderKey_4_b_2 = "";
                qt4_b = 0;
                rel_4_b = 0;
                new_reload_4_b = false;
                change_4_b = false;
                m_orderKey_iv_b_old = "";
                m_hedgeorderKey_iv_b_1 = "";
                m_hedgeorderKey_iv_b_2 = "";
                qtiv_b = 0;
                rel_iv_b = 0;
                new_reload_iv_b = false;
                change_iv_b = false;

                m_orderKey_4_s_old = "";
                m_hedgeorderKey_4_s_1 = "";
                m_hedgeorderKey_4_s_2 = "";
                qt4_s = 0;
                rel_4_s = 0;
                new_reload_4_s = false;
                change_4_s = false;
                m_orderKey_iv_s_old = "";
                m_hedgeorderKey_iv_s_1 = "";
                m_hedgeorderKey_iv_s_2 = "";
                qtiv_s = 0;
                rel_iv_s = 0;
                new_reload_iv_s = false;
                change_iv_s = false;
                m_orderKey_5_b_old = "";
                m_hedgeorderKey_5_b_1 = "";
                m_hedgeorderKey_5_b_2 = "";
                qt5_b = 0;
                rel_5_b = 0;
                new_reload_5_b = false;
                change_5_b = false;
                m_orderKey_v_b_old = "";
                m_hedgeorderKey_v_b_1 = "";
                m_hedgeorderKey_v_b_2 = "";
                qtv_b = 0;
                rel_v_b = 0;
                new_reload_v_b = false;
                change_v_b = false;
                m_orderKey_5_s_old = "";
                m_hedgeorderKey_5_s_1 = "";
                m_hedgeorderKey_5_s_2 = "";
                qt5_s = 0;
                rel_5_s = 0;
                new_reload_5_s = false;
                change_5_s = false;

                m_orderKey_v_s_old = "";
                m_hedgeorderKey_v_s_1 = "";
                m_hedgeorderKey_v_s_2 = "";
                qtv_s = 0;
                rel_v_s = 0;
                new_reload_v_s = false;
                change_v_s = false;
                m_orderKey_6_b_old = "";
                m_hedgeorderKey_6_b_1 = "";
                m_hedgeorderKey_6_b_2 = "";
                qt6_b = 0;
                rel_6_b = 0;
                new_reload_6_b = false;
                change_6_b = false;
                m_orderKey_vi_b_old = "";
                m_hedgeorderKey_vi_b_1 = "";
                m_hedgeorderKey_vi_b_2 = "";
                qtvi_b = 0;
                rel_vi_b = 0;
                new_reload_vi_b = false;
                change_vi_b = false;
                m_orderKey_6_s_old = "";
                m_hedgeorderKey_6_s_1 = "";
                m_hedgeorderKey_6_s_2 = "";
                qt6_s = 0;
                rel_6_s = 0;
                new_reload_6_s = false;
                change_6_s = false;
                m_childorderKey_vi_s_1 = "";
                m_childorderKey_vi_s_2 = "";
                partial_fill_vi_s_1 = 0;
                partial_fill_vi_s_2 = 0;
                m_orderKey_vi_s_old = "";
                m_hedgeorderKey_vi_s_1 = "";
                m_hedgeorderKey_vi_s_2 = "";
                qtvi_s = 0;
                rel_vi_s = 0;
                new_reload_vi_s = false;
                change_vi_s = false;


            }
            catch (Exception ex)
            {
                Log.Information(ex.ToString());
                Log.Information(DateTime.Now.ToString());

                Environment.Exit(558);
            }
        }
    }
}
